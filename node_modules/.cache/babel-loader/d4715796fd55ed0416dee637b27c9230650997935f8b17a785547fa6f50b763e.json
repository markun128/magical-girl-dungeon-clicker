{"ast":null,"code":"var _jsxFileName = \"/home/matsuyama/claude/git/game/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameCanvas from './components/GameCanvas';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameState, setGameState] = useState({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0\n    },\n    monsters: [],\n    currentFloor: 1,\n    autoAttack: false,\n    particles: [],\n    damageTexts: []\n  });\n  const autoAttackRef = useRef(null);\n  const spawnMonster = useCallback(() => {\n    const types = [{\n      name: 'スライム',\n      color: '#00ff00',\n      hp: 20\n    }, {\n      name: 'ゴブリン',\n      color: '#ffaa00',\n      hp: 35\n    }, {\n      name: 'オーク',\n      color: '#ff4400',\n      hp: 50\n    }, {\n      name: 'ドラゴン',\n      color: '#aa0000',\n      hp: 100\n    }];\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.5;\n    const typeIndex = Math.min(Math.floor(gameState.currentFloor / 3), types.length - 1);\n    const type = types[typeIndex];\n    const monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: Math.floor(type.hp * floorMultiplier),\n      maxHp: Math.floor(type.hp * floorMultiplier),\n      name: type.name,\n      color: type.color,\n      animFrame: 0,\n      animSpeed: 0.05\n    };\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster]\n    }));\n  }, [gameState.currentFloor]);\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (!prevState.player.isAttacking && prevState.player.attackCooldown <= 0 && prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, 1000);\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n  const handleAttack = useCallback((currentState = gameState) => {\n    if (currentState.monsters.length === 0) return currentState;\n    const monster = currentState.monsters[0];\n    const damage = currentState.player.attack + Math.floor(Math.random() * 5);\n    const updatedMonster = {\n      ...monster,\n      hp: monster.hp - damage\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: damage.toString(),\n      color: '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n    const newParticles = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n    let newState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 30\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200);\n    return newState;\n  }, [gameState]);\n  const killMonster = useCallback((currentState, monster) => {\n    const expGain = Math.floor(monster.maxHp / 2);\n    const goldGain = Math.floor(monster.maxHp / 5) + currentState.currentFloor;\n    let newPlayer = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: currentState.player.gold + goldGain\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now() + 1000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 20,\n      text: `+${expGain} EXP`,\n      color: '#00ff00',\n      life: 60,\n      maxLife: 60\n    }, {\n      id: Date.now() + 2000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 40,\n      text: `+${goldGain} G`,\n      color: '#ffff00',\n      life: 60,\n      maxLife: 60\n    }];\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n  const levelUp = useCallback(player => {\n    return {\n      ...player,\n      level: player.level + 1,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n  }, []);\n  const handleCanvasClick = useCallback(() => {\n    if (!gameState.player.isAttacking && gameState.player.attackCooldown <= 0) {\n      setGameState(handleAttack);\n    }\n  }, [gameState.player.isAttacking, gameState.player.attackCooldown, handleAttack]);\n  const handleUpgrade = useCallback(type => {\n    setGameState(prevState => {\n      const newState = {\n        ...prevState\n      };\n      switch (type) {\n        case 'attack':\n          if (newState.player.gold >= 10) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 10,\n              attack: newState.player.attack + 5\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (newState.player.gold >= 50 && !newState.autoAttack) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 50\n            };\n            newState.autoAttack = true;\n          }\n          break;\n        case 'hp':\n          if (newState.player.gold >= 25) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 25,\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      return newState;\n    });\n  }, []);\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentFloor: prevState.currentFloor + 1,\n      monsters: []\n    }));\n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameCanvas, {\n        gameState: gameState,\n        setGameState: setGameState,\n        onCanvasClick: handleCanvasClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui-panel\",\n        children: [/*#__PURE__*/_jsxDEV(StatsPanel, {\n          player: gameState.player,\n          floor: gameState.currentFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpgradePanel, {\n          player: gameState.player,\n          autoAttack: gameState.autoAttack,\n          onUpgrade: handleUpgrade,\n          onNextFloor: nextFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"1CjwWbKeYJdUNd92MswRp6olg18=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","GameCanvas","StatsPanel","UpgradePanel","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","player","x","y","width","height","hp","maxHp","level","exp","expMax","attack","gold","animFrame","animSpeed","isAttacking","attackCooldown","monsters","currentFloor","autoAttack","particles","damageTexts","autoAttackRef","spawnMonster","types","name","color","floorMultiplier","typeIndex","Math","min","floor","length","type","monster","prevState","current","setInterval","handleAttack","clearInterval","currentState","damage","random","updatedMonster","newDamageTexts","id","Date","now","text","toString","life","maxLife","newParticles","i","push","vx","vy","newState","slice","killMonster","setTimeout","expGain","goldGain","newPlayer","levelUp","filter","m","handleCanvasClick","handleUpgrade","nextFloor","className","children","onCanvasClick","fileName","_jsxFileName","lineNumber","columnNumber","onUpgrade","onNextFloor","_c","$RefreshReg$"],"sources":["/home/matsuyama/claude/git/game/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameCanvas from './components/GameCanvas';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport { GameState, Monster, MonsterType, UpgradeType, Player, DamageText, Particle } from './types/gameTypes';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0\n    },\n    monsters: [],\n    currentFloor: 1,\n    autoAttack: false,\n    particles: [],\n    damageTexts: []\n  });\n\n  const autoAttackRef = useRef<NodeJS.Timeout | null>(null);\n\n  const spawnMonster = useCallback(() => {\n    const types: MonsterType[] = [\n      { name: 'スライム', color: '#00ff00', hp: 20 },\n      { name: 'ゴブリン', color: '#ffaa00', hp: 35 },\n      { name: 'オーク', color: '#ff4400', hp: 50 },\n      { name: 'ドラゴン', color: '#aa0000', hp: 100 }\n    ];\n\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.5;\n    const typeIndex = Math.min(Math.floor(gameState.currentFloor / 3), types.length - 1);\n    const type = types[typeIndex];\n\n    const monster: Monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: Math.floor(type.hp * floorMultiplier),\n      maxHp: Math.floor(type.hp * floorMultiplier),\n      name: type.name,\n      color: type.color,\n      animFrame: 0,\n      animSpeed: 0.05\n    };\n\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster]\n    }));\n  }, [gameState.currentFloor]);\n\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (!prevState.player.isAttacking && \n              prevState.player.attackCooldown <= 0 && \n              prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, 1000);\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n\n  const handleAttack = useCallback((currentState: GameState = gameState): GameState => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    const monster = currentState.monsters[0];\n    const damage = currentState.player.attack + Math.floor(Math.random() * 5);\n    const updatedMonster: Monster = { ...monster, hp: monster.hp - damage };\n\n    const newDamageTexts: DamageText[] = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: damage.toString(),\n      color: '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n\n    const newParticles: Particle[] = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n\n    let newState: GameState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 30\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n\n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200);\n\n    return newState;\n  }, [gameState]);\n\n  const killMonster = useCallback((currentState: GameState, monster: Monster): GameState => {\n    const expGain = Math.floor(monster.maxHp / 2);\n    const goldGain = Math.floor(monster.maxHp / 5) + currentState.currentFloor;\n\n    let newPlayer: Player = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: currentState.player.gold + goldGain\n    };\n\n    const newDamageTexts: DamageText[] = [\n      ...currentState.damageTexts,\n      {\n        id: Date.now() + 1000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 20,\n        text: `+${expGain} EXP`,\n        color: '#00ff00',\n        life: 60,\n        maxLife: 60\n      },\n      {\n        id: Date.now() + 2000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 40,\n        text: `+${goldGain} G`,\n        color: '#ffff00',\n        life: 60,\n        maxLife: 60\n      }\n    ];\n\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n\n  const levelUp = useCallback((player: Player): Player => {\n    return {\n      ...player,\n      level: player.level + 1,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n  }, []);\n\n  const handleCanvasClick = useCallback(() => {\n    if (!gameState.player.isAttacking && gameState.player.attackCooldown <= 0) {\n      setGameState(handleAttack);\n    }\n  }, [gameState.player.isAttacking, gameState.player.attackCooldown, handleAttack]);\n\n  const handleUpgrade = useCallback((type: UpgradeType) => {\n    setGameState(prevState => {\n      const newState: GameState = { ...prevState };\n      \n      switch (type) {\n        case 'attack':\n          if (newState.player.gold >= 10) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 10,\n              attack: newState.player.attack + 5\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (newState.player.gold >= 50 && !newState.autoAttack) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 50\n            };\n            newState.autoAttack = true;\n          }\n          break;\n        case 'hp':\n          if (newState.player.gold >= 25) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 25,\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      \n      return newState;\n    });\n  }, []);\n\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentFloor: prevState.currentFloor + 1,\n      monsters: []\n    }));\n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game-container\">\n        <GameCanvas \n          gameState={gameState}\n          setGameState={setGameState}\n          onCanvasClick={handleCanvasClick}\n        />\n        \n        <div className=\"ui-panel\">\n          <StatsPanel player={gameState.player} floor={gameState.currentFloor} />\n          <UpgradePanel \n            player={gameState.player}\n            autoAttack={gameState.autoAttack}\n            onUpgrade={handleUpgrade}\n            onNextFloor={nextFloor}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}