{"ast":null,"code":"var _jsxFileName = \"/home/matsuyama/claude/git/game/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameDisplay from './components/GameDisplay';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport TitleNotification from './components/TitleNotification';\nimport BattleLog from './components/BattleLog';\nimport Collection from './components/Collection';\nimport MagicPanel from './components/MagicPanel';\nimport EquipmentPanel from './components/EquipmentPanel';\nimport { checkNewTitleUnlocks } from './data/characterData';\nimport { getRandomItemDrop } from './data/itemData';\nimport { getCurrentDungeon, getRandomMonsterFromDungeon, getSpellDropFromMonster, getMonsterEvolutionName } from './data/dungeonData';\nimport { getRandomEquipmentDrop, upgradeEquipment, canUpgradeEquipment } from './data/equipmentData';\nimport { getRandomPhrase, getSpellDamageBonus, getSpellUpgradeCost, getAvailableSpells } from './data/magicData';\nimport { getItemSellPrice } from './data/itemData';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameState, setGameState] = useState({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0,\n      defense: 0,\n      criticalRate: 5,\n      expBonus: 0,\n      goldBonus: 0,\n      autoAttackSpeed: 500,\n      upgradeCount: {\n        attack: 0,\n        hp: 0,\n        defense: 0,\n        critical: 0,\n        expBonus: 0,\n        goldBonus: 0,\n        autoSpeed: 0\n      }\n    },\n    monsters: [],\n    currentFloor: 1,\n    currentDungeonId: 'forest',\n    autoAttack: false,\n    particles: [],\n    damageTexts: [],\n    unlockedTitles: ['novice'],\n    titleNotifications: [],\n    battleLog: [],\n    collection: [],\n    magicSpells: {\n      'fire_bolt': 1 // Start with Fire Bolt level 1\n    },\n    currentSpell: 'fire_bolt',\n    equipment: {\n      head: null,\n      body: null,\n      hands: null,\n      feet: null,\n      weapon: null\n    }\n  });\n  const autoAttackRef = useRef(null);\n  const [currentAttackPhrase, setCurrentAttackPhrase] = useState('');\n  const spawnMonster = useCallback(() => {\n    const currentDungeon = getCurrentDungeon(gameState.currentFloor);\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.3;\n    const monsterLevel = Math.max(1, gameState.currentFloor + Math.floor(Math.random() * 3) - 1);\n    const dungeonMonster = getRandomMonsterFromDungeon(currentDungeon.id, floorMultiplier);\n    if (!dungeonMonster) {\n      // Fallback to basic monster\n      const baseHp = Math.floor(20 * floorMultiplier);\n      const levelBonus = Math.floor(baseHp * 0.2 * (monsterLevel - 1));\n      const totalHp = baseHp + levelBonus;\n      const monster = {\n        x: 600,\n        y: 250,\n        width: 80,\n        height: 100,\n        hp: totalHp,\n        maxHp: totalHp,\n        name: 'スライム',\n        color: '#00ff00',\n        animFrame: 0,\n        animSpeed: 0.05,\n        level: monsterLevel,\n        attack: Math.floor(5 + monsterLevel * 2),\n        attackCooldown: 0\n      };\n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, monster]\n      }));\n      return;\n    }\n    const baseHp = dungeonMonster.hp;\n    const levelBonus = Math.floor(baseHp * 0.2 * (monsterLevel - 1));\n    const totalHp = baseHp + levelBonus;\n    const evolutionName = getMonsterEvolutionName(dungeonMonster, gameState.currentFloor);\n    const monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: totalHp,\n      maxHp: totalHp,\n      name: evolutionName,\n      color: dungeonMonster.color,\n      animFrame: 0,\n      animSpeed: 0.05,\n      level: monsterLevel,\n      attack: Math.floor((5 + monsterLevel * 2) * floorMultiplier),\n      attackCooldown: 0\n    };\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster],\n      currentDungeonId: currentDungeon.id\n    }));\n  }, [gameState.currentFloor]);\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, gameState.player.autoAttackSpeed); // Use player's auto attack speed\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n\n  // Monster attack system\n  useEffect(() => {\n    const monsterAttackInterval = setInterval(() => {\n      setGameState(prevState => {\n        if (prevState.monsters.length === 0) return prevState;\n        const monster = prevState.monsters[0];\n        if (monster.attackCooldown > 0) {\n          // Reduce cooldown\n          return {\n            ...prevState,\n            monsters: prevState.monsters.map((m, index) => index === 0 ? {\n              ...m,\n              attackCooldown: m.attackCooldown - 1\n            } : m)\n          };\n        }\n\n        // Monster attacks player\n        const equipmentStats = getEquipmentStats();\n        const totalDefense = prevState.player.defense + equipmentStats.defense;\n        const damage = Math.max(1, monster.attack - totalDefense);\n        const maxHp = prevState.player.maxHp + equipmentStats.hp;\n        const newPlayerHp = Math.max(0, Math.min(prevState.player.hp, maxHp) - damage);\n        const newDamageTexts = [...prevState.damageTexts, {\n          id: Date.now(),\n          x: prevState.player.x + prevState.player.width / 2,\n          y: prevState.player.y,\n          text: `-${damage}`,\n          color: '#ff4444',\n          life: 60,\n          maxLife: 60\n        }];\n\n        // Add monster attack particles\n        const newParticles = [...prevState.particles];\n        for (let i = 0; i < 5; i++) {\n          newParticles.push({\n            id: Date.now() + i,\n            x: prevState.player.x + prevState.player.width / 2,\n            y: prevState.player.y + prevState.player.height / 2,\n            vx: (Math.random() - 0.5) * 3,\n            vy: (Math.random() - 0.5) * 3,\n            color: '#ff4444',\n            life: 15,\n            maxLife: 15\n          });\n        }\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            hp: newPlayerHp\n          },\n          monsters: prevState.monsters.map((m, index) => index === 0 ? {\n            ...m,\n            attackCooldown: 60\n          } : m // 3 second cooldown at 50ms interval\n          ),\n          damageTexts: newDamageTexts,\n          particles: newParticles\n        };\n      });\n    }, 50); // 50ms interval for smooth animation\n\n    return () => clearInterval(monsterAttackInterval);\n  }, []);\n  const addToBattleLog = useCallback(newLog => {\n    setGameState(prevState => ({\n      ...prevState,\n      battleLog: [{\n        ...newLog,\n        id: Date.now() + Math.random()\n      }, ...prevState.battleLog.slice(0, 49) // Keep only last 50 logs\n      ]\n    }));\n  }, []);\n  const addToCollection = useCallback(item => {\n    setGameState(prevState => {\n      const existingItem = prevState.collection.find(c => c.item.id === item.id);\n      if (existingItem) {\n        return {\n          ...prevState,\n          collection: prevState.collection.map(c => c.item.id === item.id ? {\n            ...c,\n            quantity: c.quantity + 1\n          } : c)\n        };\n      } else {\n        return {\n          ...prevState,\n          collection: [...prevState.collection, {\n            item,\n            quantity: 1,\n            firstObtained: new Date()\n          }]\n        };\n      }\n    });\n  }, []);\n  const handleSellItem = useCallback((itemId, quantity) => {\n    setGameState(prevState => {\n      const item = prevState.collection.find(c => c.item.id === itemId);\n      if (!item) return prevState;\n      const sellPrice = getItemSellPrice(item.item) * quantity;\n      const remainingQuantity = item.quantity - quantity;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: Math.floor(prevState.player.gold + sellPrice)\n        },\n        collection: remainingQuantity <= 0 ? prevState.collection.filter(c => c.item.id !== itemId) : prevState.collection.map(c => c.item.id === itemId ? {\n          ...c,\n          quantity: remainingQuantity\n        } : c)\n      };\n    });\n\n    // Add sell log\n    setTimeout(() => {\n      var _gameState$collection;\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'item_drop',\n        message: `${quantity}個のアイテムを売却しました (+${getItemSellPrice((_gameState$collection = gameState.collection.find(c => c.item.id === itemId)) === null || _gameState$collection === void 0 ? void 0 : _gameState$collection.item)} × ${quantity}G)`\n      });\n    }, 100);\n  }, [gameState.collection, addToBattleLog]);\n  const handleAttack = useCallback((currentState = gameState) => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    // Generate random attack phrase based on current spell\n    const currentSpellLevel = currentState.magicSpells[currentState.currentSpell] || 1;\n    const attackPhrase = getRandomPhrase(currentState.currentSpell, currentSpellLevel);\n    setCurrentAttackPhrase(attackPhrase);\n\n    // Add attack to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'attack',\n        message: `セラフィナが攻撃しました`,\n        attackPhrase\n      });\n    }, 100);\n    const monster = currentState.monsters[0];\n    const spellBonus = getSpellDamageBonus(currentState.currentSpell, currentSpellLevel);\n    const equipmentStats = getEquipmentStats();\n    let damage = currentState.player.attack + equipmentStats.attack + spellBonus + Math.floor(Math.random() * 5);\n\n    // Apply critical hit chance\n    const totalCriticalRate = currentState.player.criticalRate + equipmentStats.criticalRate;\n    const isCritical = Math.random() * 100 < totalCriticalRate;\n    if (isCritical) {\n      damage = Math.floor(damage * 2);\n    }\n    const updatedMonster = {\n      ...monster,\n      hp: monster.hp - damage\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: isCritical ? `CRITICAL! ${damage}` : damage.toString(),\n      color: isCritical ? '#ff0000' : '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n    const newParticles = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n    let newState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 0\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n    setTimeout(() => {\n      setCurrentAttackPhrase('');\n    }, 3000); // Clear phrase after 3 seconds\n\n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200); // Button can be clicked again quickly\n\n    return newState;\n  }, [gameState]);\n  const killMonster = useCallback((currentState, monster) => {\n    const baseExpGain = Math.floor(monster.maxHp / 2);\n    const levelMultiplier = 1 + (monster.level - 1) * 0.15; // 15% bonus per level above 1\n    const baseGoldGain = Math.floor((Math.floor(monster.maxHp / 5) + currentState.currentFloor) * levelMultiplier);\n    const expGain = Math.floor(baseExpGain * (1 + currentState.player.expBonus / 100));\n    const goldGain = Math.floor(baseGoldGain * (1 + currentState.player.goldBonus / 100));\n    let newPlayer = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: Math.floor(currentState.player.gold + goldGain)\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now() + 1000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 20,\n      text: `+${expGain} EXP`,\n      color: '#00ff00',\n      life: 60,\n      maxLife: 60\n    }, {\n      id: Date.now() + 2000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 40,\n      text: `+${goldGain} G`,\n      color: '#ffff00',\n      life: 60,\n      maxLife: 60\n    }];\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    // Check for item drop\n    const droppedItem = getRandomItemDrop();\n    if (droppedItem) {\n      setTimeout(() => {\n        addToCollection(droppedItem);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `${droppedItem.icon} ${droppedItem.name}を獲得しました！`,\n          item: droppedItem\n        });\n      }, 200);\n    }\n\n    // Check for equipment drop\n    const droppedEquipment = getRandomEquipmentDrop();\n    if (droppedEquipment) {\n      setTimeout(() => {\n        addToCollection(droppedEquipment);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `🎒 ${droppedEquipment.icon} ${droppedEquipment.name}を獲得しました！`,\n          item: droppedEquipment\n        });\n      }, 250);\n    }\n\n    // Check for spell drop from rare/boss monsters\n    const droppedSpell = getSpellDropFromMonster({\n      id: monster.name,\n      name: monster.name,\n      hp: monster.maxHp,\n      color: monster.color,\n      emoji: '',\n      rarity: monster.maxHp > 150 ? 'boss' : monster.maxHp > 80 ? 'rare' : 'common',\n      spawnWeight: 1\n    });\n    if (droppedSpell) {\n      setTimeout(() => {\n        setGameState(prevState => ({\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [droppedSpell]: Math.max(1, prevState.magicSpells[droppedSpell] || 0)\n          }\n        }));\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `✨ 新しい魔法 ${droppedSpell} を習得しました！`\n        });\n      }, 300);\n    }\n\n    // Add monster defeat log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'monster_defeat',\n        message: `${monster.name}を倒しました！`\n      });\n    }, 150);\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n  const levelUp = useCallback(player => {\n    const newLevel = player.level + 1;\n    const newPlayer = {\n      ...player,\n      level: newLevel,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n\n    // Check for new title unlocks\n    setTimeout(() => {\n      setGameState(prevState => {\n        const newTitleUnlocks = checkNewTitleUnlocks(newLevel, prevState.currentFloor, prevState.unlockedTitles);\n        if (newTitleUnlocks.length > 0) {\n          return {\n            ...prevState,\n            unlockedTitles: [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)],\n            titleNotifications: [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          };\n        }\n        return prevState;\n      });\n    }, 100);\n\n    // Add level up to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'levelup',\n        message: `レベルが${newLevel}に上がりました！`\n      });\n    }, 300);\n    return newPlayer;\n  }, [addToBattleLog]);\n  const handleCanvasClick = useCallback(() => {\n    setGameState(handleAttack);\n  }, [handleAttack]);\n  const handleUpgrade = useCallback(type => {\n    setGameState(prevState => {\n      const newState = {\n        ...prevState\n      };\n      switch (type) {\n        case 'attack':\n          const attackCost = 10 * Math.pow(1.2, newState.player.upgradeCount.attack);\n          if (newState.player.gold >= attackCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - attackCost),\n              attack: newState.player.attack + 5,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                attack: newState.player.upgradeCount.attack + 1\n              }\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (!newState.autoAttack) {\n            if (newState.player.gold >= 50) {\n              newState.player = {\n                ...newState.player,\n                gold: Math.floor(newState.player.gold - 50)\n              };\n              newState.autoAttack = true;\n            }\n          } else {\n            newState.autoAttack = false;\n          }\n          break;\n        case 'hp':\n          const hpCost = Math.floor(25 * Math.pow(1.15, newState.player.upgradeCount.hp));\n          if (newState.player.gold >= hpCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - hpCost),\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                hp: newState.player.upgradeCount.hp + 1\n              }\n            };\n          }\n          break;\n        case 'defense':\n          const defenseCost = Math.floor(15 * Math.pow(1.18, newState.player.upgradeCount.defense));\n          if (newState.player.gold >= defenseCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - defenseCost),\n              defense: newState.player.defense + 3,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                defense: newState.player.upgradeCount.defense + 1\n              }\n            };\n          }\n          break;\n        case 'critical':\n          const criticalCost = Math.floor(30 * Math.pow(1.25, newState.player.upgradeCount.critical));\n          if (newState.player.gold >= criticalCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - criticalCost),\n              criticalRate: newState.player.criticalRate + 2,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                critical: newState.player.upgradeCount.critical + 1\n              }\n            };\n          }\n          break;\n        case 'expBonus':\n          const expBonusCost = Math.floor(40 * Math.pow(1.3, newState.player.upgradeCount.expBonus));\n          if (newState.player.gold >= expBonusCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - expBonusCost),\n              expBonus: newState.player.expBonus + 10,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                expBonus: newState.player.upgradeCount.expBonus + 1\n              }\n            };\n          }\n          break;\n        case 'goldBonus':\n          const goldBonusCost = Math.floor(35 * Math.pow(1.25, newState.player.upgradeCount.goldBonus));\n          if (newState.player.gold >= goldBonusCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - goldBonusCost),\n              goldBonus: newState.player.goldBonus + 15,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                goldBonus: newState.player.upgradeCount.goldBonus + 1\n              }\n            };\n          }\n          break;\n        case 'autoSpeed':\n          const autoSpeedCost = Math.floor(60 * Math.pow(1.4, newState.player.upgradeCount.autoSpeed));\n          if (newState.player.gold >= autoSpeedCost && newState.player.autoAttackSpeed > 100) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - autoSpeedCost),\n              autoAttackSpeed: Math.max(100, newState.player.autoAttackSpeed - 50),\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                autoSpeed: newState.player.upgradeCount.autoSpeed + 1\n              }\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      return newState;\n    });\n  }, []);\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => {\n      const newFloor = prevState.currentFloor + 1;\n\n      // Check for new title unlocks based on floor\n      const newTitleUnlocks = checkNewTitleUnlocks(prevState.player.level, newFloor, prevState.unlockedTitles);\n      return {\n        ...prevState,\n        currentFloor: newFloor,\n        monsters: [],\n        unlockedTitles: newTitleUnlocks.length > 0 ? [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)] : prevState.unlockedTitles,\n        titleNotifications: newTitleUnlocks.length > 0 ? [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)] : prevState.titleNotifications\n      };\n    });\n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n  const handleDismissNotification = useCallback(index => {\n    setGameState(prevState => ({\n      ...prevState,\n      titleNotifications: prevState.titleNotifications.filter((_, i) => i !== index)\n    }));\n  }, []);\n  const handleSpellUpgrade = useCallback(spellId => {\n    setGameState(prevState => {\n      const currentLevel = prevState.magicSpells[spellId] || 0;\n      const cost = currentLevel === 0 ? 0 : getSpellUpgradeCost(spellId, currentLevel);\n      if (currentLevel === 0) {\n        // Unlock spell\n        const availableSpells = getAvailableSpells(prevState.player.level);\n        const spell = availableSpells.find(s => s.id === spellId);\n        if (!spell || prevState.player.level < spell.unlockLevel) return prevState;\n        return {\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: 1\n          }\n        };\n      } else {\n        // Upgrade spell\n        if (prevState.player.gold < cost) return prevState;\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: Math.floor(prevState.player.gold - cost)\n          },\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: currentLevel + 1\n          }\n        };\n      }\n    });\n  }, []);\n  const handleSpellSelect = useCallback(spellId => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentSpell: spellId\n    }));\n  }, []);\n  const handleEquip = useCallback(item => {\n    if (!item.equipmentSlot) return;\n    setGameState(prevState => ({\n      ...prevState,\n      equipment: {\n        ...prevState.equipment,\n        [item.equipmentSlot]: item\n      }\n    }));\n  }, []);\n  const handleUnequip = useCallback(slot => {\n    setGameState(prevState => ({\n      ...prevState,\n      equipment: {\n        ...prevState.equipment,\n        [slot]: null\n      }\n    }));\n  }, []);\n  const handleUpgradeEquipment = useCallback(item => {\n    setGameState(prevState => {\n      const collectedItem = prevState.collection.find(c => c.item.id === item.id);\n      if (!collectedItem || !canUpgradeEquipment(item, collectedItem.quantity)) {\n        return prevState;\n      }\n      const upgradedItem = upgradeEquipment(item);\n      const newQuantity = collectedItem.quantity - 5;\n\n      // Update collection\n      const newCollection = newQuantity > 0 ? prevState.collection.map(c => c.item.id === item.id ? {\n        ...c,\n        item: upgradedItem,\n        quantity: newQuantity\n      } : c) : prevState.collection.filter(c => c.item.id !== item.id);\n\n      // Update equipped item if it matches\n      const newEquipment = {\n        ...prevState.equipment\n      };\n      Object.entries(newEquipment).forEach(([slot, equippedItem]) => {\n        if (equippedItem && equippedItem.id === item.id) {\n          newEquipment[slot] = upgradedItem;\n        }\n      });\n      return {\n        ...prevState,\n        collection: newCollection,\n        equipment: newEquipment\n      };\n    });\n\n    // Add upgrade log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'item_drop',\n        message: `${item.name}をアップグレードしました！`\n      });\n    }, 100);\n  }, [addToBattleLog]);\n\n  // Calculate total equipment stats\n  const getEquipmentStats = useCallback(() => {\n    const stats = {\n      attack: 0,\n      defense: 0,\n      hp: 0,\n      criticalRate: 0\n    };\n    Object.values(gameState.equipment).forEach(item => {\n      if (item !== null && item !== void 0 && item.stats) {\n        stats.attack += item.stats.attack || 0;\n        stats.defense += item.stats.defense || 0;\n        stats.hp += item.stats.hp || 0;\n        stats.criticalRate += item.stats.criticalRate || 0;\n      }\n    });\n    return stats;\n  }, [gameState.equipment]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameDisplay, {\n        gameState: gameState,\n        onAttackClick: handleCanvasClick,\n        attackPhrase: currentAttackPhrase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui-panel\",\n        children: [/*#__PURE__*/_jsxDEV(StatsPanel, {\n          player: gameState.player,\n          floor: gameState.currentFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpgradePanel, {\n          player: gameState.player,\n          autoAttack: gameState.autoAttack,\n          onUpgrade: handleUpgrade,\n          onNextFloor: nextFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-panel\",\n        children: [/*#__PURE__*/_jsxDEV(BattleLog, {\n          logs: gameState.battleLog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MagicPanel, {\n          playerLevel: gameState.player.level,\n          playerGold: gameState.player.gold,\n          magicSpells: gameState.magicSpells,\n          currentSpell: gameState.currentSpell,\n          onSpellUpgrade: handleSpellUpgrade,\n          onSpellSelect: handleSpellSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EquipmentPanel, {\n          gameState: gameState,\n          onEquip: handleEquip,\n          onUnequip: handleUnequip,\n          onUpgradeEquipment: handleUpgradeEquipment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Collection, {\n          collection: gameState.collection,\n          onSellItem: handleSellItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 856,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TitleNotification, {\n      notifications: gameState.titleNotifications,\n      onDismiss: handleDismissNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 893,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 855,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/TSeAzKIyyGER1LZHfpkCsKsOTo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","GameDisplay","StatsPanel","UpgradePanel","TitleNotification","BattleLog","Collection","MagicPanel","EquipmentPanel","checkNewTitleUnlocks","getRandomItemDrop","getCurrentDungeon","getRandomMonsterFromDungeon","getSpellDropFromMonster","getMonsterEvolutionName","getRandomEquipmentDrop","upgradeEquipment","canUpgradeEquipment","getRandomPhrase","getSpellDamageBonus","getSpellUpgradeCost","getAvailableSpells","getItemSellPrice","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","player","x","y","width","height","hp","maxHp","level","exp","expMax","attack","gold","animFrame","animSpeed","isAttacking","attackCooldown","defense","criticalRate","expBonus","goldBonus","autoAttackSpeed","upgradeCount","critical","autoSpeed","monsters","currentFloor","currentDungeonId","autoAttack","particles","damageTexts","unlockedTitles","titleNotifications","battleLog","collection","magicSpells","currentSpell","equipment","head","body","hands","feet","weapon","autoAttackRef","currentAttackPhrase","setCurrentAttackPhrase","spawnMonster","currentDungeon","floorMultiplier","monsterLevel","Math","max","floor","random","dungeonMonster","id","baseHp","levelBonus","totalHp","monster","name","color","prevState","evolutionName","current","setInterval","length","handleAttack","clearInterval","monsterAttackInterval","map","m","index","equipmentStats","getEquipmentStats","totalDefense","damage","newPlayerHp","min","newDamageTexts","Date","now","text","life","maxLife","newParticles","i","push","vx","vy","addToBattleLog","newLog","slice","addToCollection","item","existingItem","find","c","quantity","firstObtained","handleSellItem","itemId","sellPrice","remainingQuantity","filter","setTimeout","_gameState$collection","timestamp","type","message","currentState","currentSpellLevel","attackPhrase","spellBonus","totalCriticalRate","isCritical","updatedMonster","toString","newState","killMonster","baseExpGain","levelMultiplier","baseGoldGain","expGain","goldGain","newPlayer","levelUp","droppedItem","icon","droppedEquipment","droppedSpell","emoji","rarity","spawnWeight","newLevel","newTitleUnlocks","t","handleCanvasClick","handleUpgrade","attackCost","pow","hpCost","defenseCost","criticalCost","expBonusCost","goldBonusCost","autoSpeedCost","nextFloor","newFloor","handleDismissNotification","_","handleSpellUpgrade","spellId","currentLevel","cost","availableSpells","spell","s","unlockLevel","handleSpellSelect","handleEquip","equipmentSlot","handleUnequip","slot","handleUpgradeEquipment","collectedItem","upgradedItem","newQuantity","newCollection","newEquipment","Object","entries","forEach","equippedItem","stats","values","className","children","onAttackClick","fileName","_jsxFileName","lineNumber","columnNumber","onUpgrade","onNextFloor","logs","playerLevel","playerGold","onSpellUpgrade","onSpellSelect","onEquip","onUnequip","onUpgradeEquipment","onSellItem","notifications","onDismiss","_c","$RefreshReg$"],"sources":["/home/matsuyama/claude/git/game/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameDisplay from './components/GameDisplay';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport TitleNotification from './components/TitleNotification';\nimport BattleLog from './components/BattleLog';\nimport Collection from './components/Collection';\nimport MagicPanel from './components/MagicPanel';\nimport EquipmentPanel from './components/EquipmentPanel';\nimport { GameState, Monster, UpgradeType, Player, DamageText, Particle, BattleLog as BattleLogType, CollectedItem, Item } from './types/gameTypes';\nimport { getRandomAttackPhrase } from './data/attackPhrases';\nimport { checkNewTitleUnlocks, getCurrentTitle } from './data/characterData';\nimport { getRandomItemDrop } from './data/itemData';\nimport { getCurrentDungeon, getRandomMonsterFromDungeon, getSpellDropFromMonster, getMonsterEvolutionName } from './data/dungeonData';\nimport { getRandomEquipmentDrop, upgradeEquipment, canUpgradeEquipment } from './data/equipmentData';\nimport { getRandomPhrase, getSpellDamageBonus, getSpellUpgradeCost, getAvailableSpells } from './data/magicData';\nimport { getItemSellPrice } from './data/itemData';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0,\n      defense: 0,\n      criticalRate: 5,\n      expBonus: 0,\n      goldBonus: 0,\n      autoAttackSpeed: 500,\n      upgradeCount: {\n        attack: 0,\n        hp: 0,\n        defense: 0,\n        critical: 0,\n        expBonus: 0,\n        goldBonus: 0,\n        autoSpeed: 0\n      }\n    },\n    monsters: [],\n    currentFloor: 1,\n    currentDungeonId: 'forest',\n    autoAttack: false,\n    particles: [],\n    damageTexts: [],\n    unlockedTitles: ['novice'],\n    titleNotifications: [],\n    battleLog: [],\n    collection: [],\n    magicSpells: {\n      'fire_bolt': 1 // Start with Fire Bolt level 1\n    },\n    currentSpell: 'fire_bolt',\n    equipment: {\n      head: null,\n      body: null,\n      hands: null,\n      feet: null,\n      weapon: null\n    }\n  });\n\n  const autoAttackRef = useRef<NodeJS.Timeout | null>(null);\n  const [currentAttackPhrase, setCurrentAttackPhrase] = useState<string>('');\n\n  const spawnMonster = useCallback(() => {\n    const currentDungeon = getCurrentDungeon(gameState.currentFloor);\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.3;\n    const monsterLevel = Math.max(1, gameState.currentFloor + Math.floor(Math.random() * 3) - 1);\n    \n    const dungeonMonster = getRandomMonsterFromDungeon(currentDungeon.id, floorMultiplier);\n    \n    if (!dungeonMonster) {\n      // Fallback to basic monster\n      const baseHp = Math.floor(20 * floorMultiplier);\n      const levelBonus = Math.floor(baseHp * 0.2 * (monsterLevel - 1));\n      const totalHp = baseHp + levelBonus;\n      \n      const monster: Monster = {\n        x: 600,\n        y: 250,\n        width: 80,\n        height: 100,\n        hp: totalHp,\n        maxHp: totalHp,\n        name: 'スライム',\n        color: '#00ff00',\n        animFrame: 0,\n        animSpeed: 0.05,\n        level: monsterLevel,\n        attack: Math.floor(5 + monsterLevel * 2),\n        attackCooldown: 0\n      };\n      \n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, monster]\n      }));\n      return;\n    }\n\n    const baseHp = dungeonMonster.hp;\n    const levelBonus = Math.floor(baseHp * 0.2 * (monsterLevel - 1));\n    const totalHp = baseHp + levelBonus;\n\n    const evolutionName = getMonsterEvolutionName(dungeonMonster, gameState.currentFloor);\n\n    const monster: Monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: totalHp,\n      maxHp: totalHp,\n      name: evolutionName,\n      color: dungeonMonster.color,\n      animFrame: 0,\n      animSpeed: 0.05,\n      level: monsterLevel,\n      attack: Math.floor((5 + monsterLevel * 2) * floorMultiplier),\n      attackCooldown: 0\n    };\n\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster],\n      currentDungeonId: currentDungeon.id\n    }));\n  }, [gameState.currentFloor]);\n\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, gameState.player.autoAttackSpeed); // Use player's auto attack speed\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n\n  // Monster attack system\n  useEffect(() => {\n    const monsterAttackInterval = setInterval(() => {\n      setGameState(prevState => {\n        if (prevState.monsters.length === 0) return prevState;\n\n        const monster = prevState.monsters[0];\n        if (monster.attackCooldown > 0) {\n          // Reduce cooldown\n          return {\n            ...prevState,\n            monsters: prevState.monsters.map((m, index) => \n              index === 0 ? { ...m, attackCooldown: m.attackCooldown - 1 } : m\n            )\n          };\n        }\n\n        // Monster attacks player\n        const equipmentStats = getEquipmentStats();\n        const totalDefense = prevState.player.defense + equipmentStats.defense;\n        const damage = Math.max(1, monster.attack - totalDefense);\n        const maxHp = prevState.player.maxHp + equipmentStats.hp;\n        const newPlayerHp = Math.max(0, Math.min(prevState.player.hp, maxHp) - damage);\n        \n        const newDamageTexts = [...prevState.damageTexts, {\n          id: Date.now(),\n          x: prevState.player.x + prevState.player.width / 2,\n          y: prevState.player.y,\n          text: `-${damage}`,\n          color: '#ff4444',\n          life: 60,\n          maxLife: 60\n        }];\n\n        // Add monster attack particles\n        const newParticles = [...prevState.particles];\n        for (let i = 0; i < 5; i++) {\n          newParticles.push({\n            id: Date.now() + i,\n            x: prevState.player.x + prevState.player.width / 2,\n            y: prevState.player.y + prevState.player.height / 2,\n            vx: (Math.random() - 0.5) * 3,\n            vy: (Math.random() - 0.5) * 3,\n            color: '#ff4444',\n            life: 15,\n            maxLife: 15\n          });\n        }\n\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            hp: newPlayerHp\n          },\n          monsters: prevState.monsters.map((m, index) => \n            index === 0 ? { ...m, attackCooldown: 60 } : m // 3 second cooldown at 50ms interval\n          ),\n          damageTexts: newDamageTexts,\n          particles: newParticles\n        };\n      });\n    }, 50); // 50ms interval for smooth animation\n\n    return () => clearInterval(monsterAttackInterval);\n  }, []);\n\n  const addToBattleLog = useCallback((newLog: Omit<BattleLogType, 'id'>) => {\n    setGameState(prevState => ({\n      ...prevState,\n      battleLog: [\n        {\n          ...newLog,\n          id: Date.now() + Math.random()\n        },\n        ...prevState.battleLog.slice(0, 49) // Keep only last 50 logs\n      ]\n    }));\n  }, []);\n\n  const addToCollection = useCallback((item: any) => {\n    setGameState(prevState => {\n      const existingItem = prevState.collection.find(c => c.item.id === item.id);\n      \n      if (existingItem) {\n        return {\n          ...prevState,\n          collection: prevState.collection.map(c =>\n            c.item.id === item.id\n              ? { ...c, quantity: c.quantity + 1 }\n              : c\n          )\n        };\n      } else {\n        return {\n          ...prevState,\n          collection: [\n            ...prevState.collection,\n            {\n              item,\n              quantity: 1,\n              firstObtained: new Date()\n            }\n          ]\n        };\n      }\n    });\n  }, []);\n\n  const handleSellItem = useCallback((itemId: string, quantity: number) => {\n    setGameState(prevState => {\n      const item = prevState.collection.find(c => c.item.id === itemId);\n      if (!item) return prevState;\n\n      const sellPrice = getItemSellPrice(item.item) * quantity;\n      const remainingQuantity = item.quantity - quantity;\n\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: Math.floor(prevState.player.gold + sellPrice)\n        },\n        collection: remainingQuantity <= 0 \n          ? prevState.collection.filter(c => c.item.id !== itemId)\n          : prevState.collection.map(c =>\n              c.item.id === itemId\n                ? { ...c, quantity: remainingQuantity }\n                : c\n            )\n      };\n    });\n\n    // Add sell log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'item_drop',\n        message: `${quantity}個のアイテムを売却しました (+${getItemSellPrice(gameState.collection.find(c => c.item.id === itemId)?.item!)} × ${quantity}G)`\n      });\n    }, 100);\n  }, [gameState.collection, addToBattleLog]);\n\n  const handleAttack = useCallback((currentState: GameState = gameState): GameState => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    // Generate random attack phrase based on current spell\n    const currentSpellLevel = currentState.magicSpells[currentState.currentSpell] || 1;\n    const attackPhrase = getRandomPhrase(currentState.currentSpell, currentSpellLevel);\n    setCurrentAttackPhrase(attackPhrase);\n\n    // Add attack to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'attack',\n        message: `セラフィナが攻撃しました`,\n        attackPhrase\n      });\n    }, 100);\n\n    const monster = currentState.monsters[0];\n    const spellBonus = getSpellDamageBonus(currentState.currentSpell, currentSpellLevel);\n    const equipmentStats = getEquipmentStats();\n    let damage = currentState.player.attack + equipmentStats.attack + spellBonus + Math.floor(Math.random() * 5);\n    \n    // Apply critical hit chance\n    const totalCriticalRate = currentState.player.criticalRate + equipmentStats.criticalRate;\n    const isCritical = Math.random() * 100 < totalCriticalRate;\n    if (isCritical) {\n      damage = Math.floor(damage * 2);\n    }\n    \n    const updatedMonster: Monster = { ...monster, hp: monster.hp - damage };\n\n    const newDamageTexts: DamageText[] = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: isCritical ? `CRITICAL! ${damage}` : damage.toString(),\n      color: isCritical ? '#ff0000' : '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n\n    const newParticles: Particle[] = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n\n    let newState: GameState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 0\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n\n    setTimeout(() => {\n      setCurrentAttackPhrase('');\n    }, 3000); // Clear phrase after 3 seconds\n    \n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200); // Button can be clicked again quickly\n\n    return newState;\n  }, [gameState]);\n\n  const killMonster = useCallback((currentState: GameState, monster: Monster): GameState => {\n    const baseExpGain = Math.floor(monster.maxHp / 2);\n    const levelMultiplier = 1 + (monster.level - 1) * 0.15; // 15% bonus per level above 1\n    const baseGoldGain = Math.floor((Math.floor(monster.maxHp / 5) + currentState.currentFloor) * levelMultiplier);\n    \n    const expGain = Math.floor(baseExpGain * (1 + currentState.player.expBonus / 100));\n    const goldGain = Math.floor(baseGoldGain * (1 + currentState.player.goldBonus / 100));\n\n    let newPlayer: Player = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: Math.floor(currentState.player.gold + goldGain)\n    };\n\n    const newDamageTexts: DamageText[] = [\n      ...currentState.damageTexts,\n      {\n        id: Date.now() + 1000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 20,\n        text: `+${expGain} EXP`,\n        color: '#00ff00',\n        life: 60,\n        maxLife: 60\n      },\n      {\n        id: Date.now() + 2000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 40,\n        text: `+${goldGain} G`,\n        color: '#ffff00',\n        life: 60,\n        maxLife: 60\n      }\n    ];\n\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    // Check for item drop\n    const droppedItem = getRandomItemDrop();\n    if (droppedItem) {\n      setTimeout(() => {\n        addToCollection(droppedItem);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `${droppedItem.icon} ${droppedItem.name}を獲得しました！`,\n          item: droppedItem\n        });\n      }, 200);\n    }\n\n    // Check for equipment drop\n    const droppedEquipment = getRandomEquipmentDrop();\n    if (droppedEquipment) {\n      setTimeout(() => {\n        addToCollection(droppedEquipment);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `🎒 ${droppedEquipment.icon} ${droppedEquipment.name}を獲得しました！`,\n          item: droppedEquipment\n        });\n      }, 250);\n    }\n\n    // Check for spell drop from rare/boss monsters\n    const droppedSpell = getSpellDropFromMonster({\n      id: monster.name,\n      name: monster.name,\n      hp: monster.maxHp,\n      color: monster.color,\n      emoji: '',\n      rarity: monster.maxHp > 150 ? 'boss' : monster.maxHp > 80 ? 'rare' : 'common',\n      spawnWeight: 1\n    });\n    \n    if (droppedSpell) {\n      setTimeout(() => {\n        setGameState(prevState => ({\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [droppedSpell]: Math.max(1, prevState.magicSpells[droppedSpell] || 0)\n          }\n        }));\n        \n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `✨ 新しい魔法 ${droppedSpell} を習得しました！`\n        });\n      }, 300);\n    }\n\n    // Add monster defeat log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'monster_defeat',\n        message: `${monster.name}を倒しました！`\n      });\n    }, 150);\n\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n\n  const levelUp = useCallback((player: Player): Player => {\n    const newLevel = player.level + 1;\n    const newPlayer = {\n      ...player,\n      level: newLevel,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n\n    // Check for new title unlocks\n    setTimeout(() => {\n      setGameState(prevState => {\n        const newTitleUnlocks = checkNewTitleUnlocks(newLevel, prevState.currentFloor, prevState.unlockedTitles);\n        if (newTitleUnlocks.length > 0) {\n          return {\n            ...prevState,\n            unlockedTitles: [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)],\n            titleNotifications: [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          };\n        }\n        return prevState;\n      });\n    }, 100);\n\n    // Add level up to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'levelup',\n        message: `レベルが${newLevel}に上がりました！`\n      });\n    }, 300);\n\n    return newPlayer;\n  }, [addToBattleLog]);\n\n  const handleCanvasClick = useCallback(() => {\n    setGameState(handleAttack);\n  }, [handleAttack]);\n\n\n  const handleUpgrade = useCallback((type: UpgradeType) => {\n    setGameState(prevState => {\n      const newState: GameState = { ...prevState };\n      \n      switch (type) {\n        case 'attack':\n          const attackCost = 10 * Math.pow(1.2, newState.player.upgradeCount.attack);\n          if (newState.player.gold >= attackCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - attackCost),\n              attack: newState.player.attack + 5,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                attack: newState.player.upgradeCount.attack + 1\n              }\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (!newState.autoAttack) {\n            if (newState.player.gold >= 50) {\n              newState.player = {\n                ...newState.player,\n                gold: Math.floor(newState.player.gold - 50)\n              };\n              newState.autoAttack = true;\n            }\n          } else {\n            newState.autoAttack = false;\n          }\n          break;\n        case 'hp':\n          const hpCost = Math.floor(25 * Math.pow(1.15, newState.player.upgradeCount.hp));\n          if (newState.player.gold >= hpCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - hpCost),\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                hp: newState.player.upgradeCount.hp + 1\n              }\n            };\n          }\n          break;\n        case 'defense':\n          const defenseCost = Math.floor(15 * Math.pow(1.18, newState.player.upgradeCount.defense));\n          if (newState.player.gold >= defenseCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - defenseCost),\n              defense: newState.player.defense + 3,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                defense: newState.player.upgradeCount.defense + 1\n              }\n            };\n          }\n          break;\n        case 'critical':\n          const criticalCost = Math.floor(30 * Math.pow(1.25, newState.player.upgradeCount.critical));\n          if (newState.player.gold >= criticalCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - criticalCost),\n              criticalRate: newState.player.criticalRate + 2,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                critical: newState.player.upgradeCount.critical + 1\n              }\n            };\n          }\n          break;\n        case 'expBonus':\n          const expBonusCost = Math.floor(40 * Math.pow(1.3, newState.player.upgradeCount.expBonus));\n          if (newState.player.gold >= expBonusCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - expBonusCost),\n              expBonus: newState.player.expBonus + 10,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                expBonus: newState.player.upgradeCount.expBonus + 1\n              }\n            };\n          }\n          break;\n        case 'goldBonus':\n          const goldBonusCost = Math.floor(35 * Math.pow(1.25, newState.player.upgradeCount.goldBonus));\n          if (newState.player.gold >= goldBonusCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - goldBonusCost),\n              goldBonus: newState.player.goldBonus + 15,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                goldBonus: newState.player.upgradeCount.goldBonus + 1\n              }\n            };\n          }\n          break;\n        case 'autoSpeed':\n          const autoSpeedCost = Math.floor(60 * Math.pow(1.4, newState.player.upgradeCount.autoSpeed));\n          if (newState.player.gold >= autoSpeedCost && newState.player.autoAttackSpeed > 100) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - autoSpeedCost),\n              autoAttackSpeed: Math.max(100, newState.player.autoAttackSpeed - 50),\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                autoSpeed: newState.player.upgradeCount.autoSpeed + 1\n              }\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      \n      return newState;\n    });\n  }, []);\n\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => {\n      const newFloor = prevState.currentFloor + 1;\n      \n      // Check for new title unlocks based on floor\n      const newTitleUnlocks = checkNewTitleUnlocks(prevState.player.level, newFloor, prevState.unlockedTitles);\n      \n      return {\n        ...prevState,\n        currentFloor: newFloor,\n        monsters: [],\n        unlockedTitles: newTitleUnlocks.length > 0 \n          ? [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)]\n          : prevState.unlockedTitles,\n        titleNotifications: newTitleUnlocks.length > 0\n          ? [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          : prevState.titleNotifications\n      };\n    });\n    \n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n\n  const handleDismissNotification = useCallback((index: number) => {\n    setGameState(prevState => ({\n      ...prevState,\n      titleNotifications: prevState.titleNotifications.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  const handleSpellUpgrade = useCallback((spellId: string) => {\n    setGameState(prevState => {\n      const currentLevel = prevState.magicSpells[spellId] || 0;\n      const cost = currentLevel === 0 ? 0 : getSpellUpgradeCost(spellId, currentLevel);\n      \n      if (currentLevel === 0) {\n        // Unlock spell\n        const availableSpells = getAvailableSpells(prevState.player.level);\n        const spell = availableSpells.find(s => s.id === spellId);\n        if (!spell || prevState.player.level < spell.unlockLevel) return prevState;\n        \n        return {\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: 1\n          }\n        };\n      } else {\n        // Upgrade spell\n        if (prevState.player.gold < cost) return prevState;\n        \n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: Math.floor(prevState.player.gold - cost)\n          },\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: currentLevel + 1\n          }\n        };\n      }\n    });\n  }, []);\n\n  const handleSpellSelect = useCallback((spellId: string) => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentSpell: spellId\n    }));\n  }, []);\n\n  const handleEquip = useCallback((item: Item) => {\n    if (!item.equipmentSlot) return;\n    \n    setGameState(prevState => ({\n      ...prevState,\n      equipment: {\n        ...prevState.equipment,\n        [item.equipmentSlot!]: item\n      }\n    }));\n  }, []);\n\n  const handleUnequip = useCallback((slot: 'head' | 'body' | 'hands' | 'feet' | 'weapon') => {\n    setGameState(prevState => ({\n      ...prevState,\n      equipment: {\n        ...prevState.equipment,\n        [slot]: null\n      }\n    }));\n  }, []);\n\n  const handleUpgradeEquipment = useCallback((item: Item) => {\n    setGameState(prevState => {\n      const collectedItem = prevState.collection.find(c => c.item.id === item.id);\n      if (!collectedItem || !canUpgradeEquipment(item, collectedItem.quantity)) {\n        return prevState;\n      }\n\n      const upgradedItem = upgradeEquipment(item);\n      const newQuantity = collectedItem.quantity - 5;\n\n      // Update collection\n      const newCollection = newQuantity > 0 \n        ? prevState.collection.map(c => \n            c.item.id === item.id \n              ? { ...c, item: upgradedItem, quantity: newQuantity }\n              : c\n          )\n        : prevState.collection.filter(c => c.item.id !== item.id);\n\n      // Update equipped item if it matches\n      const newEquipment = { ...prevState.equipment };\n      Object.entries(newEquipment).forEach(([slot, equippedItem]) => {\n        if (equippedItem && equippedItem.id === item.id) {\n          newEquipment[slot as keyof typeof newEquipment] = upgradedItem;\n        }\n      });\n\n      return {\n        ...prevState,\n        collection: newCollection,\n        equipment: newEquipment\n      };\n    });\n\n    // Add upgrade log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'item_drop',\n        message: `${item.name}をアップグレードしました！`\n      });\n    }, 100);\n  }, [addToBattleLog]);\n\n  // Calculate total equipment stats\n  const getEquipmentStats = useCallback(() => {\n    const stats = { attack: 0, defense: 0, hp: 0, criticalRate: 0 };\n    Object.values(gameState.equipment).forEach(item => {\n      if (item?.stats) {\n        stats.attack += item.stats.attack || 0;\n        stats.defense += item.stats.defense || 0;\n        stats.hp += item.stats.hp || 0;\n        stats.criticalRate += item.stats.criticalRate || 0;\n      }\n    });\n    return stats;\n  }, [gameState.equipment]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game-container\">\n        <GameDisplay \n          gameState={gameState}\n          onAttackClick={handleCanvasClick}\n          attackPhrase={currentAttackPhrase}\n        />\n        \n        <div className=\"ui-panel\">\n          <StatsPanel player={gameState.player} floor={gameState.currentFloor} />\n          <UpgradePanel \n            player={gameState.player}\n            autoAttack={gameState.autoAttack}\n            onUpgrade={handleUpgrade}\n            onNextFloor={nextFloor}\n          />\n        </div>\n        \n        <div className=\"bottom-panel\">\n          <BattleLog logs={gameState.battleLog} />\n          <MagicPanel \n            playerLevel={gameState.player.level}\n            playerGold={gameState.player.gold}\n            magicSpells={gameState.magicSpells}\n            currentSpell={gameState.currentSpell}\n            onSpellUpgrade={handleSpellUpgrade}\n            onSpellSelect={handleSpellSelect}\n          />\n          <EquipmentPanel \n            gameState={gameState}\n            onEquip={handleEquip}\n            onUnequip={handleUnequip}\n            onUpgradeEquipment={handleUpgradeEquipment}\n          />\n          <Collection collection={gameState.collection} onSellItem={handleSellItem} />\n        </div>\n      </div>\n      \n      <TitleNotification \n        notifications={gameState.titleNotifications}\n        onDismiss={handleDismissNotification}\n      />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,cAAc,MAAM,6BAA6B;AAGxD,SAASC,oBAAoB,QAAyB,sBAAsB;AAC5E,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,iBAAiB,EAAEC,2BAA2B,EAAEC,uBAAuB,EAAEC,uBAAuB,QAAQ,oBAAoB;AACrI,SAASC,sBAAsB,EAAEC,gBAAgB,EAAEC,mBAAmB,QAAQ,sBAAsB;AACpG,SAASC,eAAe,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,kBAAkB,QAAQ,kBAAkB;AAChH,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAY;IACpDgC,MAAM,EAAE;MACNC,CAAC,EAAE,GAAG;MACNC,CAAC,EAAE,GAAG;MACNC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,CAAC;MACRC,GAAG,EAAE,CAAC;MACNC,MAAM,EAAE,GAAG;MACXC,MAAM,EAAE,EAAE;MACVC,IAAI,EAAE,CAAC;MACPC,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,GAAG;MACdC,WAAW,EAAE,KAAK;MAClBC,cAAc,EAAE,CAAC;MACjBC,OAAO,EAAE,CAAC;MACVC,YAAY,EAAE,CAAC;MACfC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAE,CAAC;MACZC,eAAe,EAAE,GAAG;MACpBC,YAAY,EAAE;QACZX,MAAM,EAAE,CAAC;QACTL,EAAE,EAAE,CAAC;QACLW,OAAO,EAAE,CAAC;QACVM,QAAQ,EAAE,CAAC;QACXJ,QAAQ,EAAE,CAAC;QACXC,SAAS,EAAE,CAAC;QACZI,SAAS,EAAE;MACb;IACF,CAAC;IACDC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,CAAC;IACfC,gBAAgB,EAAE,QAAQ;IAC1BC,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE,EAAE;IACbC,WAAW,EAAE,EAAE;IACfC,cAAc,EAAE,CAAC,QAAQ,CAAC;IAC1BC,kBAAkB,EAAE,EAAE;IACtBC,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;MACX,WAAW,EAAE,CAAC,CAAC;IACjB,CAAC;IACDC,YAAY,EAAE,WAAW;IACzBC,SAAS,EAAE;MACTC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE,IAAI;MACVC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAGxE,MAAM,CAAwB,IAAI,CAAC;EACzD,MAAM,CAACyE,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG5E,QAAQ,CAAS,EAAE,CAAC;EAE1E,MAAM6E,YAAY,GAAG1E,WAAW,CAAC,MAAM;IACrC,MAAM2E,cAAc,GAAGhE,iBAAiB,CAACgB,SAAS,CAAC2B,YAAY,CAAC;IAChE,MAAMsB,eAAe,GAAG,CAAC,GAAG,CAACjD,SAAS,CAAC2B,YAAY,GAAG,CAAC,IAAI,GAAG;IAC9D,MAAMuB,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEpD,SAAS,CAAC2B,YAAY,GAAGwB,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAE5F,MAAMC,cAAc,GAAGtE,2BAA2B,CAAC+D,cAAc,CAACQ,EAAE,EAAEP,eAAe,CAAC;IAEtF,IAAI,CAACM,cAAc,EAAE;MACnB;MACA,MAAME,MAAM,GAAGN,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGJ,eAAe,CAAC;MAC/C,MAAMS,UAAU,GAAGP,IAAI,CAACE,KAAK,CAACI,MAAM,GAAG,GAAG,IAAIP,YAAY,GAAG,CAAC,CAAC,CAAC;MAChE,MAAMS,OAAO,GAAGF,MAAM,GAAGC,UAAU;MAEnC,MAAME,OAAgB,GAAG;QACvBzD,CAAC,EAAE,GAAG;QACNC,CAAC,EAAE,GAAG;QACNC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,GAAG;QACXC,EAAE,EAAEoD,OAAO;QACXnD,KAAK,EAAEmD,OAAO;QACdE,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE,SAAS;QAChBhD,SAAS,EAAE,CAAC;QACZC,SAAS,EAAE,IAAI;QACfN,KAAK,EAAEyC,YAAY;QACnBtC,MAAM,EAAEuC,IAAI,CAACE,KAAK,CAAC,CAAC,GAAGH,YAAY,GAAG,CAAC,CAAC;QACxCjC,cAAc,EAAE;MAClB,CAAC;MAEDhB,YAAY,CAAC8D,SAAS,KAAK;QACzB,GAAGA,SAAS;QACZrC,QAAQ,EAAE,CAAC,GAAGqC,SAAS,CAACrC,QAAQ,EAAEkC,OAAO;MAC3C,CAAC,CAAC,CAAC;MACH;IACF;IAEA,MAAMH,MAAM,GAAGF,cAAc,CAAChD,EAAE;IAChC,MAAMmD,UAAU,GAAGP,IAAI,CAACE,KAAK,CAACI,MAAM,GAAG,GAAG,IAAIP,YAAY,GAAG,CAAC,CAAC,CAAC;IAChE,MAAMS,OAAO,GAAGF,MAAM,GAAGC,UAAU;IAEnC,MAAMM,aAAa,GAAG7E,uBAAuB,CAACoE,cAAc,EAAEvD,SAAS,CAAC2B,YAAY,CAAC;IAErF,MAAMiC,OAAgB,GAAG;MACvBzD,CAAC,EAAE,GAAG;MACNC,CAAC,EAAE,GAAG;MACNC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,GAAG;MACXC,EAAE,EAAEoD,OAAO;MACXnD,KAAK,EAAEmD,OAAO;MACdE,IAAI,EAAEG,aAAa;MACnBF,KAAK,EAAEP,cAAc,CAACO,KAAK;MAC3BhD,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,IAAI;MACfN,KAAK,EAAEyC,YAAY;MACnBtC,MAAM,EAAEuC,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,GAAGH,YAAY,GAAG,CAAC,IAAID,eAAe,CAAC;MAC5DhC,cAAc,EAAE;IAClB,CAAC;IAEDhB,YAAY,CAAC8D,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZrC,QAAQ,EAAE,CAAC,GAAGqC,SAAS,CAACrC,QAAQ,EAAEkC,OAAO,CAAC;MAC1ChC,gBAAgB,EAAEoB,cAAc,CAACQ;IACnC,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACxD,SAAS,CAAC2B,YAAY,CAAC,CAAC;EAE5BxD,SAAS,CAAC,MAAM;IACd4E,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN5E,SAAS,CAAC,MAAM;IACd,IAAI6B,SAAS,CAAC6B,UAAU,IAAI,CAACe,aAAa,CAACqB,OAAO,EAAE;MAClDrB,aAAa,CAACqB,OAAO,GAAGC,WAAW,CAAC,MAAM;QACxCjE,YAAY,CAAC8D,SAAS,IAAI;UACxB,IAAIA,SAAS,CAACrC,QAAQ,CAACyC,MAAM,GAAG,CAAC,EAAE;YACjC,OAAOC,YAAY,CAACL,SAAS,CAAC;UAChC;UACA,OAAOA,SAAS;QAClB,CAAC,CAAC;MACJ,CAAC,EAAE/D,SAAS,CAACE,MAAM,CAACoB,eAAe,CAAC,CAAC,CAAC;IACxC,CAAC,MAAM,IAAI,CAACtB,SAAS,CAAC6B,UAAU,IAAIe,aAAa,CAACqB,OAAO,EAAE;MACzDI,aAAa,CAACzB,aAAa,CAACqB,OAAO,CAAC;MACpCrB,aAAa,CAACqB,OAAO,GAAG,IAAI;IAC9B;IAEA,OAAO,MAAM;MACX,IAAIrB,aAAa,CAACqB,OAAO,EAAE;QACzBI,aAAa,CAACzB,aAAa,CAACqB,OAAO,CAAC;MACtC;IACF,CAAC;EACH,CAAC,EAAE,CAACjE,SAAS,CAAC6B,UAAU,CAAC,CAAC;;EAE1B;EACA1D,SAAS,CAAC,MAAM;IACd,MAAMmG,qBAAqB,GAAGJ,WAAW,CAAC,MAAM;MAC9CjE,YAAY,CAAC8D,SAAS,IAAI;QACxB,IAAIA,SAAS,CAACrC,QAAQ,CAACyC,MAAM,KAAK,CAAC,EAAE,OAAOJ,SAAS;QAErD,MAAMH,OAAO,GAAGG,SAAS,CAACrC,QAAQ,CAAC,CAAC,CAAC;QACrC,IAAIkC,OAAO,CAAC3C,cAAc,GAAG,CAAC,EAAE;UAC9B;UACA,OAAO;YACL,GAAG8C,SAAS;YACZrC,QAAQ,EAAEqC,SAAS,CAACrC,QAAQ,CAAC6C,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KACxCA,KAAK,KAAK,CAAC,GAAG;cAAE,GAAGD,CAAC;cAAEvD,cAAc,EAAEuD,CAAC,CAACvD,cAAc,GAAG;YAAE,CAAC,GAAGuD,CACjE;UACF,CAAC;QACH;;QAEA;QACA,MAAME,cAAc,GAAGC,iBAAiB,CAAC,CAAC;QAC1C,MAAMC,YAAY,GAAGb,SAAS,CAAC7D,MAAM,CAACgB,OAAO,GAAGwD,cAAc,CAACxD,OAAO;QACtE,MAAM2D,MAAM,GAAG1B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEQ,OAAO,CAAChD,MAAM,GAAGgE,YAAY,CAAC;QACzD,MAAMpE,KAAK,GAAGuD,SAAS,CAAC7D,MAAM,CAACM,KAAK,GAAGkE,cAAc,CAACnE,EAAE;QACxD,MAAMuE,WAAW,GAAG3B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAAC4B,GAAG,CAAChB,SAAS,CAAC7D,MAAM,CAACK,EAAE,EAAEC,KAAK,CAAC,GAAGqE,MAAM,CAAC;QAE9E,MAAMG,cAAc,GAAG,CAAC,GAAGjB,SAAS,CAAChC,WAAW,EAAE;UAChDyB,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC;UACd/E,CAAC,EAAE4D,SAAS,CAAC7D,MAAM,CAACC,CAAC,GAAG4D,SAAS,CAAC7D,MAAM,CAACG,KAAK,GAAG,CAAC;UAClDD,CAAC,EAAE2D,SAAS,CAAC7D,MAAM,CAACE,CAAC;UACrB+E,IAAI,EAAE,IAAIN,MAAM,EAAE;UAClBf,KAAK,EAAE,SAAS;UAChBsB,IAAI,EAAE,EAAE;UACRC,OAAO,EAAE;QACX,CAAC,CAAC;;QAEF;QACA,MAAMC,YAAY,GAAG,CAAC,GAAGvB,SAAS,CAACjC,SAAS,CAAC;QAC7C,KAAK,IAAIyD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1BD,YAAY,CAACE,IAAI,CAAC;YAChBhC,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGK,CAAC;YAClBpF,CAAC,EAAE4D,SAAS,CAAC7D,MAAM,CAACC,CAAC,GAAG4D,SAAS,CAAC7D,MAAM,CAACG,KAAK,GAAG,CAAC;YAClDD,CAAC,EAAE2D,SAAS,CAAC7D,MAAM,CAACE,CAAC,GAAG2D,SAAS,CAAC7D,MAAM,CAACI,MAAM,GAAG,CAAC;YACnDmF,EAAE,EAAE,CAACtC,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;YAC7BoC,EAAE,EAAE,CAACvC,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;YAC7BQ,KAAK,EAAE,SAAS;YAChBsB,IAAI,EAAE,EAAE;YACRC,OAAO,EAAE;UACX,CAAC,CAAC;QACJ;QAEA,OAAO;UACL,GAAGtB,SAAS;UACZ7D,MAAM,EAAE;YACN,GAAG6D,SAAS,CAAC7D,MAAM;YACnBK,EAAE,EAAEuE;UACN,CAAC;UACDpD,QAAQ,EAAEqC,SAAS,CAACrC,QAAQ,CAAC6C,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KACxCA,KAAK,KAAK,CAAC,GAAG;YAAE,GAAGD,CAAC;YAAEvD,cAAc,EAAE;UAAG,CAAC,GAAGuD,CAAC,CAAC;UACjD,CAAC;UACDzC,WAAW,EAAEiD,cAAc;UAC3BlD,SAAS,EAAEwD;QACb,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAER,OAAO,MAAMjB,aAAa,CAACC,qBAAqB,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMqB,cAAc,GAAGtH,WAAW,CAAEuH,MAAiC,IAAK;IACxE3F,YAAY,CAAC8D,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZ7B,SAAS,EAAE,CACT;QACE,GAAG0D,MAAM;QACTpC,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG/B,IAAI,CAACG,MAAM,CAAC;MAC/B,CAAC,EACD,GAAGS,SAAS,CAAC7B,SAAS,CAAC2D,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MAAA;IAExC,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAGzH,WAAW,CAAE0H,IAAS,IAAK;IACjD9F,YAAY,CAAC8D,SAAS,IAAI;MACxB,MAAMiC,YAAY,GAAGjC,SAAS,CAAC5B,UAAU,CAAC8D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAKuC,IAAI,CAACvC,EAAE,CAAC;MAE1E,IAAIwC,YAAY,EAAE;QAChB,OAAO;UACL,GAAGjC,SAAS;UACZ5B,UAAU,EAAE4B,SAAS,CAAC5B,UAAU,CAACoC,GAAG,CAAC2B,CAAC,IACpCA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAKuC,IAAI,CAACvC,EAAE,GACjB;YAAE,GAAG0C,CAAC;YAAEC,QAAQ,EAAED,CAAC,CAACC,QAAQ,GAAG;UAAE,CAAC,GAClCD,CACN;QACF,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACL,GAAGnC,SAAS;UACZ5B,UAAU,EAAE,CACV,GAAG4B,SAAS,CAAC5B,UAAU,EACvB;YACE4D,IAAI;YACJI,QAAQ,EAAE,CAAC;YACXC,aAAa,EAAE,IAAInB,IAAI,CAAC;UAC1B,CAAC;QAEL,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMoB,cAAc,GAAGhI,WAAW,CAAC,CAACiI,MAAc,EAAEH,QAAgB,KAAK;IACvElG,YAAY,CAAC8D,SAAS,IAAI;MACxB,MAAMgC,IAAI,GAAGhC,SAAS,CAAC5B,UAAU,CAAC8D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAK8C,MAAM,CAAC;MACjE,IAAI,CAACP,IAAI,EAAE,OAAOhC,SAAS;MAE3B,MAAMwC,SAAS,GAAG5G,gBAAgB,CAACoG,IAAI,CAACA,IAAI,CAAC,GAAGI,QAAQ;MACxD,MAAMK,iBAAiB,GAAGT,IAAI,CAACI,QAAQ,GAAGA,QAAQ;MAElD,OAAO;QACL,GAAGpC,SAAS;QACZ7D,MAAM,EAAE;UACN,GAAG6D,SAAS,CAAC7D,MAAM;UACnBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACU,SAAS,CAAC7D,MAAM,CAACW,IAAI,GAAG0F,SAAS;QACpD,CAAC;QACDpE,UAAU,EAAEqE,iBAAiB,IAAI,CAAC,GAC9BzC,SAAS,CAAC5B,UAAU,CAACsE,MAAM,CAACP,CAAC,IAAIA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAK8C,MAAM,CAAC,GACtDvC,SAAS,CAAC5B,UAAU,CAACoC,GAAG,CAAC2B,CAAC,IACxBA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAK8C,MAAM,GAChB;UAAE,GAAGJ,CAAC;UAAEC,QAAQ,EAAEK;QAAkB,CAAC,GACrCN,CACN;MACN,CAAC;IACH,CAAC,CAAC;;IAEF;IACAQ,UAAU,CAAC,MAAM;MAAA,IAAAC,qBAAA;MACfhB,cAAc,CAAC;QACbiB,SAAS,EAAE,IAAI3B,IAAI,CAAC,CAAC;QACrB4B,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAE,GAAGX,QAAQ,mBAAmBxG,gBAAgB,EAAAgH,qBAAA,GAAC3G,SAAS,CAACmC,UAAU,CAAC8D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAK8C,MAAM,CAAC,cAAAK,qBAAA,uBAApDA,qBAAA,CAAsDZ,IAAK,CAAC,MAAMI,QAAQ;MACpI,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,EAAE,CAACnG,SAAS,CAACmC,UAAU,EAAEwD,cAAc,CAAC,CAAC;EAE1C,MAAMvB,YAAY,GAAG/F,WAAW,CAAC,CAAC0I,YAAuB,GAAG/G,SAAS,KAAgB;IACnF,IAAI+G,YAAY,CAACrF,QAAQ,CAACyC,MAAM,KAAK,CAAC,EAAE,OAAO4C,YAAY;;IAE3D;IACA,MAAMC,iBAAiB,GAAGD,YAAY,CAAC3E,WAAW,CAAC2E,YAAY,CAAC1E,YAAY,CAAC,IAAI,CAAC;IAClF,MAAM4E,YAAY,GAAG1H,eAAe,CAACwH,YAAY,CAAC1E,YAAY,EAAE2E,iBAAiB,CAAC;IAClFlE,sBAAsB,CAACmE,YAAY,CAAC;;IAEpC;IACAP,UAAU,CAAC,MAAM;MACff,cAAc,CAAC;QACbiB,SAAS,EAAE,IAAI3B,IAAI,CAAC,CAAC;QACrB4B,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,cAAc;QACvBG;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IAEP,MAAMrD,OAAO,GAAGmD,YAAY,CAACrF,QAAQ,CAAC,CAAC,CAAC;IACxC,MAAMwF,UAAU,GAAG1H,mBAAmB,CAACuH,YAAY,CAAC1E,YAAY,EAAE2E,iBAAiB,CAAC;IACpF,MAAMtC,cAAc,GAAGC,iBAAiB,CAAC,CAAC;IAC1C,IAAIE,MAAM,GAAGkC,YAAY,CAAC7G,MAAM,CAACU,MAAM,GAAG8D,cAAc,CAAC9D,MAAM,GAAGsG,UAAU,GAAG/D,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;;IAE5G;IACA,MAAM6D,iBAAiB,GAAGJ,YAAY,CAAC7G,MAAM,CAACiB,YAAY,GAAGuD,cAAc,CAACvD,YAAY;IACxF,MAAMiG,UAAU,GAAGjE,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG6D,iBAAiB;IAC1D,IAAIC,UAAU,EAAE;MACdvC,MAAM,GAAG1B,IAAI,CAACE,KAAK,CAACwB,MAAM,GAAG,CAAC,CAAC;IACjC;IAEA,MAAMwC,cAAuB,GAAG;MAAE,GAAGzD,OAAO;MAAErD,EAAE,EAAEqD,OAAO,CAACrD,EAAE,GAAGsE;IAAO,CAAC;IAEvE,MAAMG,cAA4B,GAAG,CAAC,GAAG+B,YAAY,CAAChF,WAAW,EAAE;MACjEyB,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC;MACd/E,CAAC,EAAEyD,OAAO,CAACzD,CAAC,GAAGyD,OAAO,CAACvD,KAAK,GAAG,CAAC;MAChCD,CAAC,EAAEwD,OAAO,CAACxD,CAAC;MACZ+E,IAAI,EAAEiC,UAAU,GAAG,aAAavC,MAAM,EAAE,GAAGA,MAAM,CAACyC,QAAQ,CAAC,CAAC;MAC5DxD,KAAK,EAAEsD,UAAU,GAAG,SAAS,GAAG,SAAS;MACzChC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,MAAMC,YAAwB,GAAG,CAAC,GAAGyB,YAAY,CAACjF,SAAS,CAAC;IAC5D,KAAK,IAAIyD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,YAAY,CAACE,IAAI,CAAC;QAChBhC,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGK,CAAC;QAClBpF,CAAC,EAAEyD,OAAO,CAACzD,CAAC,GAAGyD,OAAO,CAACvD,KAAK,GAAG,CAAC;QAChCD,CAAC,EAAEwD,OAAO,CAACxD,CAAC,GAAGwD,OAAO,CAACtD,MAAM,GAAG,CAAC;QACjCmF,EAAE,EAAE,CAACtC,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;QAC7BoC,EAAE,EAAE,CAACvC,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;QAC7BQ,KAAK,EAAE,SAAS;QAChBsB,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IAEA,IAAIkC,QAAmB,GAAG;MACxB,GAAGR,YAAY;MACf7G,MAAM,EAAE;QACN,GAAG6G,YAAY,CAAC7G,MAAM;QACtBc,WAAW,EAAE,IAAI;QACjBC,cAAc,EAAE;MAClB,CAAC;MACDS,QAAQ,EAAE,CAAC2F,cAAc,EAAE,GAAGN,YAAY,CAACrF,QAAQ,CAACmE,KAAK,CAAC,CAAC,CAAC,CAAC;MAC7D9D,WAAW,EAAEiD,cAAc;MAC3BlD,SAAS,EAAEwD;IACb,CAAC;IAED,IAAI+B,cAAc,CAAC9G,EAAE,IAAI,CAAC,EAAE;MAC1BgH,QAAQ,GAAGC,WAAW,CAACD,QAAQ,EAAEF,cAAc,CAAC;IAClD;IAEAX,UAAU,CAAC,MAAM;MACf5D,sBAAsB,CAAC,EAAE,CAAC;IAC5B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV4D,UAAU,CAAC,MAAM;MACfzG,YAAY,CAAC8D,SAAS,KAAK;QACzB,GAAGA,SAAS;QACZ7D,MAAM,EAAE;UACN,GAAG6D,SAAS,CAAC7D,MAAM;UACnBc,WAAW,EAAE;QACf;MACF,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAOuG,QAAQ;EACjB,CAAC,EAAE,CAACvH,SAAS,CAAC,CAAC;EAEf,MAAMwH,WAAW,GAAGnJ,WAAW,CAAC,CAAC0I,YAAuB,EAAEnD,OAAgB,KAAgB;IACxF,MAAM6D,WAAW,GAAGtE,IAAI,CAACE,KAAK,CAACO,OAAO,CAACpD,KAAK,GAAG,CAAC,CAAC;IACjD,MAAMkH,eAAe,GAAG,CAAC,GAAG,CAAC9D,OAAO,CAACnD,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC;IACxD,MAAMkH,YAAY,GAAGxE,IAAI,CAACE,KAAK,CAAC,CAACF,IAAI,CAACE,KAAK,CAACO,OAAO,CAACpD,KAAK,GAAG,CAAC,CAAC,GAAGuG,YAAY,CAACpF,YAAY,IAAI+F,eAAe,CAAC;IAE9G,MAAME,OAAO,GAAGzE,IAAI,CAACE,KAAK,CAACoE,WAAW,IAAI,CAAC,GAAGV,YAAY,CAAC7G,MAAM,CAACkB,QAAQ,GAAG,GAAG,CAAC,CAAC;IAClF,MAAMyG,QAAQ,GAAG1E,IAAI,CAACE,KAAK,CAACsE,YAAY,IAAI,CAAC,GAAGZ,YAAY,CAAC7G,MAAM,CAACmB,SAAS,GAAG,GAAG,CAAC,CAAC;IAErF,IAAIyG,SAAiB,GAAG;MACtB,GAAGf,YAAY,CAAC7G,MAAM;MACtBQ,GAAG,EAAEqG,YAAY,CAAC7G,MAAM,CAACQ,GAAG,GAAGkH,OAAO;MACtC/G,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAAC0D,YAAY,CAAC7G,MAAM,CAACW,IAAI,GAAGgH,QAAQ;IACtD,CAAC;IAED,MAAM7C,cAA4B,GAAG,CACnC,GAAG+B,YAAY,CAAChF,WAAW,EAC3B;MACEyB,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;MACrB/E,CAAC,EAAEyD,OAAO,CAACzD,CAAC,GAAGyD,OAAO,CAACvD,KAAK,GAAG,CAAC;MAChCD,CAAC,EAAEwD,OAAO,CAACxD,CAAC,GAAG,EAAE;MACjB+E,IAAI,EAAE,IAAIyC,OAAO,MAAM;MACvB9D,KAAK,EAAE,SAAS;MAChBsB,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;IACX,CAAC,EACD;MACE7B,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;MACrB/E,CAAC,EAAEyD,OAAO,CAACzD,CAAC,GAAGyD,OAAO,CAACvD,KAAK,GAAG,CAAC;MAChCD,CAAC,EAAEwD,OAAO,CAACxD,CAAC,GAAG,EAAE;MACjB+E,IAAI,EAAE,IAAI0C,QAAQ,IAAI;MACtB/D,KAAK,EAAE,SAAS;MAChBsB,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;IACX,CAAC,CACF;IAED,IAAIyC,SAAS,CAACpH,GAAG,IAAIoH,SAAS,CAACnH,MAAM,EAAE;MACrCmH,SAAS,GAAGC,OAAO,CAACD,SAAS,CAAC;MAC9B9C,cAAc,CAACQ,IAAI,CAAC;QAClBhC,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;QACrB/E,CAAC,EAAE2H,SAAS,CAAC3H,CAAC,GAAG2H,SAAS,CAACzH,KAAK,GAAG,CAAC;QACpCD,CAAC,EAAE0H,SAAS,CAAC1H,CAAC;QACd+E,IAAI,EAAE,WAAW;QACjBrB,KAAK,EAAE,SAAS;QAChBsB,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;;IAEA;IACA,MAAM2C,WAAW,GAAGjJ,iBAAiB,CAAC,CAAC;IACvC,IAAIiJ,WAAW,EAAE;MACftB,UAAU,CAAC,MAAM;QACfZ,eAAe,CAACkC,WAAW,CAAC;QAC5BrC,cAAc,CAAC;UACbiB,SAAS,EAAE,IAAI3B,IAAI,CAAC,CAAC;UACrB4B,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAE,GAAGkB,WAAW,CAACC,IAAI,IAAID,WAAW,CAACnE,IAAI,UAAU;UAC1DkC,IAAI,EAAEiC;QACR,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT;;IAEA;IACA,MAAME,gBAAgB,GAAG9I,sBAAsB,CAAC,CAAC;IACjD,IAAI8I,gBAAgB,EAAE;MACpBxB,UAAU,CAAC,MAAM;QACfZ,eAAe,CAACoC,gBAAgB,CAAC;QACjCvC,cAAc,CAAC;UACbiB,SAAS,EAAE,IAAI3B,IAAI,CAAC,CAAC;UACrB4B,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAE,MAAMoB,gBAAgB,CAACD,IAAI,IAAIC,gBAAgB,CAACrE,IAAI,UAAU;UACvEkC,IAAI,EAAEmC;QACR,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT;;IAEA;IACA,MAAMC,YAAY,GAAGjJ,uBAAuB,CAAC;MAC3CsE,EAAE,EAAEI,OAAO,CAACC,IAAI;MAChBA,IAAI,EAAED,OAAO,CAACC,IAAI;MAClBtD,EAAE,EAAEqD,OAAO,CAACpD,KAAK;MACjBsD,KAAK,EAAEF,OAAO,CAACE,KAAK;MACpBsE,KAAK,EAAE,EAAE;MACTC,MAAM,EAAEzE,OAAO,CAACpD,KAAK,GAAG,GAAG,GAAG,MAAM,GAAGoD,OAAO,CAACpD,KAAK,GAAG,EAAE,GAAG,MAAM,GAAG,QAAQ;MAC7E8H,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,IAAIH,YAAY,EAAE;MAChBzB,UAAU,CAAC,MAAM;QACfzG,YAAY,CAAC8D,SAAS,KAAK;UACzB,GAAGA,SAAS;UACZ3B,WAAW,EAAE;YACX,GAAG2B,SAAS,CAAC3B,WAAW;YACxB,CAAC+F,YAAY,GAAGhF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEW,SAAS,CAAC3B,WAAW,CAAC+F,YAAY,CAAC,IAAI,CAAC;UACtE;QACF,CAAC,CAAC,CAAC;QAEHxC,cAAc,CAAC;UACbiB,SAAS,EAAE,IAAI3B,IAAI,CAAC,CAAC;UACrB4B,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAE,WAAWqB,YAAY;QAClC,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT;;IAEA;IACAzB,UAAU,CAAC,MAAM;MACff,cAAc,CAAC;QACbiB,SAAS,EAAE,IAAI3B,IAAI,CAAC,CAAC;QACrB4B,IAAI,EAAE,gBAAgB;QACtBC,OAAO,EAAE,GAAGlD,OAAO,CAACC,IAAI;MAC1B,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IAEP6C,UAAU,CAAC,MAAM;MACf3D,YAAY,CAAC,CAAC;IAChB,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO;MACL,GAAGgE,YAAY;MACf7G,MAAM,EAAE4H,SAAS;MACjBpG,QAAQ,EAAEqF,YAAY,CAACrF,QAAQ,CAAC+E,MAAM,CAACjC,CAAC,IAAIA,CAAC,KAAKZ,OAAO,CAAC;MAC1D7B,WAAW,EAAEiD;IACf,CAAC;EACH,CAAC,EAAE,CAACjC,YAAY,CAAC,CAAC;EAElB,MAAMgF,OAAO,GAAG1J,WAAW,CAAE6B,MAAc,IAAa;IACtD,MAAMqI,QAAQ,GAAGrI,MAAM,CAACO,KAAK,GAAG,CAAC;IACjC,MAAMqH,SAAS,GAAG;MAChB,GAAG5H,MAAM;MACTO,KAAK,EAAE8H,QAAQ;MACf7H,GAAG,EAAER,MAAM,CAACQ,GAAG,GAAGR,MAAM,CAACS,MAAM;MAC/BA,MAAM,EAAEwC,IAAI,CAACE,KAAK,CAACnD,MAAM,CAACS,MAAM,GAAG,GAAG,CAAC;MACvCC,MAAM,EAAEV,MAAM,CAACU,MAAM,GAAG,CAAC;MACzBJ,KAAK,EAAEN,MAAM,CAACM,KAAK,GAAG,EAAE;MACxBD,EAAE,EAAEL,MAAM,CAACM,KAAK,GAAG;IACrB,CAAC;;IAED;IACAkG,UAAU,CAAC,MAAM;MACfzG,YAAY,CAAC8D,SAAS,IAAI;QACxB,MAAMyE,eAAe,GAAG1J,oBAAoB,CAACyJ,QAAQ,EAAExE,SAAS,CAACpC,YAAY,EAAEoC,SAAS,CAAC/B,cAAc,CAAC;QACxG,IAAIwG,eAAe,CAACrE,MAAM,GAAG,CAAC,EAAE;UAC9B,OAAO;YACL,GAAGJ,SAAS;YACZ/B,cAAc,EAAE,CAAC,GAAG+B,SAAS,CAAC/B,cAAc,EAAE,GAAGwG,eAAe,CAACjE,GAAG,CAACkE,CAAC,IAAIA,CAAC,CAACjF,EAAE,CAAC,CAAC;YAChFvB,kBAAkB,EAAE,CAAC,GAAG8B,SAAS,CAAC9B,kBAAkB,EAAE,GAAGuG,eAAe,CAACjE,GAAG,CAACkE,CAAC,IAAIA,CAAC,CAAC5E,IAAI,CAAC;UAC3F,CAAC;QACH;QACA,OAAOE,SAAS;MAClB,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;;IAEP;IACA2C,UAAU,CAAC,MAAM;MACff,cAAc,CAAC;QACbiB,SAAS,EAAE,IAAI3B,IAAI,CAAC,CAAC;QACrB4B,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE,OAAOyB,QAAQ;MAC1B,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IAEP,OAAOT,SAAS;EAClB,CAAC,EAAE,CAACnC,cAAc,CAAC,CAAC;EAEpB,MAAM+C,iBAAiB,GAAGrK,WAAW,CAAC,MAAM;IAC1C4B,YAAY,CAACmE,YAAY,CAAC;EAC5B,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAGlB,MAAMuE,aAAa,GAAGtK,WAAW,CAAEwI,IAAiB,IAAK;IACvD5G,YAAY,CAAC8D,SAAS,IAAI;MACxB,MAAMwD,QAAmB,GAAG;QAAE,GAAGxD;MAAU,CAAC;MAE5C,QAAQ8C,IAAI;QACV,KAAK,QAAQ;UACX,MAAM+B,UAAU,GAAG,EAAE,GAAGzF,IAAI,CAAC0F,GAAG,CAAC,GAAG,EAAEtB,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACX,MAAM,CAAC;UAC1E,IAAI2G,QAAQ,CAACrH,MAAM,CAACW,IAAI,IAAI+H,UAAU,EAAE;YACtCrB,QAAQ,CAACrH,MAAM,GAAG;cAChB,GAAGqH,QAAQ,CAACrH,MAAM;cAClBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACkE,QAAQ,CAACrH,MAAM,CAACW,IAAI,GAAG+H,UAAU,CAAC;cACnDhI,MAAM,EAAE2G,QAAQ,CAACrH,MAAM,CAACU,MAAM,GAAG,CAAC;cAClCW,YAAY,EAAE;gBACZ,GAAGgG,QAAQ,CAACrH,MAAM,CAACqB,YAAY;gBAC/BX,MAAM,EAAE2G,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACX,MAAM,GAAG;cAChD;YACF,CAAC;UACH;UACA;QACF,KAAK,YAAY;UACf,IAAI,CAAC2G,QAAQ,CAAC1F,UAAU,EAAE;YACxB,IAAI0F,QAAQ,CAACrH,MAAM,CAACW,IAAI,IAAI,EAAE,EAAE;cAC9B0G,QAAQ,CAACrH,MAAM,GAAG;gBAChB,GAAGqH,QAAQ,CAACrH,MAAM;gBAClBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACkE,QAAQ,CAACrH,MAAM,CAACW,IAAI,GAAG,EAAE;cAC5C,CAAC;cACD0G,QAAQ,CAAC1F,UAAU,GAAG,IAAI;YAC5B;UACF,CAAC,MAAM;YACL0F,QAAQ,CAAC1F,UAAU,GAAG,KAAK;UAC7B;UACA;QACF,KAAK,IAAI;UACP,MAAMiH,MAAM,GAAG3F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC0F,GAAG,CAAC,IAAI,EAAEtB,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAAChB,EAAE,CAAC,CAAC;UAC/E,IAAIgH,QAAQ,CAACrH,MAAM,CAACW,IAAI,IAAIiI,MAAM,EAAE;YAClCvB,QAAQ,CAACrH,MAAM,GAAG;cAChB,GAAGqH,QAAQ,CAACrH,MAAM;cAClBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACkE,QAAQ,CAACrH,MAAM,CAACW,IAAI,GAAGiI,MAAM,CAAC;cAC/CtI,KAAK,EAAE+G,QAAQ,CAACrH,MAAM,CAACM,KAAK,GAAG,EAAE;cACjCD,EAAE,EAAEgH,QAAQ,CAACrH,MAAM,CAACM,KAAK,GAAG,EAAE;cAC9Be,YAAY,EAAE;gBACZ,GAAGgG,QAAQ,CAACrH,MAAM,CAACqB,YAAY;gBAC/BhB,EAAE,EAAEgH,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAAChB,EAAE,GAAG;cACxC;YACF,CAAC;UACH;UACA;QACF,KAAK,SAAS;UACZ,MAAMwI,WAAW,GAAG5F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC0F,GAAG,CAAC,IAAI,EAAEtB,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACL,OAAO,CAAC,CAAC;UACzF,IAAIqG,QAAQ,CAACrH,MAAM,CAACW,IAAI,IAAIkI,WAAW,EAAE;YACvCxB,QAAQ,CAACrH,MAAM,GAAG;cAChB,GAAGqH,QAAQ,CAACrH,MAAM;cAClBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACkE,QAAQ,CAACrH,MAAM,CAACW,IAAI,GAAGkI,WAAW,CAAC;cACpD7H,OAAO,EAAEqG,QAAQ,CAACrH,MAAM,CAACgB,OAAO,GAAG,CAAC;cACpCK,YAAY,EAAE;gBACZ,GAAGgG,QAAQ,CAACrH,MAAM,CAACqB,YAAY;gBAC/BL,OAAO,EAAEqG,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACL,OAAO,GAAG;cAClD;YACF,CAAC;UACH;UACA;QACF,KAAK,UAAU;UACb,MAAM8H,YAAY,GAAG7F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC0F,GAAG,CAAC,IAAI,EAAEtB,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACC,QAAQ,CAAC,CAAC;UAC3F,IAAI+F,QAAQ,CAACrH,MAAM,CAACW,IAAI,IAAImI,YAAY,EAAE;YACxCzB,QAAQ,CAACrH,MAAM,GAAG;cAChB,GAAGqH,QAAQ,CAACrH,MAAM;cAClBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACkE,QAAQ,CAACrH,MAAM,CAACW,IAAI,GAAGmI,YAAY,CAAC;cACrD7H,YAAY,EAAEoG,QAAQ,CAACrH,MAAM,CAACiB,YAAY,GAAG,CAAC;cAC9CI,YAAY,EAAE;gBACZ,GAAGgG,QAAQ,CAACrH,MAAM,CAACqB,YAAY;gBAC/BC,QAAQ,EAAE+F,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACC,QAAQ,GAAG;cACpD;YACF,CAAC;UACH;UACA;QACF,KAAK,UAAU;UACb,MAAMyH,YAAY,GAAG9F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC0F,GAAG,CAAC,GAAG,EAAEtB,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACH,QAAQ,CAAC,CAAC;UAC1F,IAAImG,QAAQ,CAACrH,MAAM,CAACW,IAAI,IAAIoI,YAAY,EAAE;YACxC1B,QAAQ,CAACrH,MAAM,GAAG;cAChB,GAAGqH,QAAQ,CAACrH,MAAM;cAClBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACkE,QAAQ,CAACrH,MAAM,CAACW,IAAI,GAAGoI,YAAY,CAAC;cACrD7H,QAAQ,EAAEmG,QAAQ,CAACrH,MAAM,CAACkB,QAAQ,GAAG,EAAE;cACvCG,YAAY,EAAE;gBACZ,GAAGgG,QAAQ,CAACrH,MAAM,CAACqB,YAAY;gBAC/BH,QAAQ,EAAEmG,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACH,QAAQ,GAAG;cACpD;YACF,CAAC;UACH;UACA;QACF,KAAK,WAAW;UACd,MAAM8H,aAAa,GAAG/F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC0F,GAAG,CAAC,IAAI,EAAEtB,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACF,SAAS,CAAC,CAAC;UAC7F,IAAIkG,QAAQ,CAACrH,MAAM,CAACW,IAAI,IAAIqI,aAAa,EAAE;YACzC3B,QAAQ,CAACrH,MAAM,GAAG;cAChB,GAAGqH,QAAQ,CAACrH,MAAM;cAClBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACkE,QAAQ,CAACrH,MAAM,CAACW,IAAI,GAAGqI,aAAa,CAAC;cACtD7H,SAAS,EAAEkG,QAAQ,CAACrH,MAAM,CAACmB,SAAS,GAAG,EAAE;cACzCE,YAAY,EAAE;gBACZ,GAAGgG,QAAQ,CAACrH,MAAM,CAACqB,YAAY;gBAC/BF,SAAS,EAAEkG,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACF,SAAS,GAAG;cACtD;YACF,CAAC;UACH;UACA;QACF,KAAK,WAAW;UACd,MAAM8H,aAAa,GAAGhG,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC0F,GAAG,CAAC,GAAG,EAAEtB,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACE,SAAS,CAAC,CAAC;UAC5F,IAAI8F,QAAQ,CAACrH,MAAM,CAACW,IAAI,IAAIsI,aAAa,IAAI5B,QAAQ,CAACrH,MAAM,CAACoB,eAAe,GAAG,GAAG,EAAE;YAClFiG,QAAQ,CAACrH,MAAM,GAAG;cAChB,GAAGqH,QAAQ,CAACrH,MAAM;cAClBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACkE,QAAQ,CAACrH,MAAM,CAACW,IAAI,GAAGsI,aAAa,CAAC;cACtD7H,eAAe,EAAE6B,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEmE,QAAQ,CAACrH,MAAM,CAACoB,eAAe,GAAG,EAAE,CAAC;cACpEC,YAAY,EAAE;gBACZ,GAAGgG,QAAQ,CAACrH,MAAM,CAACqB,YAAY;gBAC/BE,SAAS,EAAE8F,QAAQ,CAACrH,MAAM,CAACqB,YAAY,CAACE,SAAS,GAAG;cACtD;YACF,CAAC;UACH;UACA;QACF;UACE;MACJ;MAEA,OAAO8F,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6B,SAAS,GAAG/K,WAAW,CAAC,MAAM;IAClC4B,YAAY,CAAC8D,SAAS,IAAI;MACxB,MAAMsF,QAAQ,GAAGtF,SAAS,CAACpC,YAAY,GAAG,CAAC;;MAE3C;MACA,MAAM6G,eAAe,GAAG1J,oBAAoB,CAACiF,SAAS,CAAC7D,MAAM,CAACO,KAAK,EAAE4I,QAAQ,EAAEtF,SAAS,CAAC/B,cAAc,CAAC;MAExG,OAAO;QACL,GAAG+B,SAAS;QACZpC,YAAY,EAAE0H,QAAQ;QACtB3H,QAAQ,EAAE,EAAE;QACZM,cAAc,EAAEwG,eAAe,CAACrE,MAAM,GAAG,CAAC,GACtC,CAAC,GAAGJ,SAAS,CAAC/B,cAAc,EAAE,GAAGwG,eAAe,CAACjE,GAAG,CAACkE,CAAC,IAAIA,CAAC,CAACjF,EAAE,CAAC,CAAC,GAChEO,SAAS,CAAC/B,cAAc;QAC5BC,kBAAkB,EAAEuG,eAAe,CAACrE,MAAM,GAAG,CAAC,GAC1C,CAAC,GAAGJ,SAAS,CAAC9B,kBAAkB,EAAE,GAAGuG,eAAe,CAACjE,GAAG,CAACkE,CAAC,IAAIA,CAAC,CAAC5E,IAAI,CAAC,CAAC,GACtEE,SAAS,CAAC9B;MAChB,CAAC;IACH,CAAC,CAAC;IAEFyE,UAAU,CAAC,MAAM;MACf3D,YAAY,CAAC,CAAC;IAChB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,MAAMuG,yBAAyB,GAAGjL,WAAW,CAAEoG,KAAa,IAAK;IAC/DxE,YAAY,CAAC8D,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZ9B,kBAAkB,EAAE8B,SAAS,CAAC9B,kBAAkB,CAACwE,MAAM,CAAC,CAAC8C,CAAC,EAAEhE,CAAC,KAAKA,CAAC,KAAKd,KAAK;IAC/E,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM+E,kBAAkB,GAAGnL,WAAW,CAAEoL,OAAe,IAAK;IAC1DxJ,YAAY,CAAC8D,SAAS,IAAI;MACxB,MAAM2F,YAAY,GAAG3F,SAAS,CAAC3B,WAAW,CAACqH,OAAO,CAAC,IAAI,CAAC;MACxD,MAAME,IAAI,GAAGD,YAAY,KAAK,CAAC,GAAG,CAAC,GAAGjK,mBAAmB,CAACgK,OAAO,EAAEC,YAAY,CAAC;MAEhF,IAAIA,YAAY,KAAK,CAAC,EAAE;QACtB;QACA,MAAME,eAAe,GAAGlK,kBAAkB,CAACqE,SAAS,CAAC7D,MAAM,CAACO,KAAK,CAAC;QAClE,MAAMoJ,KAAK,GAAGD,eAAe,CAAC3D,IAAI,CAAC6D,CAAC,IAAIA,CAAC,CAACtG,EAAE,KAAKiG,OAAO,CAAC;QACzD,IAAI,CAACI,KAAK,IAAI9F,SAAS,CAAC7D,MAAM,CAACO,KAAK,GAAGoJ,KAAK,CAACE,WAAW,EAAE,OAAOhG,SAAS;QAE1E,OAAO;UACL,GAAGA,SAAS;UACZ3B,WAAW,EAAE;YACX,GAAG2B,SAAS,CAAC3B,WAAW;YACxB,CAACqH,OAAO,GAAG;UACb;QACF,CAAC;MACH,CAAC,MAAM;QACL;QACA,IAAI1F,SAAS,CAAC7D,MAAM,CAACW,IAAI,GAAG8I,IAAI,EAAE,OAAO5F,SAAS;QAElD,OAAO;UACL,GAAGA,SAAS;UACZ7D,MAAM,EAAE;YACN,GAAG6D,SAAS,CAAC7D,MAAM;YACnBW,IAAI,EAAEsC,IAAI,CAACE,KAAK,CAACU,SAAS,CAAC7D,MAAM,CAACW,IAAI,GAAG8I,IAAI;UAC/C,CAAC;UACDvH,WAAW,EAAE;YACX,GAAG2B,SAAS,CAAC3B,WAAW;YACxB,CAACqH,OAAO,GAAGC,YAAY,GAAG;UAC5B;QACF,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,iBAAiB,GAAG3L,WAAW,CAAEoL,OAAe,IAAK;IACzDxJ,YAAY,CAAC8D,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZ1B,YAAY,EAAEoH;IAChB,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,WAAW,GAAG5L,WAAW,CAAE0H,IAAU,IAAK;IAC9C,IAAI,CAACA,IAAI,CAACmE,aAAa,EAAE;IAEzBjK,YAAY,CAAC8D,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZzB,SAAS,EAAE;QACT,GAAGyB,SAAS,CAACzB,SAAS;QACtB,CAACyD,IAAI,CAACmE,aAAa,GAAInE;MACzB;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMoE,aAAa,GAAG9L,WAAW,CAAE+L,IAAmD,IAAK;IACzFnK,YAAY,CAAC8D,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZzB,SAAS,EAAE;QACT,GAAGyB,SAAS,CAACzB,SAAS;QACtB,CAAC8H,IAAI,GAAG;MACV;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,sBAAsB,GAAGhM,WAAW,CAAE0H,IAAU,IAAK;IACzD9F,YAAY,CAAC8D,SAAS,IAAI;MACxB,MAAMuG,aAAa,GAAGvG,SAAS,CAAC5B,UAAU,CAAC8D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAKuC,IAAI,CAACvC,EAAE,CAAC;MAC3E,IAAI,CAAC8G,aAAa,IAAI,CAAChL,mBAAmB,CAACyG,IAAI,EAAEuE,aAAa,CAACnE,QAAQ,CAAC,EAAE;QACxE,OAAOpC,SAAS;MAClB;MAEA,MAAMwG,YAAY,GAAGlL,gBAAgB,CAAC0G,IAAI,CAAC;MAC3C,MAAMyE,WAAW,GAAGF,aAAa,CAACnE,QAAQ,GAAG,CAAC;;MAE9C;MACA,MAAMsE,aAAa,GAAGD,WAAW,GAAG,CAAC,GACjCzG,SAAS,CAAC5B,UAAU,CAACoC,GAAG,CAAC2B,CAAC,IACxBA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAKuC,IAAI,CAACvC,EAAE,GACjB;QAAE,GAAG0C,CAAC;QAAEH,IAAI,EAAEwE,YAAY;QAAEpE,QAAQ,EAAEqE;MAAY,CAAC,GACnDtE,CACN,CAAC,GACDnC,SAAS,CAAC5B,UAAU,CAACsE,MAAM,CAACP,CAAC,IAAIA,CAAC,CAACH,IAAI,CAACvC,EAAE,KAAKuC,IAAI,CAACvC,EAAE,CAAC;;MAE3D;MACA,MAAMkH,YAAY,GAAG;QAAE,GAAG3G,SAAS,CAACzB;MAAU,CAAC;MAC/CqI,MAAM,CAACC,OAAO,CAACF,YAAY,CAAC,CAACG,OAAO,CAAC,CAAC,CAACT,IAAI,EAAEU,YAAY,CAAC,KAAK;QAC7D,IAAIA,YAAY,IAAIA,YAAY,CAACtH,EAAE,KAAKuC,IAAI,CAACvC,EAAE,EAAE;UAC/CkH,YAAY,CAACN,IAAI,CAA8B,GAAGG,YAAY;QAChE;MACF,CAAC,CAAC;MAEF,OAAO;QACL,GAAGxG,SAAS;QACZ5B,UAAU,EAAEsI,aAAa;QACzBnI,SAAS,EAAEoI;MACb,CAAC;IACH,CAAC,CAAC;;IAEF;IACAhE,UAAU,CAAC,MAAM;MACff,cAAc,CAAC;QACbiB,SAAS,EAAE,IAAI3B,IAAI,CAAC,CAAC;QACrB4B,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAE,GAAGf,IAAI,CAAClC,IAAI;MACvB,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,EAAE,CAAC8B,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAMhB,iBAAiB,GAAGtG,WAAW,CAAC,MAAM;IAC1C,MAAM0M,KAAK,GAAG;MAAEnK,MAAM,EAAE,CAAC;MAAEM,OAAO,EAAE,CAAC;MAAEX,EAAE,EAAE,CAAC;MAAEY,YAAY,EAAE;IAAE,CAAC;IAC/DwJ,MAAM,CAACK,MAAM,CAAChL,SAAS,CAACsC,SAAS,CAAC,CAACuI,OAAO,CAAC9E,IAAI,IAAI;MACjD,IAAIA,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgF,KAAK,EAAE;QACfA,KAAK,CAACnK,MAAM,IAAImF,IAAI,CAACgF,KAAK,CAACnK,MAAM,IAAI,CAAC;QACtCmK,KAAK,CAAC7J,OAAO,IAAI6E,IAAI,CAACgF,KAAK,CAAC7J,OAAO,IAAI,CAAC;QACxC6J,KAAK,CAACxK,EAAE,IAAIwF,IAAI,CAACgF,KAAK,CAACxK,EAAE,IAAI,CAAC;QAC9BwK,KAAK,CAAC5J,YAAY,IAAI4E,IAAI,CAACgF,KAAK,CAAC5J,YAAY,IAAI,CAAC;MACpD;IACF,CAAC,CAAC;IACF,OAAO4J,KAAK;EACd,CAAC,EAAE,CAAC/K,SAAS,CAACsC,SAAS,CAAC,CAAC;EAEzB,oBACEzC,OAAA;IAAKoL,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBrL,OAAA;MAAKoL,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BrL,OAAA,CAACvB,WAAW;QACV0B,SAAS,EAAEA,SAAU;QACrBmL,aAAa,EAAEzC,iBAAkB;QACjCzB,YAAY,EAAEpE;MAAoB;QAAAuI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eAEF1L,OAAA;QAAKoL,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvBrL,OAAA,CAACtB,UAAU;UAAC2B,MAAM,EAAEF,SAAS,CAACE,MAAO;UAACmD,KAAK,EAAErD,SAAS,CAAC2B;QAAa;UAAAyJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvE1L,OAAA,CAACrB,YAAY;UACX0B,MAAM,EAAEF,SAAS,CAACE,MAAO;UACzB2B,UAAU,EAAE7B,SAAS,CAAC6B,UAAW;UACjC2J,SAAS,EAAE7C,aAAc;UACzB8C,WAAW,EAAErC;QAAU;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEN1L,OAAA;QAAKoL,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BrL,OAAA,CAACnB,SAAS;UAACgN,IAAI,EAAE1L,SAAS,CAACkC;QAAU;UAAAkJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxC1L,OAAA,CAACjB,UAAU;UACT+M,WAAW,EAAE3L,SAAS,CAACE,MAAM,CAACO,KAAM;UACpCmL,UAAU,EAAE5L,SAAS,CAACE,MAAM,CAACW,IAAK;UAClCuB,WAAW,EAAEpC,SAAS,CAACoC,WAAY;UACnCC,YAAY,EAAErC,SAAS,CAACqC,YAAa;UACrCwJ,cAAc,EAAErC,kBAAmB;UACnCsC,aAAa,EAAE9B;QAAkB;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eACF1L,OAAA,CAAChB,cAAc;UACbmB,SAAS,EAAEA,SAAU;UACrB+L,OAAO,EAAE9B,WAAY;UACrB+B,SAAS,EAAE7B,aAAc;UACzB8B,kBAAkB,EAAE5B;QAAuB;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACF1L,OAAA,CAAClB,UAAU;UAACwD,UAAU,EAAEnC,SAAS,CAACmC,UAAW;UAAC+J,UAAU,EAAE7F;QAAe;UAAA+E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN1L,OAAA,CAACpB,iBAAiB;MAChB0N,aAAa,EAAEnM,SAAS,CAACiC,kBAAmB;MAC5CmK,SAAS,EAAE9C;IAA0B;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACxL,EAAA,CA/2BID,GAAa;AAAAuM,EAAA,GAAbvM,GAAa;AAi3BnB,eAAeA,GAAG;AAAC,IAAAuM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}