{"ast":null,"code":"export const CHARACTER_NAME = \"セラフィナ・ルミナス\";\nexport const titles = [{\n  id: 'novice',\n  name: '見習い魔法使い',\n  description: '魔法の道を歩み始めた者',\n  requirement: {\n    type: 'level',\n    level: 1\n  },\n  unlocked: true\n}, {\n  id: 'apprentice',\n  name: '魔法学徒',\n  description: '基礎魔法を習得した学習者',\n  requirement: {\n    type: 'level',\n    level: 5\n  },\n  unlocked: false\n}, {\n  id: 'adept',\n  name: '魔導師',\n  description: '中級魔法を操る者',\n  requirement: {\n    type: 'level',\n    level: 10\n  },\n  unlocked: false\n}, {\n  id: 'explorer',\n  name: 'ダンジョン探索者',\n  description: '深層への挑戦者',\n  requirement: {\n    type: 'floor',\n    floor: 5\n  },\n  unlocked: false\n}, {\n  id: 'mage',\n  name: '上級魔法使い',\n  description: '高度な魔法を習得した者',\n  requirement: {\n    type: 'level',\n    level: 15\n  },\n  unlocked: false\n}, {\n  id: 'conqueror',\n  name: 'ダンジョン征服者',\n  description: '数多のダンジョンを制覇した者',\n  requirement: {\n    type: 'floor',\n    floor: 10\n  },\n  unlocked: false\n}, {\n  id: 'archmage',\n  name: '大魔導師',\n  description: '魔法の奥義を極めし者',\n  requirement: {\n    type: 'level',\n    level: 25\n  },\n  unlocked: false\n}, {\n  id: 'abyssal',\n  name: '深淵の探求者',\n  description: 'ダンジョンの深奥に到達した者',\n  requirement: {\n    type: 'floor',\n    floor: 20\n  },\n  unlocked: false\n}, {\n  id: 'legendary',\n  name: '伝説の魔法使い',\n  description: '伝説に名を刻む偉大なる魔法使い',\n  requirement: {\n    type: 'both',\n    level: 30,\n    floor: 25\n  },\n  unlocked: false\n}, {\n  id: 'transcendent',\n  name: '超越者',\n  description: '人間の限界を超越した存在',\n  requirement: {\n    type: 'both',\n    level: 50,\n    floor: 50\n  },\n  unlocked: false\n}, {\n  id: 'goddess',\n  name: '魔法女神',\n  description: '魔法そのものを体現する究極の存在',\n  requirement: {\n    type: 'both',\n    level: 100,\n    floor: 100\n  },\n  unlocked: false\n}];\nexport const getCurrentTitle = (level, floor, unlockedTitles) => {\n  // 解放されている称号の中で最も高位のものを返す\n  const availableTitles = titles.filter(title => {\n    if (!unlockedTitles.includes(title.id)) return false;\n    switch (title.requirement.type) {\n      case 'level':\n        return level >= (title.requirement.level || 0);\n      case 'floor':\n        return floor >= (title.requirement.floor || 0);\n      case 'both':\n        return level >= (title.requirement.level || 0) && floor >= (title.requirement.floor || 0);\n      default:\n        return false;\n    }\n  });\n\n  // 最後の（最も高位の）称号を返す\n  return availableTitles[availableTitles.length - 1] || titles[0];\n};\nexport const checkNewTitleUnlocks = (level, floor, currentUnlocked) => {\n  const newUnlocks = [];\n  titles.forEach(title => {\n    if (currentUnlocked.includes(title.id)) return;\n    let shouldUnlock = false;\n    switch (title.requirement.type) {\n      case 'level':\n        shouldUnlock = level >= (title.requirement.level || 0);\n        break;\n      case 'floor':\n        shouldUnlock = floor >= (title.requirement.floor || 0);\n        break;\n      case 'both':\n        shouldUnlock = level >= (title.requirement.level || 0) && floor >= (title.requirement.floor || 0);\n        break;\n    }\n    if (shouldUnlock) {\n      newUnlocks.push(title);\n    }\n  });\n  return newUnlocks;\n};","map":{"version":3,"names":["CHARACTER_NAME","titles","id","name","description","requirement","type","level","unlocked","floor","getCurrentTitle","unlockedTitles","availableTitles","filter","title","includes","length","checkNewTitleUnlocks","currentUnlocked","newUnlocks","forEach","shouldUnlock","push"],"sources":["/home/matsuyama/claude/git/game/src/data/characterData.ts"],"sourcesContent":["export interface Title {\n  id: string;\n  name: string;\n  description: string;\n  requirement: {\n    type: 'level' | 'floor' | 'both';\n    level?: number;\n    floor?: number;\n  };\n  unlocked: boolean;\n}\n\nexport const CHARACTER_NAME = \"セラフィナ・ルミナス\";\n\nexport const titles: Title[] = [\n  {\n    id: 'novice',\n    name: '見習い魔法使い',\n    description: '魔法の道を歩み始めた者',\n    requirement: { type: 'level', level: 1 },\n    unlocked: true\n  },\n  {\n    id: 'apprentice',\n    name: '魔法学徒',\n    description: '基礎魔法を習得した学習者',\n    requirement: { type: 'level', level: 5 },\n    unlocked: false\n  },\n  {\n    id: 'adept',\n    name: '魔導師',\n    description: '中級魔法を操る者',\n    requirement: { type: 'level', level: 10 },\n    unlocked: false\n  },\n  {\n    id: 'explorer',\n    name: 'ダンジョン探索者',\n    description: '深層への挑戦者',\n    requirement: { type: 'floor', floor: 5 },\n    unlocked: false\n  },\n  {\n    id: 'mage',\n    name: '上級魔法使い',\n    description: '高度な魔法を習得した者',\n    requirement: { type: 'level', level: 15 },\n    unlocked: false\n  },\n  {\n    id: 'conqueror',\n    name: 'ダンジョン征服者',\n    description: '数多のダンジョンを制覇した者',\n    requirement: { type: 'floor', floor: 10 },\n    unlocked: false\n  },\n  {\n    id: 'archmage',\n    name: '大魔導師',\n    description: '魔法の奥義を極めし者',\n    requirement: { type: 'level', level: 25 },\n    unlocked: false\n  },\n  {\n    id: 'abyssal',\n    name: '深淵の探求者',\n    description: 'ダンジョンの深奥に到達した者',\n    requirement: { type: 'floor', floor: 20 },\n    unlocked: false\n  },\n  {\n    id: 'legendary',\n    name: '伝説の魔法使い',\n    description: '伝説に名を刻む偉大なる魔法使い',\n    requirement: { type: 'both', level: 30, floor: 25 },\n    unlocked: false\n  },\n  {\n    id: 'transcendent',\n    name: '超越者',\n    description: '人間の限界を超越した存在',\n    requirement: { type: 'both', level: 50, floor: 50 },\n    unlocked: false\n  },\n  {\n    id: 'goddess',\n    name: '魔法女神',\n    description: '魔法そのものを体現する究極の存在',\n    requirement: { type: 'both', level: 100, floor: 100 },\n    unlocked: false\n  }\n];\n\nexport const getCurrentTitle = (level: number, floor: number, unlockedTitles: string[]): Title => {\n  // 解放されている称号の中で最も高位のものを返す\n  const availableTitles = titles.filter(title => {\n    if (!unlockedTitles.includes(title.id)) return false;\n    \n    switch (title.requirement.type) {\n      case 'level':\n        return level >= (title.requirement.level || 0);\n      case 'floor':\n        return floor >= (title.requirement.floor || 0);\n      case 'both':\n        return level >= (title.requirement.level || 0) && floor >= (title.requirement.floor || 0);\n      default:\n        return false;\n    }\n  });\n\n  // 最後の（最も高位の）称号を返す\n  return availableTitles[availableTitles.length - 1] || titles[0];\n};\n\nexport const checkNewTitleUnlocks = (level: number, floor: number, currentUnlocked: string[]): Title[] => {\n  const newUnlocks: Title[] = [];\n  \n  titles.forEach(title => {\n    if (currentUnlocked.includes(title.id)) return;\n    \n    let shouldUnlock = false;\n    \n    switch (title.requirement.type) {\n      case 'level':\n        shouldUnlock = level >= (title.requirement.level || 0);\n        break;\n      case 'floor':\n        shouldUnlock = floor >= (title.requirement.floor || 0);\n        break;\n      case 'both':\n        shouldUnlock = level >= (title.requirement.level || 0) && floor >= (title.requirement.floor || 0);\n        break;\n    }\n    \n    if (shouldUnlock) {\n      newUnlocks.push(title);\n    }\n  });\n  \n  return newUnlocks;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}