{"ast":null,"code":"var _jsxFileName = \"/home/matsuyama/claude/git/game/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameDisplay from './components/GameDisplay';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport TitleNotification from './components/TitleNotification';\nimport BattleLog from './components/BattleLog';\nimport Collection from './components/Collection';\nimport { getRandomAttackPhrase } from './data/attackPhrases';\nimport { checkNewTitleUnlocks } from './data/characterData';\nimport { getRandomItemDrop } from './data/itemData';\nimport { getCurrentDungeon, getRandomMonsterFromDungeon } from './data/dungeonData';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameState, setGameState] = useState({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0\n    },\n    monsters: [],\n    currentFloor: 1,\n    currentDungeonId: 'forest',\n    autoAttack: false,\n    particles: [],\n    damageTexts: [],\n    unlockedTitles: ['novice'],\n    titleNotifications: [],\n    battleLog: [],\n    collection: []\n  });\n  const autoAttackRef = useRef(null);\n  const [currentAttackPhrase, setCurrentAttackPhrase] = useState('');\n  const spawnMonster = useCallback(() => {\n    const currentDungeon = getCurrentDungeon(gameState.currentFloor);\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.3;\n    const dungeonMonster = getRandomMonsterFromDungeon(currentDungeon.id, floorMultiplier);\n    if (!dungeonMonster) {\n      // Fallback to basic monster\n      const monster = {\n        x: 600,\n        y: 250,\n        width: 80,\n        height: 100,\n        hp: Math.floor(20 * floorMultiplier),\n        maxHp: Math.floor(20 * floorMultiplier),\n        name: 'スライム',\n        color: '#00ff00',\n        animFrame: 0,\n        animSpeed: 0.05\n      };\n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, monster]\n      }));\n      return;\n    }\n    const monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: dungeonMonster.hp,\n      maxHp: dungeonMonster.hp,\n      name: dungeonMonster.name,\n      color: dungeonMonster.color,\n      animFrame: 0,\n      animSpeed: 0.05\n    };\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster],\n      currentDungeonId: currentDungeon.id\n    }));\n  }, [gameState.currentFloor]);\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (!prevState.player.isAttacking && prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, 1000);\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n  const addToBattleLog = useCallback(newLog => {\n    setGameState(prevState => ({\n      ...prevState,\n      battleLog: [{\n        ...newLog,\n        id: Date.now() + Math.random()\n      }, ...prevState.battleLog.slice(0, 49) // Keep only last 50 logs\n      ]\n    }));\n  }, []);\n  const addToCollection = useCallback(item => {\n    setGameState(prevState => {\n      const existingItem = prevState.collection.find(c => c.item.id === item.id);\n      if (existingItem) {\n        return {\n          ...prevState,\n          collection: prevState.collection.map(c => c.item.id === item.id ? {\n            ...c,\n            quantity: c.quantity + 1\n          } : c)\n        };\n      } else {\n        return {\n          ...prevState,\n          collection: [...prevState.collection, {\n            item,\n            quantity: 1,\n            firstObtained: new Date()\n          }]\n        };\n      }\n    });\n  }, []);\n  const handleAttack = useCallback((currentState = gameState) => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    // Generate random attack phrase\n    const attackPhrase = getRandomAttackPhrase();\n    setCurrentAttackPhrase(attackPhrase);\n\n    // Add attack to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'attack',\n        message: `セラフィナが攻撃しました`,\n        attackPhrase\n      });\n    }, 100);\n    const monster = currentState.monsters[0];\n    const damage = currentState.player.attack + Math.floor(Math.random() * 5);\n    const updatedMonster = {\n      ...monster,\n      hp: monster.hp - damage\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: damage.toString(),\n      color: '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n    const newParticles = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n    let newState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 0\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200);\n    return newState;\n  }, [gameState]);\n  const killMonster = useCallback((currentState, monster) => {\n    const expGain = Math.floor(monster.maxHp / 2);\n    const goldGain = Math.floor(monster.maxHp / 5) + currentState.currentFloor;\n    let newPlayer = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: currentState.player.gold + goldGain\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now() + 1000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 20,\n      text: `+${expGain} EXP`,\n      color: '#00ff00',\n      life: 60,\n      maxLife: 60\n    }, {\n      id: Date.now() + 2000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 40,\n      text: `+${goldGain} G`,\n      color: '#ffff00',\n      life: 60,\n      maxLife: 60\n    }];\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    // Check for item drop\n    const droppedItem = getRandomItemDrop();\n    if (droppedItem) {\n      setTimeout(() => {\n        addToCollection(droppedItem);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `${droppedItem.icon} ${droppedItem.name}を獲得しました！`,\n          item: droppedItem\n        });\n      }, 200);\n    }\n\n    // Add monster defeat log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'monster_defeat',\n        message: `${monster.name}を倒しました！`\n      });\n    }, 150);\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n  const levelUp = useCallback(player => {\n    const newLevel = player.level + 1;\n    const newPlayer = {\n      ...player,\n      level: newLevel,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n\n    // Check for new title unlocks\n    setTimeout(() => {\n      setGameState(prevState => {\n        const newTitleUnlocks = checkNewTitleUnlocks(newLevel, prevState.currentFloor, prevState.unlockedTitles);\n        if (newTitleUnlocks.length > 0) {\n          return {\n            ...prevState,\n            unlockedTitles: [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)],\n            titleNotifications: [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          };\n        }\n        return prevState;\n      });\n    }, 100);\n\n    // Add level up to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'levelup',\n        message: `レベルが${newLevel}に上がりました！`\n      });\n    }, 300);\n    return newPlayer;\n  }, [addToBattleLog]);\n  const handleCanvasClick = useCallback(() => {\n    if (!gameState.player.isAttacking) {\n      setGameState(handleAttack);\n    }\n  }, [gameState.player.isAttacking, handleAttack]);\n  const handleUpgrade = useCallback(type => {\n    setGameState(prevState => {\n      const newState = {\n        ...prevState\n      };\n      switch (type) {\n        case 'attack':\n          if (newState.player.gold >= 10) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 10,\n              attack: newState.player.attack + 5\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (newState.player.gold >= 50 && !newState.autoAttack) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 50\n            };\n            newState.autoAttack = true;\n          }\n          break;\n        case 'hp':\n          if (newState.player.gold >= 25) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 25,\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      return newState;\n    });\n  }, []);\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => {\n      const newFloor = prevState.currentFloor + 1;\n\n      // Check for new title unlocks based on floor\n      const newTitleUnlocks = checkNewTitleUnlocks(prevState.player.level, newFloor, prevState.unlockedTitles);\n      return {\n        ...prevState,\n        currentFloor: newFloor,\n        monsters: [],\n        unlockedTitles: newTitleUnlocks.length > 0 ? [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)] : prevState.unlockedTitles,\n        titleNotifications: newTitleUnlocks.length > 0 ? [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)] : prevState.titleNotifications\n      };\n    });\n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n  const handleDismissNotification = useCallback(index => {\n    setGameState(prevState => ({\n      ...prevState,\n      titleNotifications: prevState.titleNotifications.filter((_, i) => i !== index)\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameDisplay, {\n        gameState: gameState,\n        onAttackClick: handleCanvasClick,\n        attackPhrase: currentAttackPhrase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui-panel\",\n        children: [/*#__PURE__*/_jsxDEV(StatsPanel, {\n          player: gameState.player,\n          floor: gameState.currentFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpgradePanel, {\n          player: gameState.player,\n          autoAttack: gameState.autoAttack,\n          onUpgrade: handleUpgrade,\n          onNextFloor: nextFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-panel\",\n        children: [/*#__PURE__*/_jsxDEV(BattleLog, {\n          logs: gameState.battleLog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Collection, {\n          collection: gameState.collection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TitleNotification, {\n      notifications: gameState.titleNotifications,\n      onDismiss: handleDismissNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Xu/Qe7l8lJiJ7zoPSapK9OkEcUA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","GameDisplay","StatsPanel","UpgradePanel","TitleNotification","BattleLog","Collection","getRandomAttackPhrase","checkNewTitleUnlocks","getRandomItemDrop","getCurrentDungeon","getRandomMonsterFromDungeon","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","player","x","y","width","height","hp","maxHp","level","exp","expMax","attack","gold","animFrame","animSpeed","isAttacking","attackCooldown","monsters","currentFloor","currentDungeonId","autoAttack","particles","damageTexts","unlockedTitles","titleNotifications","battleLog","collection","autoAttackRef","currentAttackPhrase","setCurrentAttackPhrase","spawnMonster","currentDungeon","floorMultiplier","dungeonMonster","id","monster","Math","floor","name","color","prevState","current","setInterval","length","handleAttack","clearInterval","addToBattleLog","newLog","Date","now","random","slice","addToCollection","item","existingItem","find","c","map","quantity","firstObtained","currentState","attackPhrase","setTimeout","timestamp","type","message","damage","updatedMonster","newDamageTexts","text","toString","life","maxLife","newParticles","i","push","vx","vy","newState","killMonster","expGain","goldGain","newPlayer","levelUp","droppedItem","icon","filter","m","newLevel","newTitleUnlocks","t","handleCanvasClick","handleUpgrade","nextFloor","newFloor","handleDismissNotification","index","_","className","children","onAttackClick","fileName","_jsxFileName","lineNumber","columnNumber","onUpgrade","onNextFloor","logs","notifications","onDismiss","_c","$RefreshReg$"],"sources":["/home/matsuyama/claude/git/game/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameDisplay from './components/GameDisplay';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport TitleNotification from './components/TitleNotification';\nimport BattleLog from './components/BattleLog';\nimport Collection from './components/Collection';\nimport { GameState, Monster, UpgradeType, Player, DamageText, Particle, BattleLog as BattleLogType, CollectedItem } from './types/gameTypes';\nimport { getRandomAttackPhrase } from './data/attackPhrases';\nimport { checkNewTitleUnlocks, getCurrentTitle } from './data/characterData';\nimport { getRandomItemDrop } from './data/itemData';\nimport { getCurrentDungeon, getRandomMonsterFromDungeon } from './data/dungeonData';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0\n    },\n    monsters: [],\n    currentFloor: 1,\n    currentDungeonId: 'forest',\n    autoAttack: false,\n    particles: [],\n    damageTexts: [],\n    unlockedTitles: ['novice'],\n    titleNotifications: [],\n    battleLog: [],\n    collection: []\n  });\n\n  const autoAttackRef = useRef<NodeJS.Timeout | null>(null);\n  const [currentAttackPhrase, setCurrentAttackPhrase] = useState<string>('');\n\n  const spawnMonster = useCallback(() => {\n    const currentDungeon = getCurrentDungeon(gameState.currentFloor);\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.3;\n    \n    const dungeonMonster = getRandomMonsterFromDungeon(currentDungeon.id, floorMultiplier);\n    \n    if (!dungeonMonster) {\n      // Fallback to basic monster\n      const monster: Monster = {\n        x: 600,\n        y: 250,\n        width: 80,\n        height: 100,\n        hp: Math.floor(20 * floorMultiplier),\n        maxHp: Math.floor(20 * floorMultiplier),\n        name: 'スライム',\n        color: '#00ff00',\n        animFrame: 0,\n        animSpeed: 0.05\n      };\n      \n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, monster]\n      }));\n      return;\n    }\n\n    const monster: Monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: dungeonMonster.hp,\n      maxHp: dungeonMonster.hp,\n      name: dungeonMonster.name,\n      color: dungeonMonster.color,\n      animFrame: 0,\n      animSpeed: 0.05\n    };\n\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster],\n      currentDungeonId: currentDungeon.id\n    }));\n  }, [gameState.currentFloor]);\n\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (!prevState.player.isAttacking && \n              prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, 1000);\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n\n  const addToBattleLog = useCallback((newLog: Omit<BattleLogType, 'id'>) => {\n    setGameState(prevState => ({\n      ...prevState,\n      battleLog: [\n        {\n          ...newLog,\n          id: Date.now() + Math.random()\n        },\n        ...prevState.battleLog.slice(0, 49) // Keep only last 50 logs\n      ]\n    }));\n  }, []);\n\n  const addToCollection = useCallback((item: any) => {\n    setGameState(prevState => {\n      const existingItem = prevState.collection.find(c => c.item.id === item.id);\n      \n      if (existingItem) {\n        return {\n          ...prevState,\n          collection: prevState.collection.map(c =>\n            c.item.id === item.id\n              ? { ...c, quantity: c.quantity + 1 }\n              : c\n          )\n        };\n      } else {\n        return {\n          ...prevState,\n          collection: [\n            ...prevState.collection,\n            {\n              item,\n              quantity: 1,\n              firstObtained: new Date()\n            }\n          ]\n        };\n      }\n    });\n  }, []);\n\n  const handleAttack = useCallback((currentState: GameState = gameState): GameState => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    // Generate random attack phrase\n    const attackPhrase = getRandomAttackPhrase();\n    setCurrentAttackPhrase(attackPhrase);\n\n    // Add attack to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'attack',\n        message: `セラフィナが攻撃しました`,\n        attackPhrase\n      });\n    }, 100);\n\n    const monster = currentState.monsters[0];\n    const damage = currentState.player.attack + Math.floor(Math.random() * 5);\n    const updatedMonster: Monster = { ...monster, hp: monster.hp - damage };\n\n    const newDamageTexts: DamageText[] = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: damage.toString(),\n      color: '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n\n    const newParticles: Particle[] = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n\n    let newState: GameState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 0\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n\n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200);\n\n    return newState;\n  }, [gameState]);\n\n  const killMonster = useCallback((currentState: GameState, monster: Monster): GameState => {\n    const expGain = Math.floor(monster.maxHp / 2);\n    const goldGain = Math.floor(monster.maxHp / 5) + currentState.currentFloor;\n\n    let newPlayer: Player = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: currentState.player.gold + goldGain\n    };\n\n    const newDamageTexts: DamageText[] = [\n      ...currentState.damageTexts,\n      {\n        id: Date.now() + 1000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 20,\n        text: `+${expGain} EXP`,\n        color: '#00ff00',\n        life: 60,\n        maxLife: 60\n      },\n      {\n        id: Date.now() + 2000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 40,\n        text: `+${goldGain} G`,\n        color: '#ffff00',\n        life: 60,\n        maxLife: 60\n      }\n    ];\n\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    // Check for item drop\n    const droppedItem = getRandomItemDrop();\n    if (droppedItem) {\n      setTimeout(() => {\n        addToCollection(droppedItem);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `${droppedItem.icon} ${droppedItem.name}を獲得しました！`,\n          item: droppedItem\n        });\n      }, 200);\n    }\n\n    // Add monster defeat log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'monster_defeat',\n        message: `${monster.name}を倒しました！`\n      });\n    }, 150);\n\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n\n  const levelUp = useCallback((player: Player): Player => {\n    const newLevel = player.level + 1;\n    const newPlayer = {\n      ...player,\n      level: newLevel,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n\n    // Check for new title unlocks\n    setTimeout(() => {\n      setGameState(prevState => {\n        const newTitleUnlocks = checkNewTitleUnlocks(newLevel, prevState.currentFloor, prevState.unlockedTitles);\n        if (newTitleUnlocks.length > 0) {\n          return {\n            ...prevState,\n            unlockedTitles: [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)],\n            titleNotifications: [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          };\n        }\n        return prevState;\n      });\n    }, 100);\n\n    // Add level up to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'levelup',\n        message: `レベルが${newLevel}に上がりました！`\n      });\n    }, 300);\n\n    return newPlayer;\n  }, [addToBattleLog]);\n\n  const handleCanvasClick = useCallback(() => {\n    if (!gameState.player.isAttacking) {\n      setGameState(handleAttack);\n    }\n  }, [gameState.player.isAttacking, handleAttack]);\n\n\n  const handleUpgrade = useCallback((type: UpgradeType) => {\n    setGameState(prevState => {\n      const newState: GameState = { ...prevState };\n      \n      switch (type) {\n        case 'attack':\n          if (newState.player.gold >= 10) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 10,\n              attack: newState.player.attack + 5\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (newState.player.gold >= 50 && !newState.autoAttack) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 50\n            };\n            newState.autoAttack = true;\n          }\n          break;\n        case 'hp':\n          if (newState.player.gold >= 25) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 25,\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      \n      return newState;\n    });\n  }, []);\n\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => {\n      const newFloor = prevState.currentFloor + 1;\n      \n      // Check for new title unlocks based on floor\n      const newTitleUnlocks = checkNewTitleUnlocks(prevState.player.level, newFloor, prevState.unlockedTitles);\n      \n      return {\n        ...prevState,\n        currentFloor: newFloor,\n        monsters: [],\n        unlockedTitles: newTitleUnlocks.length > 0 \n          ? [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)]\n          : prevState.unlockedTitles,\n        titleNotifications: newTitleUnlocks.length > 0\n          ? [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          : prevState.titleNotifications\n      };\n    });\n    \n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n\n  const handleDismissNotification = useCallback((index: number) => {\n    setGameState(prevState => ({\n      ...prevState,\n      titleNotifications: prevState.titleNotifications.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game-container\">\n        <GameDisplay \n          gameState={gameState}\n          onAttackClick={handleCanvasClick}\n          attackPhrase={currentAttackPhrase}\n        />\n        \n        <div className=\"ui-panel\">\n          <StatsPanel player={gameState.player} floor={gameState.currentFloor} />\n          <UpgradePanel \n            player={gameState.player}\n            autoAttack={gameState.autoAttack}\n            onUpgrade={handleUpgrade}\n            onNextFloor={nextFloor}\n          />\n        </div>\n        \n        <div className=\"bottom-panel\">\n          <BattleLog logs={gameState.battleLog} />\n          <Collection collection={gameState.collection} />\n        </div>\n      </div>\n      \n      <TitleNotification \n        notifications={gameState.titleNotifications}\n        onDismiss={handleDismissNotification}\n      />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}