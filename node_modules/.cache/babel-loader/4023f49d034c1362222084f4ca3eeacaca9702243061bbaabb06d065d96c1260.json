{"ast":null,"code":"var _jsxFileName = \"/home/matsuyama/claude/git/game/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameDisplay from './components/GameDisplay';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport TitleNotification from './components/TitleNotification';\nimport BattleLog from './components/BattleLog';\nimport Collection from './components/Collection';\nimport MagicPanel from './components/MagicPanel';\nimport EquipmentPanel from './components/EquipmentPanel';\nimport { getRandomDamagePhrase } from './data/attackPhrases';\nimport { checkNewTitleUnlocks } from './data/characterData';\nimport { getRandomItemDrop } from './data/itemData';\nimport { getCurrentDungeon, getRandomMonsterFromDungeon, getSpellDropFromMonster, getMonsterEvolutionName } from './data/dungeonData';\nimport { getRandomEquipmentDrop, upgradeEquipment, canUpgradeEquipment } from './data/equipmentData';\nimport { getRandomPhrase, getSpellDamageBonus, getSpellUpgradeCost, getAvailableSpells } from './data/magicData';\nimport { getItemSellPrice } from './data/itemData';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameState, setGameState] = useState({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0,\n      defense: 0,\n      criticalRate: 5,\n      expBonus: 0,\n      goldBonus: 0,\n      autoAttackSpeed: 500,\n      upgradeCount: {\n        attack: 0,\n        hp: 0,\n        defense: 0,\n        critical: 0,\n        expBonus: 0,\n        goldBonus: 0,\n        autoSpeed: 0\n      }\n    },\n    monsters: [],\n    currentFloor: 1,\n    currentDungeonId: 'forest',\n    autoAttack: false,\n    particles: [],\n    damageTexts: [],\n    unlockedTitles: ['novice'],\n    titleNotifications: [],\n    battleLog: [],\n    collection: [],\n    magicSpells: {\n      'fire_bolt': 1 // Start with Fire Bolt level 1\n    },\n    currentSpell: 'fire_bolt',\n    equipment: {\n      head: null,\n      body: null,\n      hands: null,\n      feet: null,\n      weapon: null\n    }\n  });\n  const autoAttackRef = useRef(null);\n  const [currentAttackPhrase, setCurrentAttackPhrase] = useState('');\n  const [currentDamagePhrase, setCurrentDamagePhrase] = useState('');\n  const spawnMonster = useCallback(() => {\n    const currentDungeon = getCurrentDungeon(gameState.currentFloor);\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.3;\n    const monsterLevel = Math.max(1, gameState.currentFloor + Math.floor(Math.random() * 3) - 1);\n    const dungeonMonster = getRandomMonsterFromDungeon(currentDungeon.id, floorMultiplier);\n    if (!dungeonMonster) {\n      // Fallback to basic monster\n      const baseHp = Math.floor(20 * floorMultiplier);\n      const levelBonus = Math.floor(baseHp * 0.2 * (monsterLevel - 1));\n      const totalHp = baseHp + levelBonus;\n      const monster = {\n        x: 600,\n        y: 250,\n        width: 80,\n        height: 100,\n        hp: totalHp,\n        maxHp: totalHp,\n        name: 'スライム',\n        color: '#00ff00',\n        animFrame: 0,\n        animSpeed: 0.05,\n        level: monsterLevel,\n        attack: Math.floor(5 + monsterLevel * 2),\n        attackCooldown: 0\n      };\n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, monster]\n      }));\n      return;\n    }\n    const baseHp = dungeonMonster.hp;\n    const levelBonus = Math.floor(baseHp * 0.2 * (monsterLevel - 1));\n    const totalHp = baseHp + levelBonus;\n    const evolutionName = getMonsterEvolutionName(dungeonMonster, gameState.currentFloor);\n    const monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: totalHp,\n      maxHp: totalHp,\n      name: evolutionName,\n      color: dungeonMonster.color,\n      animFrame: 0,\n      animSpeed: 0.05,\n      level: monsterLevel,\n      attack: Math.floor((5 + monsterLevel * 2) * floorMultiplier),\n      attackCooldown: 0\n    };\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster],\n      currentDungeonId: currentDungeon.id\n    }));\n  }, [gameState.currentFloor]);\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, gameState.player.autoAttackSpeed); // Use player's auto attack speed\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n\n  // Monster attack system\n  useEffect(() => {\n    const monsterAttackInterval = setInterval(() => {\n      setGameState(prevState => {\n        if (prevState.monsters.length === 0) return prevState;\n        const monster = prevState.monsters[0];\n        if (monster.attackCooldown > 0) {\n          // Reduce cooldown\n          return {\n            ...prevState,\n            monsters: prevState.monsters.map((m, index) => index === 0 ? {\n              ...m,\n              attackCooldown: m.attackCooldown - 1\n            } : m)\n          };\n        }\n\n        // Monster attacks player\n        const equipmentStats = getEquipmentStats();\n        const totalDefense = prevState.player.defense + equipmentStats.defense;\n        const damage = Math.max(1, monster.attack - totalDefense);\n        const maxHp = prevState.player.maxHp + equipmentStats.hp;\n        const newPlayerHp = Math.max(0, Math.min(prevState.player.hp, maxHp) - damage);\n\n        // Generate damage phrase\n        const damagePhrase = getRandomDamagePhrase();\n        setCurrentDamagePhrase(damagePhrase);\n\n        // Add damage phrase to battle log\n        setTimeout(() => {\n          addToBattleLog({\n            timestamp: new Date(),\n            type: 'attack',\n            message: `セラフィナが攻撃を受けました`,\n            attackPhrase: damagePhrase\n          });\n        }, 100);\n\n        // Clear damage phrase after 3 seconds\n        setTimeout(() => {\n          setCurrentDamagePhrase('');\n        }, 3000);\n        const newDamageTexts = [...prevState.damageTexts, {\n          id: Date.now(),\n          x: prevState.player.x + prevState.player.width / 2,\n          y: prevState.player.y,\n          text: `-${damage}`,\n          color: '#ff4444',\n          life: 60,\n          maxLife: 60\n        }];\n\n        // Add monster attack particles\n        const newParticles = [...prevState.particles];\n        for (let i = 0; i < 5; i++) {\n          newParticles.push({\n            id: Date.now() + i,\n            x: prevState.player.x + prevState.player.width / 2,\n            y: prevState.player.y + prevState.player.height / 2,\n            vx: (Math.random() - 0.5) * 3,\n            vy: (Math.random() - 0.5) * 3,\n            color: '#ff4444',\n            life: 15,\n            maxLife: 15\n          });\n        }\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            hp: newPlayerHp\n          },\n          monsters: prevState.monsters.map((m, index) => index === 0 ? {\n            ...m,\n            attackCooldown: 60\n          } : m // 3 second cooldown at 50ms interval\n          ),\n          damageTexts: newDamageTexts,\n          particles: newParticles\n        };\n      });\n    }, 50); // 50ms interval for smooth animation\n\n    return () => clearInterval(monsterAttackInterval);\n  }, []);\n  const addToBattleLog = useCallback(newLog => {\n    setGameState(prevState => ({\n      ...prevState,\n      battleLog: [{\n        ...newLog,\n        id: Date.now() + Math.random()\n      }, ...prevState.battleLog.slice(0, 49) // Keep only last 50 logs\n      ]\n    }));\n  }, []);\n  const addToCollection = useCallback(item => {\n    setGameState(prevState => {\n      const existingItem = prevState.collection.find(c => c.item.id === item.id);\n      if (existingItem) {\n        return {\n          ...prevState,\n          collection: prevState.collection.map(c => c.item.id === item.id ? {\n            ...c,\n            quantity: c.quantity + 1\n          } : c)\n        };\n      } else {\n        return {\n          ...prevState,\n          collection: [...prevState.collection, {\n            item,\n            quantity: 1,\n            firstObtained: new Date()\n          }]\n        };\n      }\n    });\n  }, []);\n  const handleSellItem = useCallback((itemId, quantity) => {\n    setGameState(prevState => {\n      const item = prevState.collection.find(c => c.item.id === itemId);\n      if (!item) return prevState;\n      const sellPrice = getItemSellPrice(item.item) * quantity;\n      const remainingQuantity = item.quantity - quantity;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: Math.floor(prevState.player.gold + sellPrice)\n        },\n        collection: remainingQuantity <= 0 ? prevState.collection.filter(c => c.item.id !== itemId) : prevState.collection.map(c => c.item.id === itemId ? {\n          ...c,\n          quantity: remainingQuantity\n        } : c)\n      };\n    });\n\n    // Add sell log\n    setTimeout(() => {\n      var _gameState$collection;\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'item_drop',\n        message: `${quantity}個のアイテムを売却しました (+${getItemSellPrice((_gameState$collection = gameState.collection.find(c => c.item.id === itemId)) === null || _gameState$collection === void 0 ? void 0 : _gameState$collection.item)} × ${quantity}G)`\n      });\n    }, 100);\n  }, [gameState.collection, addToBattleLog]);\n  const handleAttack = useCallback((currentState = gameState) => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    // Generate random attack phrase based on current spell\n    const currentSpellLevel = currentState.magicSpells[currentState.currentSpell] || 1;\n    const attackPhrase = getRandomPhrase(currentState.currentSpell, currentSpellLevel);\n    setCurrentAttackPhrase(attackPhrase);\n\n    // Add attack to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'attack',\n        message: `セラフィナが攻撃しました`,\n        attackPhrase\n      });\n    }, 100);\n    const monster = currentState.monsters[0];\n    const spellBonus = getSpellDamageBonus(currentState.currentSpell, currentSpellLevel);\n    const equipmentStats = getEquipmentStats();\n    let damage = currentState.player.attack + equipmentStats.attack + spellBonus + Math.floor(Math.random() * 5);\n\n    // Apply critical hit chance\n    const totalCriticalRate = currentState.player.criticalRate + equipmentStats.criticalRate;\n    const isCritical = Math.random() * 100 < totalCriticalRate;\n    if (isCritical) {\n      damage = Math.floor(damage * 2);\n    }\n    const updatedMonster = {\n      ...monster,\n      hp: monster.hp - damage\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: isCritical ? `CRITICAL! ${damage}` : damage.toString(),\n      color: isCritical ? '#ff0000' : '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n    const newParticles = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n    let newState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 0\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n    setTimeout(() => {\n      setCurrentAttackPhrase('');\n    }, 3000); // Clear phrase after 3 seconds\n\n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200); // Button can be clicked again quickly\n\n    return newState;\n  }, [gameState]);\n  const killMonster = useCallback((currentState, monster) => {\n    const baseExpGain = Math.floor(monster.maxHp / 2);\n    const levelMultiplier = 1 + (monster.level - 1) * 0.15; // 15% bonus per level above 1\n    const baseGoldGain = Math.floor((Math.floor(monster.maxHp / 5) + currentState.currentFloor) * levelMultiplier);\n    const expGain = Math.floor(baseExpGain * (1 + currentState.player.expBonus / 100));\n    const goldGain = Math.floor(baseGoldGain * (1 + currentState.player.goldBonus / 100));\n    let newPlayer = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: Math.floor(currentState.player.gold + goldGain)\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now() + 1000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 20,\n      text: `+${expGain} EXP`,\n      color: '#00ff00',\n      life: 60,\n      maxLife: 60\n    }, {\n      id: Date.now() + 2000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 40,\n      text: `+${goldGain} G`,\n      color: '#ffff00',\n      life: 60,\n      maxLife: 60\n    }];\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    // Check for item drop\n    const droppedItem = getRandomItemDrop();\n    if (droppedItem) {\n      setTimeout(() => {\n        addToCollection(droppedItem);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `${droppedItem.icon} ${droppedItem.name}を獲得しました！`,\n          item: droppedItem\n        });\n      }, 200);\n    }\n\n    // Check for equipment drop\n    const droppedEquipment = getRandomEquipmentDrop();\n    if (droppedEquipment) {\n      setTimeout(() => {\n        addToCollection(droppedEquipment);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `🎒 ${droppedEquipment.icon} ${droppedEquipment.name}を獲得しました！`,\n          item: droppedEquipment\n        });\n      }, 250);\n    }\n\n    // Check for spell drop from rare/boss monsters\n    const droppedSpell = getSpellDropFromMonster({\n      id: monster.name,\n      name: monster.name,\n      hp: monster.maxHp,\n      color: monster.color,\n      emoji: '',\n      rarity: monster.maxHp > 150 ? 'boss' : monster.maxHp > 80 ? 'rare' : 'common',\n      spawnWeight: 1\n    });\n    if (droppedSpell) {\n      setTimeout(() => {\n        setGameState(prevState => ({\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [droppedSpell]: Math.max(1, prevState.magicSpells[droppedSpell] || 0)\n          }\n        }));\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `✨ 新しい魔法 ${droppedSpell} を習得しました！`\n        });\n      }, 300);\n    }\n\n    // Add monster defeat log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'monster_defeat',\n        message: `${monster.name}を倒しました！`\n      });\n    }, 150);\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n  const levelUp = useCallback(player => {\n    const newLevel = player.level + 1;\n    const newPlayer = {\n      ...player,\n      level: newLevel,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n\n    // Check for new title unlocks\n    setTimeout(() => {\n      setGameState(prevState => {\n        const newTitleUnlocks = checkNewTitleUnlocks(newLevel, prevState.currentFloor, prevState.unlockedTitles);\n        if (newTitleUnlocks.length > 0) {\n          return {\n            ...prevState,\n            unlockedTitles: [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)],\n            titleNotifications: [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          };\n        }\n        return prevState;\n      });\n    }, 100);\n\n    // Add level up to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'levelup',\n        message: `レベルが${newLevel}に上がりました！`\n      });\n    }, 300);\n    return newPlayer;\n  }, [addToBattleLog]);\n  const handleCanvasClick = useCallback(() => {\n    setGameState(handleAttack);\n  }, [handleAttack]);\n  const handleUpgrade = useCallback(type => {\n    setGameState(prevState => {\n      const newState = {\n        ...prevState\n      };\n      switch (type) {\n        case 'attack':\n          const attackCost = 10 * Math.pow(1.2, newState.player.upgradeCount.attack);\n          if (newState.player.gold >= attackCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - attackCost),\n              attack: newState.player.attack + 5,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                attack: newState.player.upgradeCount.attack + 1\n              }\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (!newState.autoAttack) {\n            if (newState.player.gold >= 50) {\n              newState.player = {\n                ...newState.player,\n                gold: Math.floor(newState.player.gold - 50)\n              };\n              newState.autoAttack = true;\n            }\n          } else {\n            newState.autoAttack = false;\n          }\n          break;\n        case 'hp':\n          const hpCost = Math.floor(25 * Math.pow(1.15, newState.player.upgradeCount.hp));\n          if (newState.player.gold >= hpCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - hpCost),\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                hp: newState.player.upgradeCount.hp + 1\n              }\n            };\n          }\n          break;\n        case 'defense':\n          const defenseCost = Math.floor(15 * Math.pow(1.18, newState.player.upgradeCount.defense));\n          if (newState.player.gold >= defenseCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - defenseCost),\n              defense: newState.player.defense + 3,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                defense: newState.player.upgradeCount.defense + 1\n              }\n            };\n          }\n          break;\n        case 'critical':\n          const criticalCost = Math.floor(30 * Math.pow(1.25, newState.player.upgradeCount.critical));\n          if (newState.player.gold >= criticalCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - criticalCost),\n              criticalRate: newState.player.criticalRate + 2,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                critical: newState.player.upgradeCount.critical + 1\n              }\n            };\n          }\n          break;\n        case 'expBonus':\n          const expBonusCost = Math.floor(40 * Math.pow(1.3, newState.player.upgradeCount.expBonus));\n          if (newState.player.gold >= expBonusCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - expBonusCost),\n              expBonus: newState.player.expBonus + 10,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                expBonus: newState.player.upgradeCount.expBonus + 1\n              }\n            };\n          }\n          break;\n        case 'goldBonus':\n          const goldBonusCost = Math.floor(35 * Math.pow(1.25, newState.player.upgradeCount.goldBonus));\n          if (newState.player.gold >= goldBonusCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - goldBonusCost),\n              goldBonus: newState.player.goldBonus + 15,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                goldBonus: newState.player.upgradeCount.goldBonus + 1\n              }\n            };\n          }\n          break;\n        case 'autoSpeed':\n          const autoSpeedCost = Math.floor(60 * Math.pow(1.4, newState.player.upgradeCount.autoSpeed));\n          if (newState.player.gold >= autoSpeedCost && newState.player.autoAttackSpeed > 100) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - autoSpeedCost),\n              autoAttackSpeed: Math.max(100, newState.player.autoAttackSpeed - 50),\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                autoSpeed: newState.player.upgradeCount.autoSpeed + 1\n              }\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      return newState;\n    });\n  }, []);\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => {\n      const newFloor = prevState.currentFloor + 1;\n\n      // Check for new title unlocks based on floor\n      const newTitleUnlocks = checkNewTitleUnlocks(prevState.player.level, newFloor, prevState.unlockedTitles);\n      return {\n        ...prevState,\n        currentFloor: newFloor,\n        monsters: [],\n        unlockedTitles: newTitleUnlocks.length > 0 ? [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)] : prevState.unlockedTitles,\n        titleNotifications: newTitleUnlocks.length > 0 ? [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)] : prevState.titleNotifications\n      };\n    });\n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n  const handleDismissNotification = useCallback(index => {\n    setGameState(prevState => ({\n      ...prevState,\n      titleNotifications: prevState.titleNotifications.filter((_, i) => i !== index)\n    }));\n  }, []);\n  const handleSpellUpgrade = useCallback(spellId => {\n    setGameState(prevState => {\n      const currentLevel = prevState.magicSpells[spellId] || 0;\n      const cost = currentLevel === 0 ? 0 : getSpellUpgradeCost(spellId, currentLevel);\n      if (currentLevel === 0) {\n        // Unlock spell\n        const availableSpells = getAvailableSpells(prevState.player.level);\n        const spell = availableSpells.find(s => s.id === spellId);\n        if (!spell || prevState.player.level < spell.unlockLevel) return prevState;\n        return {\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: 1\n          }\n        };\n      } else {\n        // Upgrade spell\n        if (prevState.player.gold < cost) return prevState;\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: Math.floor(prevState.player.gold - cost)\n          },\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: currentLevel + 1\n          }\n        };\n      }\n    });\n  }, []);\n  const handleSpellSelect = useCallback(spellId => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentSpell: spellId\n    }));\n  }, []);\n  const handleEquip = useCallback(item => {\n    if (!item.equipmentSlot) return;\n    setGameState(prevState => ({\n      ...prevState,\n      equipment: {\n        ...prevState.equipment,\n        [item.equipmentSlot]: item\n      }\n    }));\n  }, []);\n  const handleUnequip = useCallback(slot => {\n    setGameState(prevState => ({\n      ...prevState,\n      equipment: {\n        ...prevState.equipment,\n        [slot]: null\n      }\n    }));\n  }, []);\n  const handleUpgradeEquipment = useCallback(item => {\n    setGameState(prevState => {\n      const collectedItem = prevState.collection.find(c => c.item.id === item.id);\n      if (!collectedItem || !canUpgradeEquipment(item, collectedItem.quantity)) {\n        return prevState;\n      }\n      const upgradedItem = upgradeEquipment(item);\n      const newQuantity = collectedItem.quantity - 5;\n\n      // Update collection\n      const newCollection = newQuantity > 0 ? prevState.collection.map(c => c.item.id === item.id ? {\n        ...c,\n        item: upgradedItem,\n        quantity: newQuantity\n      } : c) : prevState.collection.filter(c => c.item.id !== item.id);\n\n      // Update equipped item if it matches\n      const newEquipment = {\n        ...prevState.equipment\n      };\n      Object.entries(newEquipment).forEach(([slot, equippedItem]) => {\n        if (equippedItem && equippedItem.id === item.id) {\n          newEquipment[slot] = upgradedItem;\n        }\n      });\n      return {\n        ...prevState,\n        collection: newCollection,\n        equipment: newEquipment\n      };\n    });\n\n    // Add upgrade log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'item_drop',\n        message: `${item.name}をアップグレードしました！`\n      });\n    }, 100);\n  }, [addToBattleLog]);\n\n  // Calculate total equipment stats\n  const getEquipmentStats = useCallback(() => {\n    const stats = {\n      attack: 0,\n      defense: 0,\n      hp: 0,\n      criticalRate: 0\n    };\n    Object.values(gameState.equipment).forEach(item => {\n      if (item !== null && item !== void 0 && item.stats) {\n        stats.attack += item.stats.attack || 0;\n        stats.defense += item.stats.defense || 0;\n        stats.hp += item.stats.hp || 0;\n        stats.criticalRate += item.stats.criticalRate || 0;\n      }\n    });\n    return stats;\n  }, [gameState.equipment]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameDisplay, {\n        gameState: gameState,\n        onAttackClick: handleCanvasClick,\n        attackPhrase: currentAttackPhrase,\n        damagePhrase: currentDamagePhrase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui-panel\",\n        children: [/*#__PURE__*/_jsxDEV(StatsPanel, {\n          player: gameState.player,\n          floor: gameState.currentFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpgradePanel, {\n          player: gameState.player,\n          autoAttack: gameState.autoAttack,\n          onUpgrade: handleUpgrade,\n          onNextFloor: nextFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-panel\",\n        children: [/*#__PURE__*/_jsxDEV(BattleLog, {\n          logs: gameState.battleLog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MagicPanel, {\n          playerLevel: gameState.player.level,\n          playerGold: gameState.player.gold,\n          magicSpells: gameState.magicSpells,\n          currentSpell: gameState.currentSpell,\n          onSpellUpgrade: handleSpellUpgrade,\n          onSpellSelect: handleSpellSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EquipmentPanel, {\n          gameState: gameState,\n          onEquip: handleEquip,\n          onUnequip: handleUnequip,\n          onUpgradeEquipment: handleUpgradeEquipment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Collection, {\n          collection: gameState.collection,\n          onSellItem: handleSellItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TitleNotification, {\n      notifications: gameState.titleNotifications,\n      onDismiss: handleDismissNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 875,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ekcJw9fIbmqkQB/GWXkBWrbsFZs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","GameDisplay","StatsPanel","UpgradePanel","TitleNotification","BattleLog","Collection","MagicPanel","EquipmentPanel","getRandomDamagePhrase","checkNewTitleUnlocks","getRandomItemDrop","getCurrentDungeon","getRandomMonsterFromDungeon","getSpellDropFromMonster","getMonsterEvolutionName","getRandomEquipmentDrop","upgradeEquipment","canUpgradeEquipment","getRandomPhrase","getSpellDamageBonus","getSpellUpgradeCost","getAvailableSpells","getItemSellPrice","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","player","x","y","width","height","hp","maxHp","level","exp","expMax","attack","gold","animFrame","animSpeed","isAttacking","attackCooldown","defense","criticalRate","expBonus","goldBonus","autoAttackSpeed","upgradeCount","critical","autoSpeed","monsters","currentFloor","currentDungeonId","autoAttack","particles","damageTexts","unlockedTitles","titleNotifications","battleLog","collection","magicSpells","currentSpell","equipment","head","body","hands","feet","weapon","autoAttackRef","currentAttackPhrase","setCurrentAttackPhrase","currentDamagePhrase","setCurrentDamagePhrase","spawnMonster","currentDungeon","floorMultiplier","monsterLevel","Math","max","floor","random","dungeonMonster","id","baseHp","levelBonus","totalHp","monster","name","color","prevState","evolutionName","current","setInterval","length","handleAttack","clearInterval","monsterAttackInterval","map","m","index","equipmentStats","getEquipmentStats","totalDefense","damage","newPlayerHp","min","damagePhrase","setTimeout","addToBattleLog","timestamp","Date","type","message","attackPhrase","newDamageTexts","now","text","life","maxLife","newParticles","i","push","vx","vy","newLog","slice","addToCollection","item","existingItem","find","c","quantity","firstObtained","handleSellItem","itemId","sellPrice","remainingQuantity","filter","_gameState$collection","currentState","currentSpellLevel","spellBonus","totalCriticalRate","isCritical","updatedMonster","toString","newState","killMonster","baseExpGain","levelMultiplier","baseGoldGain","expGain","goldGain","newPlayer","levelUp","droppedItem","icon","droppedEquipment","droppedSpell","emoji","rarity","spawnWeight","newLevel","newTitleUnlocks","t","handleCanvasClick","handleUpgrade","attackCost","pow","hpCost","defenseCost","criticalCost","expBonusCost","goldBonusCost","autoSpeedCost","nextFloor","newFloor","handleDismissNotification","_","handleSpellUpgrade","spellId","currentLevel","cost","availableSpells","spell","s","unlockLevel","handleSpellSelect","handleEquip","equipmentSlot","handleUnequip","slot","handleUpgradeEquipment","collectedItem","upgradedItem","newQuantity","newCollection","newEquipment","Object","entries","forEach","equippedItem","stats","values","className","children","onAttackClick","fileName","_jsxFileName","lineNumber","columnNumber","onUpgrade","onNextFloor","logs","playerLevel","playerGold","onSpellUpgrade","onSpellSelect","onEquip","onUnequip","onUpgradeEquipment","onSellItem","notifications","onDismiss","_c","$RefreshReg$"],"sources":["/home/matsuyama/claude/git/game/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameDisplay from './components/GameDisplay';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport TitleNotification from './components/TitleNotification';\nimport BattleLog from './components/BattleLog';\nimport Collection from './components/Collection';\nimport MagicPanel from './components/MagicPanel';\nimport EquipmentPanel from './components/EquipmentPanel';\nimport { GameState, Monster, UpgradeType, Player, DamageText, Particle, BattleLog as BattleLogType, CollectedItem, Item } from './types/gameTypes';\nimport { getRandomAttackPhrase, getRandomDamagePhrase } from './data/attackPhrases';\nimport { checkNewTitleUnlocks, getCurrentTitle } from './data/characterData';\nimport { getRandomItemDrop } from './data/itemData';\nimport { getCurrentDungeon, getRandomMonsterFromDungeon, getSpellDropFromMonster, getMonsterEvolutionName } from './data/dungeonData';\nimport { getRandomEquipmentDrop, upgradeEquipment, canUpgradeEquipment } from './data/equipmentData';\nimport { getRandomPhrase, getSpellDamageBonus, getSpellUpgradeCost, getAvailableSpells } from './data/magicData';\nimport { getItemSellPrice } from './data/itemData';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0,\n      defense: 0,\n      criticalRate: 5,\n      expBonus: 0,\n      goldBonus: 0,\n      autoAttackSpeed: 500,\n      upgradeCount: {\n        attack: 0,\n        hp: 0,\n        defense: 0,\n        critical: 0,\n        expBonus: 0,\n        goldBonus: 0,\n        autoSpeed: 0\n      }\n    },\n    monsters: [],\n    currentFloor: 1,\n    currentDungeonId: 'forest',\n    autoAttack: false,\n    particles: [],\n    damageTexts: [],\n    unlockedTitles: ['novice'],\n    titleNotifications: [],\n    battleLog: [],\n    collection: [],\n    magicSpells: {\n      'fire_bolt': 1 // Start with Fire Bolt level 1\n    },\n    currentSpell: 'fire_bolt',\n    equipment: {\n      head: null,\n      body: null,\n      hands: null,\n      feet: null,\n      weapon: null\n    }\n  });\n\n  const autoAttackRef = useRef<NodeJS.Timeout | null>(null);\n  const [currentAttackPhrase, setCurrentAttackPhrase] = useState<string>('');\n  const [currentDamagePhrase, setCurrentDamagePhrase] = useState<string>('');\n\n  const spawnMonster = useCallback(() => {\n    const currentDungeon = getCurrentDungeon(gameState.currentFloor);\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.3;\n    const monsterLevel = Math.max(1, gameState.currentFloor + Math.floor(Math.random() * 3) - 1);\n    \n    const dungeonMonster = getRandomMonsterFromDungeon(currentDungeon.id, floorMultiplier);\n    \n    if (!dungeonMonster) {\n      // Fallback to basic monster\n      const baseHp = Math.floor(20 * floorMultiplier);\n      const levelBonus = Math.floor(baseHp * 0.2 * (monsterLevel - 1));\n      const totalHp = baseHp + levelBonus;\n      \n      const monster: Monster = {\n        x: 600,\n        y: 250,\n        width: 80,\n        height: 100,\n        hp: totalHp,\n        maxHp: totalHp,\n        name: 'スライム',\n        color: '#00ff00',\n        animFrame: 0,\n        animSpeed: 0.05,\n        level: monsterLevel,\n        attack: Math.floor(5 + monsterLevel * 2),\n        attackCooldown: 0\n      };\n      \n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, monster]\n      }));\n      return;\n    }\n\n    const baseHp = dungeonMonster.hp;\n    const levelBonus = Math.floor(baseHp * 0.2 * (monsterLevel - 1));\n    const totalHp = baseHp + levelBonus;\n\n    const evolutionName = getMonsterEvolutionName(dungeonMonster, gameState.currentFloor);\n\n    const monster: Monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: totalHp,\n      maxHp: totalHp,\n      name: evolutionName,\n      color: dungeonMonster.color,\n      animFrame: 0,\n      animSpeed: 0.05,\n      level: monsterLevel,\n      attack: Math.floor((5 + monsterLevel * 2) * floorMultiplier),\n      attackCooldown: 0\n    };\n\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster],\n      currentDungeonId: currentDungeon.id\n    }));\n  }, [gameState.currentFloor]);\n\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, gameState.player.autoAttackSpeed); // Use player's auto attack speed\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n\n  // Monster attack system\n  useEffect(() => {\n    const monsterAttackInterval = setInterval(() => {\n      setGameState(prevState => {\n        if (prevState.monsters.length === 0) return prevState;\n\n        const monster = prevState.monsters[0];\n        if (monster.attackCooldown > 0) {\n          // Reduce cooldown\n          return {\n            ...prevState,\n            monsters: prevState.monsters.map((m, index) => \n              index === 0 ? { ...m, attackCooldown: m.attackCooldown - 1 } : m\n            )\n          };\n        }\n\n        // Monster attacks player\n        const equipmentStats = getEquipmentStats();\n        const totalDefense = prevState.player.defense + equipmentStats.defense;\n        const damage = Math.max(1, monster.attack - totalDefense);\n        const maxHp = prevState.player.maxHp + equipmentStats.hp;\n        const newPlayerHp = Math.max(0, Math.min(prevState.player.hp, maxHp) - damage);\n        \n        // Generate damage phrase\n        const damagePhrase = getRandomDamagePhrase();\n        setCurrentDamagePhrase(damagePhrase);\n        \n        // Add damage phrase to battle log\n        setTimeout(() => {\n          addToBattleLog({\n            timestamp: new Date(),\n            type: 'attack',\n            message: `セラフィナが攻撃を受けました`,\n            attackPhrase: damagePhrase\n          });\n        }, 100);\n        \n        // Clear damage phrase after 3 seconds\n        setTimeout(() => {\n          setCurrentDamagePhrase('');\n        }, 3000);\n        \n        const newDamageTexts = [...prevState.damageTexts, {\n          id: Date.now(),\n          x: prevState.player.x + prevState.player.width / 2,\n          y: prevState.player.y,\n          text: `-${damage}`,\n          color: '#ff4444',\n          life: 60,\n          maxLife: 60\n        }];\n\n        // Add monster attack particles\n        const newParticles = [...prevState.particles];\n        for (let i = 0; i < 5; i++) {\n          newParticles.push({\n            id: Date.now() + i,\n            x: prevState.player.x + prevState.player.width / 2,\n            y: prevState.player.y + prevState.player.height / 2,\n            vx: (Math.random() - 0.5) * 3,\n            vy: (Math.random() - 0.5) * 3,\n            color: '#ff4444',\n            life: 15,\n            maxLife: 15\n          });\n        }\n\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            hp: newPlayerHp\n          },\n          monsters: prevState.monsters.map((m, index) => \n            index === 0 ? { ...m, attackCooldown: 60 } : m // 3 second cooldown at 50ms interval\n          ),\n          damageTexts: newDamageTexts,\n          particles: newParticles\n        };\n      });\n    }, 50); // 50ms interval for smooth animation\n\n    return () => clearInterval(monsterAttackInterval);\n  }, []);\n\n  const addToBattleLog = useCallback((newLog: Omit<BattleLogType, 'id'>) => {\n    setGameState(prevState => ({\n      ...prevState,\n      battleLog: [\n        {\n          ...newLog,\n          id: Date.now() + Math.random()\n        },\n        ...prevState.battleLog.slice(0, 49) // Keep only last 50 logs\n      ]\n    }));\n  }, []);\n\n  const addToCollection = useCallback((item: any) => {\n    setGameState(prevState => {\n      const existingItem = prevState.collection.find(c => c.item.id === item.id);\n      \n      if (existingItem) {\n        return {\n          ...prevState,\n          collection: prevState.collection.map(c =>\n            c.item.id === item.id\n              ? { ...c, quantity: c.quantity + 1 }\n              : c\n          )\n        };\n      } else {\n        return {\n          ...prevState,\n          collection: [\n            ...prevState.collection,\n            {\n              item,\n              quantity: 1,\n              firstObtained: new Date()\n            }\n          ]\n        };\n      }\n    });\n  }, []);\n\n  const handleSellItem = useCallback((itemId: string, quantity: number) => {\n    setGameState(prevState => {\n      const item = prevState.collection.find(c => c.item.id === itemId);\n      if (!item) return prevState;\n\n      const sellPrice = getItemSellPrice(item.item) * quantity;\n      const remainingQuantity = item.quantity - quantity;\n\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: Math.floor(prevState.player.gold + sellPrice)\n        },\n        collection: remainingQuantity <= 0 \n          ? prevState.collection.filter(c => c.item.id !== itemId)\n          : prevState.collection.map(c =>\n              c.item.id === itemId\n                ? { ...c, quantity: remainingQuantity }\n                : c\n            )\n      };\n    });\n\n    // Add sell log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'item_drop',\n        message: `${quantity}個のアイテムを売却しました (+${getItemSellPrice(gameState.collection.find(c => c.item.id === itemId)?.item!)} × ${quantity}G)`\n      });\n    }, 100);\n  }, [gameState.collection, addToBattleLog]);\n\n  const handleAttack = useCallback((currentState: GameState = gameState): GameState => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    // Generate random attack phrase based on current spell\n    const currentSpellLevel = currentState.magicSpells[currentState.currentSpell] || 1;\n    const attackPhrase = getRandomPhrase(currentState.currentSpell, currentSpellLevel);\n    setCurrentAttackPhrase(attackPhrase);\n\n    // Add attack to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'attack',\n        message: `セラフィナが攻撃しました`,\n        attackPhrase\n      });\n    }, 100);\n\n    const monster = currentState.monsters[0];\n    const spellBonus = getSpellDamageBonus(currentState.currentSpell, currentSpellLevel);\n    const equipmentStats = getEquipmentStats();\n    let damage = currentState.player.attack + equipmentStats.attack + spellBonus + Math.floor(Math.random() * 5);\n    \n    // Apply critical hit chance\n    const totalCriticalRate = currentState.player.criticalRate + equipmentStats.criticalRate;\n    const isCritical = Math.random() * 100 < totalCriticalRate;\n    if (isCritical) {\n      damage = Math.floor(damage * 2);\n    }\n    \n    const updatedMonster: Monster = { ...monster, hp: monster.hp - damage };\n\n    const newDamageTexts: DamageText[] = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: isCritical ? `CRITICAL! ${damage}` : damage.toString(),\n      color: isCritical ? '#ff0000' : '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n\n    const newParticles: Particle[] = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n\n    let newState: GameState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 0\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n\n    setTimeout(() => {\n      setCurrentAttackPhrase('');\n    }, 3000); // Clear phrase after 3 seconds\n    \n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200); // Button can be clicked again quickly\n\n    return newState;\n  }, [gameState]);\n\n  const killMonster = useCallback((currentState: GameState, monster: Monster): GameState => {\n    const baseExpGain = Math.floor(monster.maxHp / 2);\n    const levelMultiplier = 1 + (monster.level - 1) * 0.15; // 15% bonus per level above 1\n    const baseGoldGain = Math.floor((Math.floor(monster.maxHp / 5) + currentState.currentFloor) * levelMultiplier);\n    \n    const expGain = Math.floor(baseExpGain * (1 + currentState.player.expBonus / 100));\n    const goldGain = Math.floor(baseGoldGain * (1 + currentState.player.goldBonus / 100));\n\n    let newPlayer: Player = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: Math.floor(currentState.player.gold + goldGain)\n    };\n\n    const newDamageTexts: DamageText[] = [\n      ...currentState.damageTexts,\n      {\n        id: Date.now() + 1000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 20,\n        text: `+${expGain} EXP`,\n        color: '#00ff00',\n        life: 60,\n        maxLife: 60\n      },\n      {\n        id: Date.now() + 2000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 40,\n        text: `+${goldGain} G`,\n        color: '#ffff00',\n        life: 60,\n        maxLife: 60\n      }\n    ];\n\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    // Check for item drop\n    const droppedItem = getRandomItemDrop();\n    if (droppedItem) {\n      setTimeout(() => {\n        addToCollection(droppedItem);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `${droppedItem.icon} ${droppedItem.name}を獲得しました！`,\n          item: droppedItem\n        });\n      }, 200);\n    }\n\n    // Check for equipment drop\n    const droppedEquipment = getRandomEquipmentDrop();\n    if (droppedEquipment) {\n      setTimeout(() => {\n        addToCollection(droppedEquipment);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `🎒 ${droppedEquipment.icon} ${droppedEquipment.name}を獲得しました！`,\n          item: droppedEquipment\n        });\n      }, 250);\n    }\n\n    // Check for spell drop from rare/boss monsters\n    const droppedSpell = getSpellDropFromMonster({\n      id: monster.name,\n      name: monster.name,\n      hp: monster.maxHp,\n      color: monster.color,\n      emoji: '',\n      rarity: monster.maxHp > 150 ? 'boss' : monster.maxHp > 80 ? 'rare' : 'common',\n      spawnWeight: 1\n    });\n    \n    if (droppedSpell) {\n      setTimeout(() => {\n        setGameState(prevState => ({\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [droppedSpell]: Math.max(1, prevState.magicSpells[droppedSpell] || 0)\n          }\n        }));\n        \n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `✨ 新しい魔法 ${droppedSpell} を習得しました！`\n        });\n      }, 300);\n    }\n\n    // Add monster defeat log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'monster_defeat',\n        message: `${monster.name}を倒しました！`\n      });\n    }, 150);\n\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n\n  const levelUp = useCallback((player: Player): Player => {\n    const newLevel = player.level + 1;\n    const newPlayer = {\n      ...player,\n      level: newLevel,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n\n    // Check for new title unlocks\n    setTimeout(() => {\n      setGameState(prevState => {\n        const newTitleUnlocks = checkNewTitleUnlocks(newLevel, prevState.currentFloor, prevState.unlockedTitles);\n        if (newTitleUnlocks.length > 0) {\n          return {\n            ...prevState,\n            unlockedTitles: [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)],\n            titleNotifications: [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          };\n        }\n        return prevState;\n      });\n    }, 100);\n\n    // Add level up to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'levelup',\n        message: `レベルが${newLevel}に上がりました！`\n      });\n    }, 300);\n\n    return newPlayer;\n  }, [addToBattleLog]);\n\n  const handleCanvasClick = useCallback(() => {\n    setGameState(handleAttack);\n  }, [handleAttack]);\n\n\n  const handleUpgrade = useCallback((type: UpgradeType) => {\n    setGameState(prevState => {\n      const newState: GameState = { ...prevState };\n      \n      switch (type) {\n        case 'attack':\n          const attackCost = 10 * Math.pow(1.2, newState.player.upgradeCount.attack);\n          if (newState.player.gold >= attackCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - attackCost),\n              attack: newState.player.attack + 5,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                attack: newState.player.upgradeCount.attack + 1\n              }\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (!newState.autoAttack) {\n            if (newState.player.gold >= 50) {\n              newState.player = {\n                ...newState.player,\n                gold: Math.floor(newState.player.gold - 50)\n              };\n              newState.autoAttack = true;\n            }\n          } else {\n            newState.autoAttack = false;\n          }\n          break;\n        case 'hp':\n          const hpCost = Math.floor(25 * Math.pow(1.15, newState.player.upgradeCount.hp));\n          if (newState.player.gold >= hpCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - hpCost),\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                hp: newState.player.upgradeCount.hp + 1\n              }\n            };\n          }\n          break;\n        case 'defense':\n          const defenseCost = Math.floor(15 * Math.pow(1.18, newState.player.upgradeCount.defense));\n          if (newState.player.gold >= defenseCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - defenseCost),\n              defense: newState.player.defense + 3,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                defense: newState.player.upgradeCount.defense + 1\n              }\n            };\n          }\n          break;\n        case 'critical':\n          const criticalCost = Math.floor(30 * Math.pow(1.25, newState.player.upgradeCount.critical));\n          if (newState.player.gold >= criticalCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - criticalCost),\n              criticalRate: newState.player.criticalRate + 2,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                critical: newState.player.upgradeCount.critical + 1\n              }\n            };\n          }\n          break;\n        case 'expBonus':\n          const expBonusCost = Math.floor(40 * Math.pow(1.3, newState.player.upgradeCount.expBonus));\n          if (newState.player.gold >= expBonusCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - expBonusCost),\n              expBonus: newState.player.expBonus + 10,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                expBonus: newState.player.upgradeCount.expBonus + 1\n              }\n            };\n          }\n          break;\n        case 'goldBonus':\n          const goldBonusCost = Math.floor(35 * Math.pow(1.25, newState.player.upgradeCount.goldBonus));\n          if (newState.player.gold >= goldBonusCost) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - goldBonusCost),\n              goldBonus: newState.player.goldBonus + 15,\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                goldBonus: newState.player.upgradeCount.goldBonus + 1\n              }\n            };\n          }\n          break;\n        case 'autoSpeed':\n          const autoSpeedCost = Math.floor(60 * Math.pow(1.4, newState.player.upgradeCount.autoSpeed));\n          if (newState.player.gold >= autoSpeedCost && newState.player.autoAttackSpeed > 100) {\n            newState.player = {\n              ...newState.player,\n              gold: Math.floor(newState.player.gold - autoSpeedCost),\n              autoAttackSpeed: Math.max(100, newState.player.autoAttackSpeed - 50),\n              upgradeCount: {\n                ...newState.player.upgradeCount,\n                autoSpeed: newState.player.upgradeCount.autoSpeed + 1\n              }\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      \n      return newState;\n    });\n  }, []);\n\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => {\n      const newFloor = prevState.currentFloor + 1;\n      \n      // Check for new title unlocks based on floor\n      const newTitleUnlocks = checkNewTitleUnlocks(prevState.player.level, newFloor, prevState.unlockedTitles);\n      \n      return {\n        ...prevState,\n        currentFloor: newFloor,\n        monsters: [],\n        unlockedTitles: newTitleUnlocks.length > 0 \n          ? [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)]\n          : prevState.unlockedTitles,\n        titleNotifications: newTitleUnlocks.length > 0\n          ? [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          : prevState.titleNotifications\n      };\n    });\n    \n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n\n  const handleDismissNotification = useCallback((index: number) => {\n    setGameState(prevState => ({\n      ...prevState,\n      titleNotifications: prevState.titleNotifications.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  const handleSpellUpgrade = useCallback((spellId: string) => {\n    setGameState(prevState => {\n      const currentLevel = prevState.magicSpells[spellId] || 0;\n      const cost = currentLevel === 0 ? 0 : getSpellUpgradeCost(spellId, currentLevel);\n      \n      if (currentLevel === 0) {\n        // Unlock spell\n        const availableSpells = getAvailableSpells(prevState.player.level);\n        const spell = availableSpells.find(s => s.id === spellId);\n        if (!spell || prevState.player.level < spell.unlockLevel) return prevState;\n        \n        return {\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: 1\n          }\n        };\n      } else {\n        // Upgrade spell\n        if (prevState.player.gold < cost) return prevState;\n        \n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: Math.floor(prevState.player.gold - cost)\n          },\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: currentLevel + 1\n          }\n        };\n      }\n    });\n  }, []);\n\n  const handleSpellSelect = useCallback((spellId: string) => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentSpell: spellId\n    }));\n  }, []);\n\n  const handleEquip = useCallback((item: Item) => {\n    if (!item.equipmentSlot) return;\n    \n    setGameState(prevState => ({\n      ...prevState,\n      equipment: {\n        ...prevState.equipment,\n        [item.equipmentSlot!]: item\n      }\n    }));\n  }, []);\n\n  const handleUnequip = useCallback((slot: 'head' | 'body' | 'hands' | 'feet' | 'weapon') => {\n    setGameState(prevState => ({\n      ...prevState,\n      equipment: {\n        ...prevState.equipment,\n        [slot]: null\n      }\n    }));\n  }, []);\n\n  const handleUpgradeEquipment = useCallback((item: Item) => {\n    setGameState(prevState => {\n      const collectedItem = prevState.collection.find(c => c.item.id === item.id);\n      if (!collectedItem || !canUpgradeEquipment(item, collectedItem.quantity)) {\n        return prevState;\n      }\n\n      const upgradedItem = upgradeEquipment(item);\n      const newQuantity = collectedItem.quantity - 5;\n\n      // Update collection\n      const newCollection = newQuantity > 0 \n        ? prevState.collection.map(c => \n            c.item.id === item.id \n              ? { ...c, item: upgradedItem, quantity: newQuantity }\n              : c\n          )\n        : prevState.collection.filter(c => c.item.id !== item.id);\n\n      // Update equipped item if it matches\n      const newEquipment = { ...prevState.equipment };\n      Object.entries(newEquipment).forEach(([slot, equippedItem]) => {\n        if (equippedItem && equippedItem.id === item.id) {\n          newEquipment[slot as keyof typeof newEquipment] = upgradedItem;\n        }\n      });\n\n      return {\n        ...prevState,\n        collection: newCollection,\n        equipment: newEquipment\n      };\n    });\n\n    // Add upgrade log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'item_drop',\n        message: `${item.name}をアップグレードしました！`\n      });\n    }, 100);\n  }, [addToBattleLog]);\n\n  // Calculate total equipment stats\n  const getEquipmentStats = useCallback(() => {\n    const stats = { attack: 0, defense: 0, hp: 0, criticalRate: 0 };\n    Object.values(gameState.equipment).forEach(item => {\n      if (item?.stats) {\n        stats.attack += item.stats.attack || 0;\n        stats.defense += item.stats.defense || 0;\n        stats.hp += item.stats.hp || 0;\n        stats.criticalRate += item.stats.criticalRate || 0;\n      }\n    });\n    return stats;\n  }, [gameState.equipment]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game-container\">\n        <GameDisplay \n          gameState={gameState}\n          onAttackClick={handleCanvasClick}\n          attackPhrase={currentAttackPhrase}\n          damagePhrase={currentDamagePhrase}\n        />\n        \n        <div className=\"ui-panel\">\n          <StatsPanel player={gameState.player} floor={gameState.currentFloor} />\n          <UpgradePanel \n            player={gameState.player}\n            autoAttack={gameState.autoAttack}\n            onUpgrade={handleUpgrade}\n            onNextFloor={nextFloor}\n          />\n        </div>\n        \n        <div className=\"bottom-panel\">\n          <BattleLog logs={gameState.battleLog} />\n          <MagicPanel \n            playerLevel={gameState.player.level}\n            playerGold={gameState.player.gold}\n            magicSpells={gameState.magicSpells}\n            currentSpell={gameState.currentSpell}\n            onSpellUpgrade={handleSpellUpgrade}\n            onSpellSelect={handleSpellSelect}\n          />\n          <EquipmentPanel \n            gameState={gameState}\n            onEquip={handleEquip}\n            onUnequip={handleUnequip}\n            onUpgradeEquipment={handleUpgradeEquipment}\n          />\n          <Collection collection={gameState.collection} onSellItem={handleSellItem} />\n        </div>\n      </div>\n      \n      <TitleNotification \n        notifications={gameState.titleNotifications}\n        onDismiss={handleDismissNotification}\n      />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,cAAc,MAAM,6BAA6B;AAExD,SAAgCC,qBAAqB,QAAQ,sBAAsB;AACnF,SAASC,oBAAoB,QAAyB,sBAAsB;AAC5E,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,iBAAiB,EAAEC,2BAA2B,EAAEC,uBAAuB,EAAEC,uBAAuB,QAAQ,oBAAoB;AACrI,SAASC,sBAAsB,EAAEC,gBAAgB,EAAEC,mBAAmB,QAAQ,sBAAsB;AACpG,SAASC,eAAe,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,kBAAkB,QAAQ,kBAAkB;AAChH,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhC,QAAQ,CAAY;IACpDiC,MAAM,EAAE;MACNC,CAAC,EAAE,GAAG;MACNC,CAAC,EAAE,GAAG;MACNC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,CAAC;MACRC,GAAG,EAAE,CAAC;MACNC,MAAM,EAAE,GAAG;MACXC,MAAM,EAAE,EAAE;MACVC,IAAI,EAAE,CAAC;MACPC,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,GAAG;MACdC,WAAW,EAAE,KAAK;MAClBC,cAAc,EAAE,CAAC;MACjBC,OAAO,EAAE,CAAC;MACVC,YAAY,EAAE,CAAC;MACfC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAE,CAAC;MACZC,eAAe,EAAE,GAAG;MACpBC,YAAY,EAAE;QACZX,MAAM,EAAE,CAAC;QACTL,EAAE,EAAE,CAAC;QACLW,OAAO,EAAE,CAAC;QACVM,QAAQ,EAAE,CAAC;QACXJ,QAAQ,EAAE,CAAC;QACXC,SAAS,EAAE,CAAC;QACZI,SAAS,EAAE;MACb;IACF,CAAC;IACDC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,CAAC;IACfC,gBAAgB,EAAE,QAAQ;IAC1BC,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE,EAAE;IACbC,WAAW,EAAE,EAAE;IACfC,cAAc,EAAE,CAAC,QAAQ,CAAC;IAC1BC,kBAAkB,EAAE,EAAE;IACtBC,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;MACX,WAAW,EAAE,CAAC,CAAC;IACjB,CAAC;IACDC,YAAY,EAAE,WAAW;IACzBC,SAAS,EAAE;MACTC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE,IAAI;MACVC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAGzE,MAAM,CAAwB,IAAI,CAAC;EACzD,MAAM,CAAC0E,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG7E,QAAQ,CAAS,EAAE,CAAC;EAC1E,MAAM,CAAC8E,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG/E,QAAQ,CAAS,EAAE,CAAC;EAE1E,MAAMgF,YAAY,GAAG7E,WAAW,CAAC,MAAM;IACrC,MAAM8E,cAAc,GAAGlE,iBAAiB,CAACgB,SAAS,CAAC2B,YAAY,CAAC;IAChE,MAAMwB,eAAe,GAAG,CAAC,GAAG,CAACnD,SAAS,CAAC2B,YAAY,GAAG,CAAC,IAAI,GAAG;IAC9D,MAAMyB,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEtD,SAAS,CAAC2B,YAAY,GAAG0B,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAE5F,MAAMC,cAAc,GAAGxE,2BAA2B,CAACiE,cAAc,CAACQ,EAAE,EAAEP,eAAe,CAAC;IAEtF,IAAI,CAACM,cAAc,EAAE;MACnB;MACA,MAAME,MAAM,GAAGN,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGJ,eAAe,CAAC;MAC/C,MAAMS,UAAU,GAAGP,IAAI,CAACE,KAAK,CAACI,MAAM,GAAG,GAAG,IAAIP,YAAY,GAAG,CAAC,CAAC,CAAC;MAChE,MAAMS,OAAO,GAAGF,MAAM,GAAGC,UAAU;MAEnC,MAAME,OAAgB,GAAG;QACvB3D,CAAC,EAAE,GAAG;QACNC,CAAC,EAAE,GAAG;QACNC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,GAAG;QACXC,EAAE,EAAEsD,OAAO;QACXrD,KAAK,EAAEqD,OAAO;QACdE,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE,SAAS;QAChBlD,SAAS,EAAE,CAAC;QACZC,SAAS,EAAE,IAAI;QACfN,KAAK,EAAE2C,YAAY;QACnBxC,MAAM,EAAEyC,IAAI,CAACE,KAAK,CAAC,CAAC,GAAGH,YAAY,GAAG,CAAC,CAAC;QACxCnC,cAAc,EAAE;MAClB,CAAC;MAEDhB,YAAY,CAACgE,SAAS,KAAK;QACzB,GAAGA,SAAS;QACZvC,QAAQ,EAAE,CAAC,GAAGuC,SAAS,CAACvC,QAAQ,EAAEoC,OAAO;MAC3C,CAAC,CAAC,CAAC;MACH;IACF;IAEA,MAAMH,MAAM,GAAGF,cAAc,CAAClD,EAAE;IAChC,MAAMqD,UAAU,GAAGP,IAAI,CAACE,KAAK,CAACI,MAAM,GAAG,GAAG,IAAIP,YAAY,GAAG,CAAC,CAAC,CAAC;IAChE,MAAMS,OAAO,GAAGF,MAAM,GAAGC,UAAU;IAEnC,MAAMM,aAAa,GAAG/E,uBAAuB,CAACsE,cAAc,EAAEzD,SAAS,CAAC2B,YAAY,CAAC;IAErF,MAAMmC,OAAgB,GAAG;MACvB3D,CAAC,EAAE,GAAG;MACNC,CAAC,EAAE,GAAG;MACNC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,GAAG;MACXC,EAAE,EAAEsD,OAAO;MACXrD,KAAK,EAAEqD,OAAO;MACdE,IAAI,EAAEG,aAAa;MACnBF,KAAK,EAAEP,cAAc,CAACO,KAAK;MAC3BlD,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,IAAI;MACfN,KAAK,EAAE2C,YAAY;MACnBxC,MAAM,EAAEyC,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,GAAGH,YAAY,GAAG,CAAC,IAAID,eAAe,CAAC;MAC5DlC,cAAc,EAAE;IAClB,CAAC;IAEDhB,YAAY,CAACgE,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZvC,QAAQ,EAAE,CAAC,GAAGuC,SAAS,CAACvC,QAAQ,EAAEoC,OAAO,CAAC;MAC1ClC,gBAAgB,EAAEsB,cAAc,CAACQ;IACnC,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAAC1D,SAAS,CAAC2B,YAAY,CAAC,CAAC;EAE5BzD,SAAS,CAAC,MAAM;IACd+E,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN/E,SAAS,CAAC,MAAM;IACd,IAAI8B,SAAS,CAAC6B,UAAU,IAAI,CAACe,aAAa,CAACuB,OAAO,EAAE;MAClDvB,aAAa,CAACuB,OAAO,GAAGC,WAAW,CAAC,MAAM;QACxCnE,YAAY,CAACgE,SAAS,IAAI;UACxB,IAAIA,SAAS,CAACvC,QAAQ,CAAC2C,MAAM,GAAG,CAAC,EAAE;YACjC,OAAOC,YAAY,CAACL,SAAS,CAAC;UAChC;UACA,OAAOA,SAAS;QAClB,CAAC,CAAC;MACJ,CAAC,EAAEjE,SAAS,CAACE,MAAM,CAACoB,eAAe,CAAC,CAAC,CAAC;IACxC,CAAC,MAAM,IAAI,CAACtB,SAAS,CAAC6B,UAAU,IAAIe,aAAa,CAACuB,OAAO,EAAE;MACzDI,aAAa,CAAC3B,aAAa,CAACuB,OAAO,CAAC;MACpCvB,aAAa,CAACuB,OAAO,GAAG,IAAI;IAC9B;IAEA,OAAO,MAAM;MACX,IAAIvB,aAAa,CAACuB,OAAO,EAAE;QACzBI,aAAa,CAAC3B,aAAa,CAACuB,OAAO,CAAC;MACtC;IACF,CAAC;EACH,CAAC,EAAE,CAACnE,SAAS,CAAC6B,UAAU,CAAC,CAAC;;EAE1B;EACA3D,SAAS,CAAC,MAAM;IACd,MAAMsG,qBAAqB,GAAGJ,WAAW,CAAC,MAAM;MAC9CnE,YAAY,CAACgE,SAAS,IAAI;QACxB,IAAIA,SAAS,CAACvC,QAAQ,CAAC2C,MAAM,KAAK,CAAC,EAAE,OAAOJ,SAAS;QAErD,MAAMH,OAAO,GAAGG,SAAS,CAACvC,QAAQ,CAAC,CAAC,CAAC;QACrC,IAAIoC,OAAO,CAAC7C,cAAc,GAAG,CAAC,EAAE;UAC9B;UACA,OAAO;YACL,GAAGgD,SAAS;YACZvC,QAAQ,EAAEuC,SAAS,CAACvC,QAAQ,CAAC+C,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KACxCA,KAAK,KAAK,CAAC,GAAG;cAAE,GAAGD,CAAC;cAAEzD,cAAc,EAAEyD,CAAC,CAACzD,cAAc,GAAG;YAAE,CAAC,GAAGyD,CACjE;UACF,CAAC;QACH;;QAEA;QACA,MAAME,cAAc,GAAGC,iBAAiB,CAAC,CAAC;QAC1C,MAAMC,YAAY,GAAGb,SAAS,CAAC/D,MAAM,CAACgB,OAAO,GAAG0D,cAAc,CAAC1D,OAAO;QACtE,MAAM6D,MAAM,GAAG1B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEQ,OAAO,CAAClD,MAAM,GAAGkE,YAAY,CAAC;QACzD,MAAMtE,KAAK,GAAGyD,SAAS,CAAC/D,MAAM,CAACM,KAAK,GAAGoE,cAAc,CAACrE,EAAE;QACxD,MAAMyE,WAAW,GAAG3B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAAC4B,GAAG,CAAChB,SAAS,CAAC/D,MAAM,CAACK,EAAE,EAAEC,KAAK,CAAC,GAAGuE,MAAM,CAAC;;QAE9E;QACA,MAAMG,YAAY,GAAGrG,qBAAqB,CAAC,CAAC;QAC5CmE,sBAAsB,CAACkC,YAAY,CAAC;;QAEpC;QACAC,UAAU,CAAC,MAAM;UACfC,cAAc,CAAC;YACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;YACrBC,IAAI,EAAE,QAAQ;YACdC,OAAO,EAAE,gBAAgB;YACzBC,YAAY,EAAEP;UAChB,CAAC,CAAC;QACJ,CAAC,EAAE,GAAG,CAAC;;QAEP;QACAC,UAAU,CAAC,MAAM;UACfnC,sBAAsB,CAAC,EAAE,CAAC;QAC5B,CAAC,EAAE,IAAI,CAAC;QAER,MAAM0C,cAAc,GAAG,CAAC,GAAGzB,SAAS,CAAClC,WAAW,EAAE;UAChD2B,EAAE,EAAE4B,IAAI,CAACK,GAAG,CAAC,CAAC;UACdxF,CAAC,EAAE8D,SAAS,CAAC/D,MAAM,CAACC,CAAC,GAAG8D,SAAS,CAAC/D,MAAM,CAACG,KAAK,GAAG,CAAC;UAClDD,CAAC,EAAE6D,SAAS,CAAC/D,MAAM,CAACE,CAAC;UACrBwF,IAAI,EAAE,IAAIb,MAAM,EAAE;UAClBf,KAAK,EAAE,SAAS;UAChB6B,IAAI,EAAE,EAAE;UACRC,OAAO,EAAE;QACX,CAAC,CAAC;;QAEF;QACA,MAAMC,YAAY,GAAG,CAAC,GAAG9B,SAAS,CAACnC,SAAS,CAAC;QAC7C,KAAK,IAAIkE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1BD,YAAY,CAACE,IAAI,CAAC;YAChBvC,EAAE,EAAE4B,IAAI,CAACK,GAAG,CAAC,CAAC,GAAGK,CAAC;YAClB7F,CAAC,EAAE8D,SAAS,CAAC/D,MAAM,CAACC,CAAC,GAAG8D,SAAS,CAAC/D,MAAM,CAACG,KAAK,GAAG,CAAC;YAClDD,CAAC,EAAE6D,SAAS,CAAC/D,MAAM,CAACE,CAAC,GAAG6D,SAAS,CAAC/D,MAAM,CAACI,MAAM,GAAG,CAAC;YACnD4F,EAAE,EAAE,CAAC7C,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;YAC7B2C,EAAE,EAAE,CAAC9C,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;YAC7BQ,KAAK,EAAE,SAAS;YAChB6B,IAAI,EAAE,EAAE;YACRC,OAAO,EAAE;UACX,CAAC,CAAC;QACJ;QAEA,OAAO;UACL,GAAG7B,SAAS;UACZ/D,MAAM,EAAE;YACN,GAAG+D,SAAS,CAAC/D,MAAM;YACnBK,EAAE,EAAEyE;UACN,CAAC;UACDtD,QAAQ,EAAEuC,SAAS,CAACvC,QAAQ,CAAC+C,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KACxCA,KAAK,KAAK,CAAC,GAAG;YAAE,GAAGD,CAAC;YAAEzD,cAAc,EAAE;UAAG,CAAC,GAAGyD,CAAC,CAAC;UACjD,CAAC;UACD3C,WAAW,EAAE2D,cAAc;UAC3B5D,SAAS,EAAEiE;QACb,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAER,OAAO,MAAMxB,aAAa,CAACC,qBAAqB,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,cAAc,GAAGhH,WAAW,CAAEgI,MAAiC,IAAK;IACxEnG,YAAY,CAACgE,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZ/B,SAAS,EAAE,CACT;QACE,GAAGkE,MAAM;QACT1C,EAAE,EAAE4B,IAAI,CAACK,GAAG,CAAC,CAAC,GAAGtC,IAAI,CAACG,MAAM,CAAC;MAC/B,CAAC,EACD,GAAGS,SAAS,CAAC/B,SAAS,CAACmE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MAAA;IAExC,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAGlI,WAAW,CAAEmI,IAAS,IAAK;IACjDtG,YAAY,CAACgE,SAAS,IAAI;MACxB,MAAMuC,YAAY,GAAGvC,SAAS,CAAC9B,UAAU,CAACsE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAK6C,IAAI,CAAC7C,EAAE,CAAC;MAE1E,IAAI8C,YAAY,EAAE;QAChB,OAAO;UACL,GAAGvC,SAAS;UACZ9B,UAAU,EAAE8B,SAAS,CAAC9B,UAAU,CAACsC,GAAG,CAACiC,CAAC,IACpCA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAK6C,IAAI,CAAC7C,EAAE,GACjB;YAAE,GAAGgD,CAAC;YAAEC,QAAQ,EAAED,CAAC,CAACC,QAAQ,GAAG;UAAE,CAAC,GAClCD,CACN;QACF,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACL,GAAGzC,SAAS;UACZ9B,UAAU,EAAE,CACV,GAAG8B,SAAS,CAAC9B,UAAU,EACvB;YACEoE,IAAI;YACJI,QAAQ,EAAE,CAAC;YACXC,aAAa,EAAE,IAAItB,IAAI,CAAC;UAC1B,CAAC;QAEL,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMuB,cAAc,GAAGzI,WAAW,CAAC,CAAC0I,MAAc,EAAEH,QAAgB,KAAK;IACvE1G,YAAY,CAACgE,SAAS,IAAI;MACxB,MAAMsC,IAAI,GAAGtC,SAAS,CAAC9B,UAAU,CAACsE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAKoD,MAAM,CAAC;MACjE,IAAI,CAACP,IAAI,EAAE,OAAOtC,SAAS;MAE3B,MAAM8C,SAAS,GAAGpH,gBAAgB,CAAC4G,IAAI,CAACA,IAAI,CAAC,GAAGI,QAAQ;MACxD,MAAMK,iBAAiB,GAAGT,IAAI,CAACI,QAAQ,GAAGA,QAAQ;MAElD,OAAO;QACL,GAAG1C,SAAS;QACZ/D,MAAM,EAAE;UACN,GAAG+D,SAAS,CAAC/D,MAAM;UACnBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACU,SAAS,CAAC/D,MAAM,CAACW,IAAI,GAAGkG,SAAS;QACpD,CAAC;QACD5E,UAAU,EAAE6E,iBAAiB,IAAI,CAAC,GAC9B/C,SAAS,CAAC9B,UAAU,CAAC8E,MAAM,CAACP,CAAC,IAAIA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAKoD,MAAM,CAAC,GACtD7C,SAAS,CAAC9B,UAAU,CAACsC,GAAG,CAACiC,CAAC,IACxBA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAKoD,MAAM,GAChB;UAAE,GAAGJ,CAAC;UAAEC,QAAQ,EAAEK;QAAkB,CAAC,GACrCN,CACN;MACN,CAAC;IACH,CAAC,CAAC;;IAEF;IACAvB,UAAU,CAAC,MAAM;MAAA,IAAA+B,qBAAA;MACf9B,cAAc,CAAC;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAE,GAAGmB,QAAQ,mBAAmBhH,gBAAgB,EAAAuH,qBAAA,GAAClH,SAAS,CAACmC,UAAU,CAACsE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAKoD,MAAM,CAAC,cAAAI,qBAAA,uBAApDA,qBAAA,CAAsDX,IAAK,CAAC,MAAMI,QAAQ;MACpI,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,EAAE,CAAC3G,SAAS,CAACmC,UAAU,EAAEiD,cAAc,CAAC,CAAC;EAE1C,MAAMd,YAAY,GAAGlG,WAAW,CAAC,CAAC+I,YAAuB,GAAGnH,SAAS,KAAgB;IACnF,IAAImH,YAAY,CAACzF,QAAQ,CAAC2C,MAAM,KAAK,CAAC,EAAE,OAAO8C,YAAY;;IAE3D;IACA,MAAMC,iBAAiB,GAAGD,YAAY,CAAC/E,WAAW,CAAC+E,YAAY,CAAC9E,YAAY,CAAC,IAAI,CAAC;IAClF,MAAMoD,YAAY,GAAGlG,eAAe,CAAC4H,YAAY,CAAC9E,YAAY,EAAE+E,iBAAiB,CAAC;IAClFtE,sBAAsB,CAAC2C,YAAY,CAAC;;IAEpC;IACAN,UAAU,CAAC,MAAM;MACfC,cAAc,CAAC;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,cAAc;QACvBC;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IAEP,MAAM3B,OAAO,GAAGqD,YAAY,CAACzF,QAAQ,CAAC,CAAC,CAAC;IACxC,MAAM2F,UAAU,GAAG7H,mBAAmB,CAAC2H,YAAY,CAAC9E,YAAY,EAAE+E,iBAAiB,CAAC;IACpF,MAAMxC,cAAc,GAAGC,iBAAiB,CAAC,CAAC;IAC1C,IAAIE,MAAM,GAAGoC,YAAY,CAACjH,MAAM,CAACU,MAAM,GAAGgE,cAAc,CAAChE,MAAM,GAAGyG,UAAU,GAAGhE,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;;IAE5G;IACA,MAAM8D,iBAAiB,GAAGH,YAAY,CAACjH,MAAM,CAACiB,YAAY,GAAGyD,cAAc,CAACzD,YAAY;IACxF,MAAMoG,UAAU,GAAGlE,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG8D,iBAAiB;IAC1D,IAAIC,UAAU,EAAE;MACdxC,MAAM,GAAG1B,IAAI,CAACE,KAAK,CAACwB,MAAM,GAAG,CAAC,CAAC;IACjC;IAEA,MAAMyC,cAAuB,GAAG;MAAE,GAAG1D,OAAO;MAAEvD,EAAE,EAAEuD,OAAO,CAACvD,EAAE,GAAGwE;IAAO,CAAC;IAEvE,MAAMW,cAA4B,GAAG,CAAC,GAAGyB,YAAY,CAACpF,WAAW,EAAE;MACjE2B,EAAE,EAAE4B,IAAI,CAACK,GAAG,CAAC,CAAC;MACdxF,CAAC,EAAE2D,OAAO,CAAC3D,CAAC,GAAG2D,OAAO,CAACzD,KAAK,GAAG,CAAC;MAChCD,CAAC,EAAE0D,OAAO,CAAC1D,CAAC;MACZwF,IAAI,EAAE2B,UAAU,GAAG,aAAaxC,MAAM,EAAE,GAAGA,MAAM,CAAC0C,QAAQ,CAAC,CAAC;MAC5DzD,KAAK,EAAEuD,UAAU,GAAG,SAAS,GAAG,SAAS;MACzC1B,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,MAAMC,YAAwB,GAAG,CAAC,GAAGoB,YAAY,CAACrF,SAAS,CAAC;IAC5D,KAAK,IAAIkE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,YAAY,CAACE,IAAI,CAAC;QAChBvC,EAAE,EAAE4B,IAAI,CAACK,GAAG,CAAC,CAAC,GAAGK,CAAC;QAClB7F,CAAC,EAAE2D,OAAO,CAAC3D,CAAC,GAAG2D,OAAO,CAACzD,KAAK,GAAG,CAAC;QAChCD,CAAC,EAAE0D,OAAO,CAAC1D,CAAC,GAAG0D,OAAO,CAACxD,MAAM,GAAG,CAAC;QACjC4F,EAAE,EAAE,CAAC7C,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;QAC7B2C,EAAE,EAAE,CAAC9C,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;QAC7BQ,KAAK,EAAE,SAAS;QAChB6B,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IAEA,IAAI4B,QAAmB,GAAG;MACxB,GAAGP,YAAY;MACfjH,MAAM,EAAE;QACN,GAAGiH,YAAY,CAACjH,MAAM;QACtBc,WAAW,EAAE,IAAI;QACjBC,cAAc,EAAE;MAClB,CAAC;MACDS,QAAQ,EAAE,CAAC8F,cAAc,EAAE,GAAGL,YAAY,CAACzF,QAAQ,CAAC2E,KAAK,CAAC,CAAC,CAAC,CAAC;MAC7DtE,WAAW,EAAE2D,cAAc;MAC3B5D,SAAS,EAAEiE;IACb,CAAC;IAED,IAAIyB,cAAc,CAACjH,EAAE,IAAI,CAAC,EAAE;MAC1BmH,QAAQ,GAAGC,WAAW,CAACD,QAAQ,EAAEF,cAAc,CAAC;IAClD;IAEArC,UAAU,CAAC,MAAM;MACfrC,sBAAsB,CAAC,EAAE,CAAC;IAC5B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEVqC,UAAU,CAAC,MAAM;MACflF,YAAY,CAACgE,SAAS,KAAK;QACzB,GAAGA,SAAS;QACZ/D,MAAM,EAAE;UACN,GAAG+D,SAAS,CAAC/D,MAAM;UACnBc,WAAW,EAAE;QACf;MACF,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO0G,QAAQ;EACjB,CAAC,EAAE,CAAC1H,SAAS,CAAC,CAAC;EAEf,MAAM2H,WAAW,GAAGvJ,WAAW,CAAC,CAAC+I,YAAuB,EAAErD,OAAgB,KAAgB;IACxF,MAAM8D,WAAW,GAAGvE,IAAI,CAACE,KAAK,CAACO,OAAO,CAACtD,KAAK,GAAG,CAAC,CAAC;IACjD,MAAMqH,eAAe,GAAG,CAAC,GAAG,CAAC/D,OAAO,CAACrD,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC;IACxD,MAAMqH,YAAY,GAAGzE,IAAI,CAACE,KAAK,CAAC,CAACF,IAAI,CAACE,KAAK,CAACO,OAAO,CAACtD,KAAK,GAAG,CAAC,CAAC,GAAG2G,YAAY,CAACxF,YAAY,IAAIkG,eAAe,CAAC;IAE9G,MAAME,OAAO,GAAG1E,IAAI,CAACE,KAAK,CAACqE,WAAW,IAAI,CAAC,GAAGT,YAAY,CAACjH,MAAM,CAACkB,QAAQ,GAAG,GAAG,CAAC,CAAC;IAClF,MAAM4G,QAAQ,GAAG3E,IAAI,CAACE,KAAK,CAACuE,YAAY,IAAI,CAAC,GAAGX,YAAY,CAACjH,MAAM,CAACmB,SAAS,GAAG,GAAG,CAAC,CAAC;IAErF,IAAI4G,SAAiB,GAAG;MACtB,GAAGd,YAAY,CAACjH,MAAM;MACtBQ,GAAG,EAAEyG,YAAY,CAACjH,MAAM,CAACQ,GAAG,GAAGqH,OAAO;MACtClH,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAAC4D,YAAY,CAACjH,MAAM,CAACW,IAAI,GAAGmH,QAAQ;IACtD,CAAC;IAED,MAAMtC,cAA4B,GAAG,CACnC,GAAGyB,YAAY,CAACpF,WAAW,EAC3B;MACE2B,EAAE,EAAE4B,IAAI,CAACK,GAAG,CAAC,CAAC,GAAG,IAAI;MACrBxF,CAAC,EAAE2D,OAAO,CAAC3D,CAAC,GAAG2D,OAAO,CAACzD,KAAK,GAAG,CAAC;MAChCD,CAAC,EAAE0D,OAAO,CAAC1D,CAAC,GAAG,EAAE;MACjBwF,IAAI,EAAE,IAAImC,OAAO,MAAM;MACvB/D,KAAK,EAAE,SAAS;MAChB6B,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;IACX,CAAC,EACD;MACEpC,EAAE,EAAE4B,IAAI,CAACK,GAAG,CAAC,CAAC,GAAG,IAAI;MACrBxF,CAAC,EAAE2D,OAAO,CAAC3D,CAAC,GAAG2D,OAAO,CAACzD,KAAK,GAAG,CAAC;MAChCD,CAAC,EAAE0D,OAAO,CAAC1D,CAAC,GAAG,EAAE;MACjBwF,IAAI,EAAE,IAAIoC,QAAQ,IAAI;MACtBhE,KAAK,EAAE,SAAS;MAChB6B,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;IACX,CAAC,CACF;IAED,IAAImC,SAAS,CAACvH,GAAG,IAAIuH,SAAS,CAACtH,MAAM,EAAE;MACrCsH,SAAS,GAAGC,OAAO,CAACD,SAAS,CAAC;MAC9BvC,cAAc,CAACO,IAAI,CAAC;QAClBvC,EAAE,EAAE4B,IAAI,CAACK,GAAG,CAAC,CAAC,GAAG,IAAI;QACrBxF,CAAC,EAAE8H,SAAS,CAAC9H,CAAC,GAAG8H,SAAS,CAAC5H,KAAK,GAAG,CAAC;QACpCD,CAAC,EAAE6H,SAAS,CAAC7H,CAAC;QACdwF,IAAI,EAAE,WAAW;QACjB5B,KAAK,EAAE,SAAS;QAChB6B,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMqC,WAAW,GAAGpJ,iBAAiB,CAAC,CAAC;IACvC,IAAIoJ,WAAW,EAAE;MACfhD,UAAU,CAAC,MAAM;QACfmB,eAAe,CAAC6B,WAAW,CAAC;QAC5B/C,cAAc,CAAC;UACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrBC,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAE,GAAG2C,WAAW,CAACC,IAAI,IAAID,WAAW,CAACpE,IAAI,UAAU;UAC1DwC,IAAI,EAAE4B;QACR,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT;;IAEA;IACA,MAAME,gBAAgB,GAAGjJ,sBAAsB,CAAC,CAAC;IACjD,IAAIiJ,gBAAgB,EAAE;MACpBlD,UAAU,CAAC,MAAM;QACfmB,eAAe,CAAC+B,gBAAgB,CAAC;QACjCjD,cAAc,CAAC;UACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrBC,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAE,MAAM6C,gBAAgB,CAACD,IAAI,IAAIC,gBAAgB,CAACtE,IAAI,UAAU;UACvEwC,IAAI,EAAE8B;QACR,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT;;IAEA;IACA,MAAMC,YAAY,GAAGpJ,uBAAuB,CAAC;MAC3CwE,EAAE,EAAEI,OAAO,CAACC,IAAI;MAChBA,IAAI,EAAED,OAAO,CAACC,IAAI;MAClBxD,EAAE,EAAEuD,OAAO,CAACtD,KAAK;MACjBwD,KAAK,EAAEF,OAAO,CAACE,KAAK;MACpBuE,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE1E,OAAO,CAACtD,KAAK,GAAG,GAAG,GAAG,MAAM,GAAGsD,OAAO,CAACtD,KAAK,GAAG,EAAE,GAAG,MAAM,GAAG,QAAQ;MAC7EiI,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,IAAIH,YAAY,EAAE;MAChBnD,UAAU,CAAC,MAAM;QACflF,YAAY,CAACgE,SAAS,KAAK;UACzB,GAAGA,SAAS;UACZ7B,WAAW,EAAE;YACX,GAAG6B,SAAS,CAAC7B,WAAW;YACxB,CAACkG,YAAY,GAAGjF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEW,SAAS,CAAC7B,WAAW,CAACkG,YAAY,CAAC,IAAI,CAAC;UACtE;QACF,CAAC,CAAC,CAAC;QAEHlD,cAAc,CAAC;UACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrBC,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAE,WAAW8C,YAAY;QAClC,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT;;IAEA;IACAnD,UAAU,CAAC,MAAM;MACfC,cAAc,CAAC;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,IAAI,EAAE,gBAAgB;QACtBC,OAAO,EAAE,GAAG1B,OAAO,CAACC,IAAI;MAC1B,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IAEPoB,UAAU,CAAC,MAAM;MACflC,YAAY,CAAC,CAAC;IAChB,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO;MACL,GAAGkE,YAAY;MACfjH,MAAM,EAAE+H,SAAS;MACjBvG,QAAQ,EAAEyF,YAAY,CAACzF,QAAQ,CAACuF,MAAM,CAACvC,CAAC,IAAIA,CAAC,KAAKZ,OAAO,CAAC;MAC1D/B,WAAW,EAAE2D;IACf,CAAC;EACH,CAAC,EAAE,CAACzC,YAAY,CAAC,CAAC;EAElB,MAAMiF,OAAO,GAAG9J,WAAW,CAAE8B,MAAc,IAAa;IACtD,MAAMwI,QAAQ,GAAGxI,MAAM,CAACO,KAAK,GAAG,CAAC;IACjC,MAAMwH,SAAS,GAAG;MAChB,GAAG/H,MAAM;MACTO,KAAK,EAAEiI,QAAQ;MACfhI,GAAG,EAAER,MAAM,CAACQ,GAAG,GAAGR,MAAM,CAACS,MAAM;MAC/BA,MAAM,EAAE0C,IAAI,CAACE,KAAK,CAACrD,MAAM,CAACS,MAAM,GAAG,GAAG,CAAC;MACvCC,MAAM,EAAEV,MAAM,CAACU,MAAM,GAAG,CAAC;MACzBJ,KAAK,EAAEN,MAAM,CAACM,KAAK,GAAG,EAAE;MACxBD,EAAE,EAAEL,MAAM,CAACM,KAAK,GAAG;IACrB,CAAC;;IAED;IACA2E,UAAU,CAAC,MAAM;MACflF,YAAY,CAACgE,SAAS,IAAI;QACxB,MAAM0E,eAAe,GAAG7J,oBAAoB,CAAC4J,QAAQ,EAAEzE,SAAS,CAACtC,YAAY,EAAEsC,SAAS,CAACjC,cAAc,CAAC;QACxG,IAAI2G,eAAe,CAACtE,MAAM,GAAG,CAAC,EAAE;UAC9B,OAAO;YACL,GAAGJ,SAAS;YACZjC,cAAc,EAAE,CAAC,GAAGiC,SAAS,CAACjC,cAAc,EAAE,GAAG2G,eAAe,CAAClE,GAAG,CAACmE,CAAC,IAAIA,CAAC,CAAClF,EAAE,CAAC,CAAC;YAChFzB,kBAAkB,EAAE,CAAC,GAAGgC,SAAS,CAAChC,kBAAkB,EAAE,GAAG0G,eAAe,CAAClE,GAAG,CAACmE,CAAC,IAAIA,CAAC,CAAC7E,IAAI,CAAC;UAC3F,CAAC;QACH;QACA,OAAOE,SAAS;MAClB,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;;IAEP;IACAkB,UAAU,CAAC,MAAM;MACfC,cAAc,CAAC;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE,OAAOkD,QAAQ;MAC1B,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IAEP,OAAOT,SAAS;EAClB,CAAC,EAAE,CAAC7C,cAAc,CAAC,CAAC;EAEpB,MAAMyD,iBAAiB,GAAGzK,WAAW,CAAC,MAAM;IAC1C6B,YAAY,CAACqE,YAAY,CAAC;EAC5B,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAGlB,MAAMwE,aAAa,GAAG1K,WAAW,CAAEmH,IAAiB,IAAK;IACvDtF,YAAY,CAACgE,SAAS,IAAI;MACxB,MAAMyD,QAAmB,GAAG;QAAE,GAAGzD;MAAU,CAAC;MAE5C,QAAQsB,IAAI;QACV,KAAK,QAAQ;UACX,MAAMwD,UAAU,GAAG,EAAE,GAAG1F,IAAI,CAAC2F,GAAG,CAAC,GAAG,EAAEtB,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACX,MAAM,CAAC;UAC1E,IAAI8G,QAAQ,CAACxH,MAAM,CAACW,IAAI,IAAIkI,UAAU,EAAE;YACtCrB,QAAQ,CAACxH,MAAM,GAAG;cAChB,GAAGwH,QAAQ,CAACxH,MAAM;cAClBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACmE,QAAQ,CAACxH,MAAM,CAACW,IAAI,GAAGkI,UAAU,CAAC;cACnDnI,MAAM,EAAE8G,QAAQ,CAACxH,MAAM,CAACU,MAAM,GAAG,CAAC;cAClCW,YAAY,EAAE;gBACZ,GAAGmG,QAAQ,CAACxH,MAAM,CAACqB,YAAY;gBAC/BX,MAAM,EAAE8G,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACX,MAAM,GAAG;cAChD;YACF,CAAC;UACH;UACA;QACF,KAAK,YAAY;UACf,IAAI,CAAC8G,QAAQ,CAAC7F,UAAU,EAAE;YACxB,IAAI6F,QAAQ,CAACxH,MAAM,CAACW,IAAI,IAAI,EAAE,EAAE;cAC9B6G,QAAQ,CAACxH,MAAM,GAAG;gBAChB,GAAGwH,QAAQ,CAACxH,MAAM;gBAClBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACmE,QAAQ,CAACxH,MAAM,CAACW,IAAI,GAAG,EAAE;cAC5C,CAAC;cACD6G,QAAQ,CAAC7F,UAAU,GAAG,IAAI;YAC5B;UACF,CAAC,MAAM;YACL6F,QAAQ,CAAC7F,UAAU,GAAG,KAAK;UAC7B;UACA;QACF,KAAK,IAAI;UACP,MAAMoH,MAAM,GAAG5F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC2F,GAAG,CAAC,IAAI,EAAEtB,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAAChB,EAAE,CAAC,CAAC;UAC/E,IAAImH,QAAQ,CAACxH,MAAM,CAACW,IAAI,IAAIoI,MAAM,EAAE;YAClCvB,QAAQ,CAACxH,MAAM,GAAG;cAChB,GAAGwH,QAAQ,CAACxH,MAAM;cAClBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACmE,QAAQ,CAACxH,MAAM,CAACW,IAAI,GAAGoI,MAAM,CAAC;cAC/CzI,KAAK,EAAEkH,QAAQ,CAACxH,MAAM,CAACM,KAAK,GAAG,EAAE;cACjCD,EAAE,EAAEmH,QAAQ,CAACxH,MAAM,CAACM,KAAK,GAAG,EAAE;cAC9Be,YAAY,EAAE;gBACZ,GAAGmG,QAAQ,CAACxH,MAAM,CAACqB,YAAY;gBAC/BhB,EAAE,EAAEmH,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAAChB,EAAE,GAAG;cACxC;YACF,CAAC;UACH;UACA;QACF,KAAK,SAAS;UACZ,MAAM2I,WAAW,GAAG7F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC2F,GAAG,CAAC,IAAI,EAAEtB,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACL,OAAO,CAAC,CAAC;UACzF,IAAIwG,QAAQ,CAACxH,MAAM,CAACW,IAAI,IAAIqI,WAAW,EAAE;YACvCxB,QAAQ,CAACxH,MAAM,GAAG;cAChB,GAAGwH,QAAQ,CAACxH,MAAM;cAClBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACmE,QAAQ,CAACxH,MAAM,CAACW,IAAI,GAAGqI,WAAW,CAAC;cACpDhI,OAAO,EAAEwG,QAAQ,CAACxH,MAAM,CAACgB,OAAO,GAAG,CAAC;cACpCK,YAAY,EAAE;gBACZ,GAAGmG,QAAQ,CAACxH,MAAM,CAACqB,YAAY;gBAC/BL,OAAO,EAAEwG,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACL,OAAO,GAAG;cAClD;YACF,CAAC;UACH;UACA;QACF,KAAK,UAAU;UACb,MAAMiI,YAAY,GAAG9F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC2F,GAAG,CAAC,IAAI,EAAEtB,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACC,QAAQ,CAAC,CAAC;UAC3F,IAAIkG,QAAQ,CAACxH,MAAM,CAACW,IAAI,IAAIsI,YAAY,EAAE;YACxCzB,QAAQ,CAACxH,MAAM,GAAG;cAChB,GAAGwH,QAAQ,CAACxH,MAAM;cAClBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACmE,QAAQ,CAACxH,MAAM,CAACW,IAAI,GAAGsI,YAAY,CAAC;cACrDhI,YAAY,EAAEuG,QAAQ,CAACxH,MAAM,CAACiB,YAAY,GAAG,CAAC;cAC9CI,YAAY,EAAE;gBACZ,GAAGmG,QAAQ,CAACxH,MAAM,CAACqB,YAAY;gBAC/BC,QAAQ,EAAEkG,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACC,QAAQ,GAAG;cACpD;YACF,CAAC;UACH;UACA;QACF,KAAK,UAAU;UACb,MAAM4H,YAAY,GAAG/F,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC2F,GAAG,CAAC,GAAG,EAAEtB,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACH,QAAQ,CAAC,CAAC;UAC1F,IAAIsG,QAAQ,CAACxH,MAAM,CAACW,IAAI,IAAIuI,YAAY,EAAE;YACxC1B,QAAQ,CAACxH,MAAM,GAAG;cAChB,GAAGwH,QAAQ,CAACxH,MAAM;cAClBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACmE,QAAQ,CAACxH,MAAM,CAACW,IAAI,GAAGuI,YAAY,CAAC;cACrDhI,QAAQ,EAAEsG,QAAQ,CAACxH,MAAM,CAACkB,QAAQ,GAAG,EAAE;cACvCG,YAAY,EAAE;gBACZ,GAAGmG,QAAQ,CAACxH,MAAM,CAACqB,YAAY;gBAC/BH,QAAQ,EAAEsG,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACH,QAAQ,GAAG;cACpD;YACF,CAAC;UACH;UACA;QACF,KAAK,WAAW;UACd,MAAMiI,aAAa,GAAGhG,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC2F,GAAG,CAAC,IAAI,EAAEtB,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACF,SAAS,CAAC,CAAC;UAC7F,IAAIqG,QAAQ,CAACxH,MAAM,CAACW,IAAI,IAAIwI,aAAa,EAAE;YACzC3B,QAAQ,CAACxH,MAAM,GAAG;cAChB,GAAGwH,QAAQ,CAACxH,MAAM;cAClBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACmE,QAAQ,CAACxH,MAAM,CAACW,IAAI,GAAGwI,aAAa,CAAC;cACtDhI,SAAS,EAAEqG,QAAQ,CAACxH,MAAM,CAACmB,SAAS,GAAG,EAAE;cACzCE,YAAY,EAAE;gBACZ,GAAGmG,QAAQ,CAACxH,MAAM,CAACqB,YAAY;gBAC/BF,SAAS,EAAEqG,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACF,SAAS,GAAG;cACtD;YACF,CAAC;UACH;UACA;QACF,KAAK,WAAW;UACd,MAAMiI,aAAa,GAAGjG,IAAI,CAACE,KAAK,CAAC,EAAE,GAAGF,IAAI,CAAC2F,GAAG,CAAC,GAAG,EAAEtB,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACE,SAAS,CAAC,CAAC;UAC5F,IAAIiG,QAAQ,CAACxH,MAAM,CAACW,IAAI,IAAIyI,aAAa,IAAI5B,QAAQ,CAACxH,MAAM,CAACoB,eAAe,GAAG,GAAG,EAAE;YAClFoG,QAAQ,CAACxH,MAAM,GAAG;cAChB,GAAGwH,QAAQ,CAACxH,MAAM;cAClBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACmE,QAAQ,CAACxH,MAAM,CAACW,IAAI,GAAGyI,aAAa,CAAC;cACtDhI,eAAe,EAAE+B,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEoE,QAAQ,CAACxH,MAAM,CAACoB,eAAe,GAAG,EAAE,CAAC;cACpEC,YAAY,EAAE;gBACZ,GAAGmG,QAAQ,CAACxH,MAAM,CAACqB,YAAY;gBAC/BE,SAAS,EAAEiG,QAAQ,CAACxH,MAAM,CAACqB,YAAY,CAACE,SAAS,GAAG;cACtD;YACF,CAAC;UACH;UACA;QACF;UACE;MACJ;MAEA,OAAOiG,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6B,SAAS,GAAGnL,WAAW,CAAC,MAAM;IAClC6B,YAAY,CAACgE,SAAS,IAAI;MACxB,MAAMuF,QAAQ,GAAGvF,SAAS,CAACtC,YAAY,GAAG,CAAC;;MAE3C;MACA,MAAMgH,eAAe,GAAG7J,oBAAoB,CAACmF,SAAS,CAAC/D,MAAM,CAACO,KAAK,EAAE+I,QAAQ,EAAEvF,SAAS,CAACjC,cAAc,CAAC;MAExG,OAAO;QACL,GAAGiC,SAAS;QACZtC,YAAY,EAAE6H,QAAQ;QACtB9H,QAAQ,EAAE,EAAE;QACZM,cAAc,EAAE2G,eAAe,CAACtE,MAAM,GAAG,CAAC,GACtC,CAAC,GAAGJ,SAAS,CAACjC,cAAc,EAAE,GAAG2G,eAAe,CAAClE,GAAG,CAACmE,CAAC,IAAIA,CAAC,CAAClF,EAAE,CAAC,CAAC,GAChEO,SAAS,CAACjC,cAAc;QAC5BC,kBAAkB,EAAE0G,eAAe,CAACtE,MAAM,GAAG,CAAC,GAC1C,CAAC,GAAGJ,SAAS,CAAChC,kBAAkB,EAAE,GAAG0G,eAAe,CAAClE,GAAG,CAACmE,CAAC,IAAIA,CAAC,CAAC7E,IAAI,CAAC,CAAC,GACtEE,SAAS,CAAChC;MAChB,CAAC;IACH,CAAC,CAAC;IAEFkD,UAAU,CAAC,MAAM;MACflC,YAAY,CAAC,CAAC;IAChB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,MAAMwG,yBAAyB,GAAGrL,WAAW,CAAEuG,KAAa,IAAK;IAC/D1E,YAAY,CAACgE,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZhC,kBAAkB,EAAEgC,SAAS,CAAChC,kBAAkB,CAACgF,MAAM,CAAC,CAACyC,CAAC,EAAE1D,CAAC,KAAKA,CAAC,KAAKrB,KAAK;IAC/E,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgF,kBAAkB,GAAGvL,WAAW,CAAEwL,OAAe,IAAK;IAC1D3J,YAAY,CAACgE,SAAS,IAAI;MACxB,MAAM4F,YAAY,GAAG5F,SAAS,CAAC7B,WAAW,CAACwH,OAAO,CAAC,IAAI,CAAC;MACxD,MAAME,IAAI,GAAGD,YAAY,KAAK,CAAC,GAAG,CAAC,GAAGpK,mBAAmB,CAACmK,OAAO,EAAEC,YAAY,CAAC;MAEhF,IAAIA,YAAY,KAAK,CAAC,EAAE;QACtB;QACA,MAAME,eAAe,GAAGrK,kBAAkB,CAACuE,SAAS,CAAC/D,MAAM,CAACO,KAAK,CAAC;QAClE,MAAMuJ,KAAK,GAAGD,eAAe,CAACtD,IAAI,CAACwD,CAAC,IAAIA,CAAC,CAACvG,EAAE,KAAKkG,OAAO,CAAC;QACzD,IAAI,CAACI,KAAK,IAAI/F,SAAS,CAAC/D,MAAM,CAACO,KAAK,GAAGuJ,KAAK,CAACE,WAAW,EAAE,OAAOjG,SAAS;QAE1E,OAAO;UACL,GAAGA,SAAS;UACZ7B,WAAW,EAAE;YACX,GAAG6B,SAAS,CAAC7B,WAAW;YACxB,CAACwH,OAAO,GAAG;UACb;QACF,CAAC;MACH,CAAC,MAAM;QACL;QACA,IAAI3F,SAAS,CAAC/D,MAAM,CAACW,IAAI,GAAGiJ,IAAI,EAAE,OAAO7F,SAAS;QAElD,OAAO;UACL,GAAGA,SAAS;UACZ/D,MAAM,EAAE;YACN,GAAG+D,SAAS,CAAC/D,MAAM;YACnBW,IAAI,EAAEwC,IAAI,CAACE,KAAK,CAACU,SAAS,CAAC/D,MAAM,CAACW,IAAI,GAAGiJ,IAAI;UAC/C,CAAC;UACD1H,WAAW,EAAE;YACX,GAAG6B,SAAS,CAAC7B,WAAW;YACxB,CAACwH,OAAO,GAAGC,YAAY,GAAG;UAC5B;QACF,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,iBAAiB,GAAG/L,WAAW,CAAEwL,OAAe,IAAK;IACzD3J,YAAY,CAACgE,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZ5B,YAAY,EAAEuH;IAChB,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,WAAW,GAAGhM,WAAW,CAAEmI,IAAU,IAAK;IAC9C,IAAI,CAACA,IAAI,CAAC8D,aAAa,EAAE;IAEzBpK,YAAY,CAACgE,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZ3B,SAAS,EAAE;QACT,GAAG2B,SAAS,CAAC3B,SAAS;QACtB,CAACiE,IAAI,CAAC8D,aAAa,GAAI9D;MACzB;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM+D,aAAa,GAAGlM,WAAW,CAAEmM,IAAmD,IAAK;IACzFtK,YAAY,CAACgE,SAAS,KAAK;MACzB,GAAGA,SAAS;MACZ3B,SAAS,EAAE;QACT,GAAG2B,SAAS,CAAC3B,SAAS;QACtB,CAACiI,IAAI,GAAG;MACV;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,sBAAsB,GAAGpM,WAAW,CAAEmI,IAAU,IAAK;IACzDtG,YAAY,CAACgE,SAAS,IAAI;MACxB,MAAMwG,aAAa,GAAGxG,SAAS,CAAC9B,UAAU,CAACsE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAK6C,IAAI,CAAC7C,EAAE,CAAC;MAC3E,IAAI,CAAC+G,aAAa,IAAI,CAACnL,mBAAmB,CAACiH,IAAI,EAAEkE,aAAa,CAAC9D,QAAQ,CAAC,EAAE;QACxE,OAAO1C,SAAS;MAClB;MAEA,MAAMyG,YAAY,GAAGrL,gBAAgB,CAACkH,IAAI,CAAC;MAC3C,MAAMoE,WAAW,GAAGF,aAAa,CAAC9D,QAAQ,GAAG,CAAC;;MAE9C;MACA,MAAMiE,aAAa,GAAGD,WAAW,GAAG,CAAC,GACjC1G,SAAS,CAAC9B,UAAU,CAACsC,GAAG,CAACiC,CAAC,IACxBA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAK6C,IAAI,CAAC7C,EAAE,GACjB;QAAE,GAAGgD,CAAC;QAAEH,IAAI,EAAEmE,YAAY;QAAE/D,QAAQ,EAAEgE;MAAY,CAAC,GACnDjE,CACN,CAAC,GACDzC,SAAS,CAAC9B,UAAU,CAAC8E,MAAM,CAACP,CAAC,IAAIA,CAAC,CAACH,IAAI,CAAC7C,EAAE,KAAK6C,IAAI,CAAC7C,EAAE,CAAC;;MAE3D;MACA,MAAMmH,YAAY,GAAG;QAAE,GAAG5G,SAAS,CAAC3B;MAAU,CAAC;MAC/CwI,MAAM,CAACC,OAAO,CAACF,YAAY,CAAC,CAACG,OAAO,CAAC,CAAC,CAACT,IAAI,EAAEU,YAAY,CAAC,KAAK;QAC7D,IAAIA,YAAY,IAAIA,YAAY,CAACvH,EAAE,KAAK6C,IAAI,CAAC7C,EAAE,EAAE;UAC/CmH,YAAY,CAACN,IAAI,CAA8B,GAAGG,YAAY;QAChE;MACF,CAAC,CAAC;MAEF,OAAO;QACL,GAAGzG,SAAS;QACZ9B,UAAU,EAAEyI,aAAa;QACzBtI,SAAS,EAAEuI;MACb,CAAC;IACH,CAAC,CAAC;;IAEF;IACA1F,UAAU,CAAC,MAAM;MACfC,cAAc,CAAC;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAE,GAAGe,IAAI,CAACxC,IAAI;MACvB,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,EAAE,CAACqB,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAMP,iBAAiB,GAAGzG,WAAW,CAAC,MAAM;IAC1C,MAAM8M,KAAK,GAAG;MAAEtK,MAAM,EAAE,CAAC;MAAEM,OAAO,EAAE,CAAC;MAAEX,EAAE,EAAE,CAAC;MAAEY,YAAY,EAAE;IAAE,CAAC;IAC/D2J,MAAM,CAACK,MAAM,CAACnL,SAAS,CAACsC,SAAS,CAAC,CAAC0I,OAAO,CAACzE,IAAI,IAAI;MACjD,IAAIA,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAE2E,KAAK,EAAE;QACfA,KAAK,CAACtK,MAAM,IAAI2F,IAAI,CAAC2E,KAAK,CAACtK,MAAM,IAAI,CAAC;QACtCsK,KAAK,CAAChK,OAAO,IAAIqF,IAAI,CAAC2E,KAAK,CAAChK,OAAO,IAAI,CAAC;QACxCgK,KAAK,CAAC3K,EAAE,IAAIgG,IAAI,CAAC2E,KAAK,CAAC3K,EAAE,IAAI,CAAC;QAC9B2K,KAAK,CAAC/J,YAAY,IAAIoF,IAAI,CAAC2E,KAAK,CAAC/J,YAAY,IAAI,CAAC;MACpD;IACF,CAAC,CAAC;IACF,OAAO+J,KAAK;EACd,CAAC,EAAE,CAAClL,SAAS,CAACsC,SAAS,CAAC,CAAC;EAEzB,oBACEzC,OAAA;IAAKuL,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBxL,OAAA;MAAKuL,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BxL,OAAA,CAACxB,WAAW;QACV2B,SAAS,EAAEA,SAAU;QACrBsL,aAAa,EAAEzC,iBAAkB;QACjCpD,YAAY,EAAE5C,mBAAoB;QAClCqC,YAAY,EAAEnC;MAAoB;QAAAwI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eAEF7L,OAAA;QAAKuL,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvBxL,OAAA,CAACvB,UAAU;UAAC4B,MAAM,EAAEF,SAAS,CAACE,MAAO;UAACqD,KAAK,EAAEvD,SAAS,CAAC2B;QAAa;UAAA4J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvE7L,OAAA,CAACtB,YAAY;UACX2B,MAAM,EAAEF,SAAS,CAACE,MAAO;UACzB2B,UAAU,EAAE7B,SAAS,CAAC6B,UAAW;UACjC8J,SAAS,EAAE7C,aAAc;UACzB8C,WAAW,EAAErC;QAAU;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEN7L,OAAA;QAAKuL,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BxL,OAAA,CAACpB,SAAS;UAACoN,IAAI,EAAE7L,SAAS,CAACkC;QAAU;UAAAqJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxC7L,OAAA,CAAClB,UAAU;UACTmN,WAAW,EAAE9L,SAAS,CAACE,MAAM,CAACO,KAAM;UACpCsL,UAAU,EAAE/L,SAAS,CAACE,MAAM,CAACW,IAAK;UAClCuB,WAAW,EAAEpC,SAAS,CAACoC,WAAY;UACnCC,YAAY,EAAErC,SAAS,CAACqC,YAAa;UACrC2J,cAAc,EAAErC,kBAAmB;UACnCsC,aAAa,EAAE9B;QAAkB;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eACF7L,OAAA,CAACjB,cAAc;UACboB,SAAS,EAAEA,SAAU;UACrBkM,OAAO,EAAE9B,WAAY;UACrB+B,SAAS,EAAE7B,aAAc;UACzB8B,kBAAkB,EAAE5B;QAAuB;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACF7L,OAAA,CAACnB,UAAU;UAACyD,UAAU,EAAEnC,SAAS,CAACmC,UAAW;UAACkK,UAAU,EAAExF;QAAe;UAAA0E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN7L,OAAA,CAACrB,iBAAiB;MAChB8N,aAAa,EAAEtM,SAAS,CAACiC,kBAAmB;MAC5CsK,SAAS,EAAE9C;IAA0B;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3L,EAAA,CAp4BID,GAAa;AAAA0M,EAAA,GAAb1M,GAAa;AAs4BnB,eAAeA,GAAG;AAAC,IAAA0M,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}