{"ast":null,"code":"var _jsxFileName = \"/home/matsuyama/claude/git/game/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameDisplay from './components/GameDisplay';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport TitleNotification from './components/TitleNotification';\nimport BattleLog from './components/BattleLog';\nimport Collection from './components/Collection';\nimport MagicPanel from './components/MagicPanel';\nimport { checkNewTitleUnlocks } from './data/characterData';\nimport { getRandomItemDrop } from './data/itemData';\nimport { getCurrentDungeon, getRandomMonsterFromDungeon, getSpellDropFromMonster } from './data/dungeonData';\nimport { getRandomPhrase, getSpellDamageBonus, getSpellUpgradeCost, getAvailableSpells } from './data/magicData';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameState, setGameState] = useState({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0,\n      defense: 0,\n      criticalRate: 5,\n      expBonus: 0,\n      goldBonus: 0,\n      autoAttackSpeed: 500\n    },\n    monsters: [],\n    currentFloor: 1,\n    currentDungeonId: 'forest',\n    autoAttack: false,\n    particles: [],\n    damageTexts: [],\n    unlockedTitles: ['novice'],\n    titleNotifications: [],\n    battleLog: [],\n    collection: [],\n    magicSpells: {\n      'fire_bolt': 1 // Start with Fire Bolt level 1\n    },\n    currentSpell: 'fire_bolt'\n  });\n  const autoAttackRef = useRef(null);\n  const [currentAttackPhrase, setCurrentAttackPhrase] = useState('');\n  const spawnMonster = useCallback(() => {\n    const currentDungeon = getCurrentDungeon(gameState.currentFloor);\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.3;\n    const dungeonMonster = getRandomMonsterFromDungeon(currentDungeon.id, floorMultiplier);\n    if (!dungeonMonster) {\n      // Fallback to basic monster\n      const monster = {\n        x: 600,\n        y: 250,\n        width: 80,\n        height: 100,\n        hp: Math.floor(20 * floorMultiplier),\n        maxHp: Math.floor(20 * floorMultiplier),\n        name: 'スライム',\n        color: '#00ff00',\n        animFrame: 0,\n        animSpeed: 0.05\n      };\n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, monster]\n      }));\n      return;\n    }\n    const monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: dungeonMonster.hp,\n      maxHp: dungeonMonster.hp,\n      name: dungeonMonster.name,\n      color: dungeonMonster.color,\n      animFrame: 0,\n      animSpeed: 0.05\n    };\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster],\n      currentDungeonId: currentDungeon.id\n    }));\n  }, [gameState.currentFloor]);\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, gameState.player.autoAttackSpeed); // Use player's auto attack speed\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n  const addToBattleLog = useCallback(newLog => {\n    setGameState(prevState => ({\n      ...prevState,\n      battleLog: [{\n        ...newLog,\n        id: Date.now() + Math.random()\n      }, ...prevState.battleLog.slice(0, 49) // Keep only last 50 logs\n      ]\n    }));\n  }, []);\n  const addToCollection = useCallback(item => {\n    setGameState(prevState => {\n      const existingItem = prevState.collection.find(c => c.item.id === item.id);\n      if (existingItem) {\n        return {\n          ...prevState,\n          collection: prevState.collection.map(c => c.item.id === item.id ? {\n            ...c,\n            quantity: c.quantity + 1\n          } : c)\n        };\n      } else {\n        return {\n          ...prevState,\n          collection: [...prevState.collection, {\n            item,\n            quantity: 1,\n            firstObtained: new Date()\n          }]\n        };\n      }\n    });\n  }, []);\n  const handleAttack = useCallback((currentState = gameState) => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    // Generate random attack phrase based on current spell\n    const currentSpellLevel = currentState.magicSpells[currentState.currentSpell] || 1;\n    const attackPhrase = getRandomPhrase(currentState.currentSpell, currentSpellLevel);\n    setCurrentAttackPhrase(attackPhrase);\n\n    // Add attack to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'attack',\n        message: `セラフィナが攻撃しました`,\n        attackPhrase\n      });\n    }, 100);\n    const monster = currentState.monsters[0];\n    const spellBonus = getSpellDamageBonus(currentState.currentSpell, currentSpellLevel);\n    let damage = currentState.player.attack + spellBonus + Math.floor(Math.random() * 5);\n\n    // Apply critical hit chance\n    const isCritical = Math.random() * 100 < currentState.player.criticalRate;\n    if (isCritical) {\n      damage = Math.floor(damage * 2);\n    }\n    const updatedMonster = {\n      ...monster,\n      hp: monster.hp - damage\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: isCritical ? `CRITICAL! ${damage}` : damage.toString(),\n      color: isCritical ? '#ff0000' : '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n    const newParticles = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n    let newState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 0\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n    setTimeout(() => {\n      setCurrentAttackPhrase('');\n    }, 3000); // Clear phrase after 3 seconds\n\n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200); // Button can be clicked again quickly\n\n    return newState;\n  }, [gameState]);\n  const killMonster = useCallback((currentState, monster) => {\n    const baseExpGain = Math.floor(monster.maxHp / 2);\n    const baseGoldGain = Math.floor(monster.maxHp / 5) + currentState.currentFloor;\n    const expGain = Math.floor(baseExpGain * (1 + currentState.player.expBonus / 100));\n    const goldGain = Math.floor(baseGoldGain * (1 + currentState.player.goldBonus / 100));\n    let newPlayer = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: currentState.player.gold + goldGain\n    };\n    const newDamageTexts = [...currentState.damageTexts, {\n      id: Date.now() + 1000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 20,\n      text: `+${expGain} EXP`,\n      color: '#00ff00',\n      life: 60,\n      maxLife: 60\n    }, {\n      id: Date.now() + 2000,\n      x: monster.x + monster.width / 2,\n      y: monster.y - 40,\n      text: `+${goldGain} G`,\n      color: '#ffff00',\n      life: 60,\n      maxLife: 60\n    }];\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    // Check for item drop\n    const droppedItem = getRandomItemDrop();\n    if (droppedItem) {\n      setTimeout(() => {\n        addToCollection(droppedItem);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `${droppedItem.icon} ${droppedItem.name}を獲得しました！`,\n          item: droppedItem\n        });\n      }, 200);\n    }\n\n    // Check for spell drop from rare/boss monsters\n    const droppedSpell = getSpellDropFromMonster({\n      id: monster.name,\n      name: monster.name,\n      hp: monster.maxHp,\n      color: monster.color,\n      emoji: '',\n      rarity: monster.maxHp > 150 ? 'boss' : monster.maxHp > 80 ? 'rare' : 'common',\n      spawnWeight: 1\n    });\n    if (droppedSpell) {\n      setTimeout(() => {\n        setGameState(prevState => ({\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [droppedSpell]: Math.max(1, prevState.magicSpells[droppedSpell] || 0)\n          }\n        }));\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `✨ 新しい魔法 ${droppedSpell} を習得しました！`\n        });\n      }, 300);\n    }\n\n    // Add monster defeat log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'monster_defeat',\n        message: `${monster.name}を倒しました！`\n      });\n    }, 150);\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n  const levelUp = useCallback(player => {\n    const newLevel = player.level + 1;\n    const newPlayer = {\n      ...player,\n      level: newLevel,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n\n    // Check for new title unlocks\n    setTimeout(() => {\n      setGameState(prevState => {\n        const newTitleUnlocks = checkNewTitleUnlocks(newLevel, prevState.currentFloor, prevState.unlockedTitles);\n        if (newTitleUnlocks.length > 0) {\n          return {\n            ...prevState,\n            unlockedTitles: [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)],\n            titleNotifications: [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          };\n        }\n        return prevState;\n      });\n    }, 100);\n\n    // Add level up to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'levelup',\n        message: `レベルが${newLevel}に上がりました！`\n      });\n    }, 300);\n    return newPlayer;\n  }, [addToBattleLog]);\n  const handleCanvasClick = useCallback(() => {\n    setGameState(handleAttack);\n  }, [handleAttack]);\n  const handleUpgrade = useCallback(type => {\n    setGameState(prevState => {\n      const newState = {\n        ...prevState\n      };\n      switch (type) {\n        case 'attack':\n          if (newState.player.gold >= 10) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 10,\n              attack: newState.player.attack + 5\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (!newState.autoAttack) {\n            if (newState.player.gold >= 50) {\n              newState.player = {\n                ...newState.player,\n                gold: newState.player.gold - 50\n              };\n              newState.autoAttack = true;\n            }\n          } else {\n            newState.autoAttack = false;\n          }\n          break;\n        case 'hp':\n          if (newState.player.gold >= 25) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 25,\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20\n            };\n          }\n          break;\n        case 'defense':\n          if (newState.player.gold >= 15) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 15,\n              defense: newState.player.defense + 3\n            };\n          }\n          break;\n        case 'critical':\n          if (newState.player.gold >= 30) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 30,\n              criticalRate: newState.player.criticalRate + 2\n            };\n          }\n          break;\n        case 'expBonus':\n          if (newState.player.gold >= 40) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 40,\n              expBonus: newState.player.expBonus + 10\n            };\n          }\n          break;\n        case 'goldBonus':\n          if (newState.player.gold >= 35) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 35,\n              goldBonus: newState.player.goldBonus + 15\n            };\n          }\n          break;\n        case 'autoSpeed':\n          if (newState.player.gold >= 60 && newState.player.autoAttackSpeed > 100) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 60,\n              autoAttackSpeed: Math.max(100, newState.player.autoAttackSpeed - 50)\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      return newState;\n    });\n  }, []);\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => {\n      const newFloor = prevState.currentFloor + 1;\n\n      // Check for new title unlocks based on floor\n      const newTitleUnlocks = checkNewTitleUnlocks(prevState.player.level, newFloor, prevState.unlockedTitles);\n      return {\n        ...prevState,\n        currentFloor: newFloor,\n        monsters: [],\n        unlockedTitles: newTitleUnlocks.length > 0 ? [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)] : prevState.unlockedTitles,\n        titleNotifications: newTitleUnlocks.length > 0 ? [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)] : prevState.titleNotifications\n      };\n    });\n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n  const handleDismissNotification = useCallback(index => {\n    setGameState(prevState => ({\n      ...prevState,\n      titleNotifications: prevState.titleNotifications.filter((_, i) => i !== index)\n    }));\n  }, []);\n  const handleSpellUpgrade = useCallback(spellId => {\n    setGameState(prevState => {\n      const currentLevel = prevState.magicSpells[spellId] || 0;\n      const cost = currentLevel === 0 ? 0 : getSpellUpgradeCost(spellId, currentLevel);\n      if (currentLevel === 0) {\n        // Unlock spell\n        const availableSpells = getAvailableSpells(prevState.player.level);\n        const spell = availableSpells.find(s => s.id === spellId);\n        if (!spell || prevState.player.level < spell.unlockLevel) return prevState;\n        return {\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: 1\n          }\n        };\n      } else {\n        // Upgrade spell\n        if (prevState.player.gold < cost) return prevState;\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: prevState.player.gold - cost\n          },\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: currentLevel + 1\n          }\n        };\n      }\n    });\n  }, []);\n  const handleSpellSelect = useCallback(spellId => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentSpell: spellId\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameDisplay, {\n        gameState: gameState,\n        onAttackClick: handleCanvasClick,\n        attackPhrase: currentAttackPhrase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui-panel\",\n        children: [/*#__PURE__*/_jsxDEV(StatsPanel, {\n          player: gameState.player,\n          floor: gameState.currentFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpgradePanel, {\n          player: gameState.player,\n          autoAttack: gameState.autoAttack,\n          onUpgrade: handleUpgrade,\n          onNextFloor: nextFloor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-panel\",\n        children: [/*#__PURE__*/_jsxDEV(BattleLog, {\n          logs: gameState.battleLog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MagicPanel, {\n          playerLevel: gameState.player.level,\n          playerGold: gameState.player.gold,\n          magicSpells: gameState.magicSpells,\n          currentSpell: gameState.currentSpell,\n          onSpellUpgrade: handleSpellUpgrade,\n          onSpellSelect: handleSpellSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Collection, {\n          collection: gameState.collection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TitleNotification, {\n      notifications: gameState.titleNotifications,\n      onDismiss: handleDismissNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 586,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ECmj1WUvm4UiZqNZWNiOKGPrLTg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","GameDisplay","StatsPanel","UpgradePanel","TitleNotification","BattleLog","Collection","MagicPanel","checkNewTitleUnlocks","getRandomItemDrop","getCurrentDungeon","getRandomMonsterFromDungeon","getSpellDropFromMonster","getRandomPhrase","getSpellDamageBonus","getSpellUpgradeCost","getAvailableSpells","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","player","x","y","width","height","hp","maxHp","level","exp","expMax","attack","gold","animFrame","animSpeed","isAttacking","attackCooldown","defense","criticalRate","expBonus","goldBonus","autoAttackSpeed","monsters","currentFloor","currentDungeonId","autoAttack","particles","damageTexts","unlockedTitles","titleNotifications","battleLog","collection","magicSpells","currentSpell","autoAttackRef","currentAttackPhrase","setCurrentAttackPhrase","spawnMonster","currentDungeon","floorMultiplier","dungeonMonster","id","monster","Math","floor","name","color","prevState","current","setInterval","length","handleAttack","clearInterval","addToBattleLog","newLog","Date","now","random","slice","addToCollection","item","existingItem","find","c","map","quantity","firstObtained","currentState","currentSpellLevel","attackPhrase","setTimeout","timestamp","type","message","spellBonus","damage","isCritical","updatedMonster","newDamageTexts","text","toString","life","maxLife","newParticles","i","push","vx","vy","newState","killMonster","baseExpGain","baseGoldGain","expGain","goldGain","newPlayer","levelUp","droppedItem","icon","droppedSpell","emoji","rarity","spawnWeight","max","filter","m","newLevel","newTitleUnlocks","t","handleCanvasClick","handleUpgrade","nextFloor","newFloor","handleDismissNotification","index","_","handleSpellUpgrade","spellId","currentLevel","cost","availableSpells","spell","s","unlockLevel","handleSpellSelect","className","children","onAttackClick","fileName","_jsxFileName","lineNumber","columnNumber","onUpgrade","onNextFloor","logs","playerLevel","playerGold","onSpellUpgrade","onSpellSelect","notifications","onDismiss","_c","$RefreshReg$"],"sources":["/home/matsuyama/claude/git/game/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport GameDisplay from './components/GameDisplay';\nimport StatsPanel from './components/StatsPanel';\nimport UpgradePanel from './components/UpgradePanel';\nimport TitleNotification from './components/TitleNotification';\nimport BattleLog from './components/BattleLog';\nimport Collection from './components/Collection';\nimport MagicPanel from './components/MagicPanel';\nimport { GameState, Monster, UpgradeType, Player, DamageText, Particle, BattleLog as BattleLogType, CollectedItem } from './types/gameTypes';\nimport { getRandomAttackPhrase } from './data/attackPhrases';\nimport { checkNewTitleUnlocks, getCurrentTitle } from './data/characterData';\nimport { getRandomItemDrop } from './data/itemData';\nimport { getCurrentDungeon, getRandomMonsterFromDungeon, getSpellDropFromMonster } from './data/dungeonData';\nimport { getRandomPhrase, getSpellDamageBonus, getSpellUpgradeCost, getAvailableSpells } from './data/magicData';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    player: {\n      x: 100,\n      y: 300,\n      width: 60,\n      height: 80,\n      hp: 100,\n      maxHp: 100,\n      level: 1,\n      exp: 0,\n      expMax: 100,\n      attack: 10,\n      gold: 0,\n      animFrame: 0,\n      animSpeed: 0.1,\n      isAttacking: false,\n      attackCooldown: 0,\n      defense: 0,\n      criticalRate: 5,\n      expBonus: 0,\n      goldBonus: 0,\n      autoAttackSpeed: 500\n    },\n    monsters: [],\n    currentFloor: 1,\n    currentDungeonId: 'forest',\n    autoAttack: false,\n    particles: [],\n    damageTexts: [],\n    unlockedTitles: ['novice'],\n    titleNotifications: [],\n    battleLog: [],\n    collection: [],\n    magicSpells: {\n      'fire_bolt': 1 // Start with Fire Bolt level 1\n    },\n    currentSpell: 'fire_bolt'\n  });\n\n  const autoAttackRef = useRef<NodeJS.Timeout | null>(null);\n  const [currentAttackPhrase, setCurrentAttackPhrase] = useState<string>('');\n\n  const spawnMonster = useCallback(() => {\n    const currentDungeon = getCurrentDungeon(gameState.currentFloor);\n    const floorMultiplier = 1 + (gameState.currentFloor - 1) * 0.3;\n    \n    const dungeonMonster = getRandomMonsterFromDungeon(currentDungeon.id, floorMultiplier);\n    \n    if (!dungeonMonster) {\n      // Fallback to basic monster\n      const monster: Monster = {\n        x: 600,\n        y: 250,\n        width: 80,\n        height: 100,\n        hp: Math.floor(20 * floorMultiplier),\n        maxHp: Math.floor(20 * floorMultiplier),\n        name: 'スライム',\n        color: '#00ff00',\n        animFrame: 0,\n        animSpeed: 0.05\n      };\n      \n      setGameState(prevState => ({\n        ...prevState,\n        monsters: [...prevState.monsters, monster]\n      }));\n      return;\n    }\n\n    const monster: Monster = {\n      x: 600,\n      y: 250,\n      width: 80,\n      height: 100,\n      hp: dungeonMonster.hp,\n      maxHp: dungeonMonster.hp,\n      name: dungeonMonster.name,\n      color: dungeonMonster.color,\n      animFrame: 0,\n      animSpeed: 0.05\n    };\n\n    setGameState(prevState => ({\n      ...prevState,\n      monsters: [...prevState.monsters, monster],\n      currentDungeonId: currentDungeon.id\n    }));\n  }, [gameState.currentFloor]);\n\n  useEffect(() => {\n    spawnMonster();\n  }, []);\n\n  useEffect(() => {\n    if (gameState.autoAttack && !autoAttackRef.current) {\n      autoAttackRef.current = setInterval(() => {\n        setGameState(prevState => {\n          if (prevState.monsters.length > 0) {\n            return handleAttack(prevState);\n          }\n          return prevState;\n        });\n      }, gameState.player.autoAttackSpeed); // Use player's auto attack speed\n    } else if (!gameState.autoAttack && autoAttackRef.current) {\n      clearInterval(autoAttackRef.current);\n      autoAttackRef.current = null;\n    }\n\n    return () => {\n      if (autoAttackRef.current) {\n        clearInterval(autoAttackRef.current);\n      }\n    };\n  }, [gameState.autoAttack]);\n\n  const addToBattleLog = useCallback((newLog: Omit<BattleLogType, 'id'>) => {\n    setGameState(prevState => ({\n      ...prevState,\n      battleLog: [\n        {\n          ...newLog,\n          id: Date.now() + Math.random()\n        },\n        ...prevState.battleLog.slice(0, 49) // Keep only last 50 logs\n      ]\n    }));\n  }, []);\n\n  const addToCollection = useCallback((item: any) => {\n    setGameState(prevState => {\n      const existingItem = prevState.collection.find(c => c.item.id === item.id);\n      \n      if (existingItem) {\n        return {\n          ...prevState,\n          collection: prevState.collection.map(c =>\n            c.item.id === item.id\n              ? { ...c, quantity: c.quantity + 1 }\n              : c\n          )\n        };\n      } else {\n        return {\n          ...prevState,\n          collection: [\n            ...prevState.collection,\n            {\n              item,\n              quantity: 1,\n              firstObtained: new Date()\n            }\n          ]\n        };\n      }\n    });\n  }, []);\n\n  const handleAttack = useCallback((currentState: GameState = gameState): GameState => {\n    if (currentState.monsters.length === 0) return currentState;\n\n    // Generate random attack phrase based on current spell\n    const currentSpellLevel = currentState.magicSpells[currentState.currentSpell] || 1;\n    const attackPhrase = getRandomPhrase(currentState.currentSpell, currentSpellLevel);\n    setCurrentAttackPhrase(attackPhrase);\n\n    // Add attack to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'attack',\n        message: `セラフィナが攻撃しました`,\n        attackPhrase\n      });\n    }, 100);\n\n    const monster = currentState.monsters[0];\n    const spellBonus = getSpellDamageBonus(currentState.currentSpell, currentSpellLevel);\n    let damage = currentState.player.attack + spellBonus + Math.floor(Math.random() * 5);\n    \n    // Apply critical hit chance\n    const isCritical = Math.random() * 100 < currentState.player.criticalRate;\n    if (isCritical) {\n      damage = Math.floor(damage * 2);\n    }\n    \n    const updatedMonster: Monster = { ...monster, hp: monster.hp - damage };\n\n    const newDamageTexts: DamageText[] = [...currentState.damageTexts, {\n      id: Date.now(),\n      x: monster.x + monster.width / 2,\n      y: monster.y,\n      text: isCritical ? `CRITICAL! ${damage}` : damage.toString(),\n      color: isCritical ? '#ff0000' : '#ff6b6b',\n      life: 60,\n      maxLife: 60\n    }];\n\n    const newParticles: Particle[] = [...currentState.particles];\n    for (let i = 0; i < 8; i++) {\n      newParticles.push({\n        id: Date.now() + i,\n        x: monster.x + monster.width / 2,\n        y: monster.y + monster.height / 2,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        color: '#ff6b6b',\n        life: 20,\n        maxLife: 20\n      });\n    }\n\n    let newState: GameState = {\n      ...currentState,\n      player: {\n        ...currentState.player,\n        isAttacking: true,\n        attackCooldown: 0\n      },\n      monsters: [updatedMonster, ...currentState.monsters.slice(1)],\n      damageTexts: newDamageTexts,\n      particles: newParticles\n    };\n\n    if (updatedMonster.hp <= 0) {\n      newState = killMonster(newState, updatedMonster);\n    }\n\n    setTimeout(() => {\n      setCurrentAttackPhrase('');\n    }, 3000); // Clear phrase after 3 seconds\n    \n    setTimeout(() => {\n      setGameState(prevState => ({\n        ...prevState,\n        player: {\n          ...prevState.player,\n          isAttacking: false\n        }\n      }));\n    }, 200); // Button can be clicked again quickly\n\n    return newState;\n  }, [gameState]);\n\n  const killMonster = useCallback((currentState: GameState, monster: Monster): GameState => {\n    const baseExpGain = Math.floor(monster.maxHp / 2);\n    const baseGoldGain = Math.floor(monster.maxHp / 5) + currentState.currentFloor;\n    \n    const expGain = Math.floor(baseExpGain * (1 + currentState.player.expBonus / 100));\n    const goldGain = Math.floor(baseGoldGain * (1 + currentState.player.goldBonus / 100));\n\n    let newPlayer: Player = {\n      ...currentState.player,\n      exp: currentState.player.exp + expGain,\n      gold: currentState.player.gold + goldGain\n    };\n\n    const newDamageTexts: DamageText[] = [\n      ...currentState.damageTexts,\n      {\n        id: Date.now() + 1000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 20,\n        text: `+${expGain} EXP`,\n        color: '#00ff00',\n        life: 60,\n        maxLife: 60\n      },\n      {\n        id: Date.now() + 2000,\n        x: monster.x + monster.width / 2,\n        y: monster.y - 40,\n        text: `+${goldGain} G`,\n        color: '#ffff00',\n        life: 60,\n        maxLife: 60\n      }\n    ];\n\n    if (newPlayer.exp >= newPlayer.expMax) {\n      newPlayer = levelUp(newPlayer);\n      newDamageTexts.push({\n        id: Date.now() + 3000,\n        x: newPlayer.x + newPlayer.width / 2,\n        y: newPlayer.y,\n        text: 'LEVEL UP!',\n        color: '#ff00ff',\n        life: 60,\n        maxLife: 60\n      });\n    }\n\n    // Check for item drop\n    const droppedItem = getRandomItemDrop();\n    if (droppedItem) {\n      setTimeout(() => {\n        addToCollection(droppedItem);\n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `${droppedItem.icon} ${droppedItem.name}を獲得しました！`,\n          item: droppedItem\n        });\n      }, 200);\n    }\n\n    // Check for spell drop from rare/boss monsters\n    const droppedSpell = getSpellDropFromMonster({\n      id: monster.name,\n      name: monster.name,\n      hp: monster.maxHp,\n      color: monster.color,\n      emoji: '',\n      rarity: monster.maxHp > 150 ? 'boss' : monster.maxHp > 80 ? 'rare' : 'common',\n      spawnWeight: 1\n    });\n    \n    if (droppedSpell) {\n      setTimeout(() => {\n        setGameState(prevState => ({\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [droppedSpell]: Math.max(1, prevState.magicSpells[droppedSpell] || 0)\n          }\n        }));\n        \n        addToBattleLog({\n          timestamp: new Date(),\n          type: 'item_drop',\n          message: `✨ 新しい魔法 ${droppedSpell} を習得しました！`\n        });\n      }, 300);\n    }\n\n    // Add monster defeat log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'monster_defeat',\n        message: `${monster.name}を倒しました！`\n      });\n    }, 150);\n\n    setTimeout(() => {\n      spawnMonster();\n    }, 500);\n\n    return {\n      ...currentState,\n      player: newPlayer,\n      monsters: currentState.monsters.filter(m => m !== monster),\n      damageTexts: newDamageTexts\n    };\n  }, [spawnMonster]);\n\n  const levelUp = useCallback((player: Player): Player => {\n    const newLevel = player.level + 1;\n    const newPlayer = {\n      ...player,\n      level: newLevel,\n      exp: player.exp - player.expMax,\n      expMax: Math.floor(player.expMax * 1.5),\n      attack: player.attack + 3,\n      maxHp: player.maxHp + 10,\n      hp: player.maxHp + 10\n    };\n\n    // Check for new title unlocks\n    setTimeout(() => {\n      setGameState(prevState => {\n        const newTitleUnlocks = checkNewTitleUnlocks(newLevel, prevState.currentFloor, prevState.unlockedTitles);\n        if (newTitleUnlocks.length > 0) {\n          return {\n            ...prevState,\n            unlockedTitles: [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)],\n            titleNotifications: [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          };\n        }\n        return prevState;\n      });\n    }, 100);\n\n    // Add level up to battle log\n    setTimeout(() => {\n      addToBattleLog({\n        timestamp: new Date(),\n        type: 'levelup',\n        message: `レベルが${newLevel}に上がりました！`\n      });\n    }, 300);\n\n    return newPlayer;\n  }, [addToBattleLog]);\n\n  const handleCanvasClick = useCallback(() => {\n    setGameState(handleAttack);\n  }, [handleAttack]);\n\n\n  const handleUpgrade = useCallback((type: UpgradeType) => {\n    setGameState(prevState => {\n      const newState: GameState = { ...prevState };\n      \n      switch (type) {\n        case 'attack':\n          if (newState.player.gold >= 10) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 10,\n              attack: newState.player.attack + 5\n            };\n          }\n          break;\n        case 'autoAttack':\n          if (!newState.autoAttack) {\n            if (newState.player.gold >= 50) {\n              newState.player = {\n                ...newState.player,\n                gold: newState.player.gold - 50\n              };\n              newState.autoAttack = true;\n            }\n          } else {\n            newState.autoAttack = false;\n          }\n          break;\n        case 'hp':\n          if (newState.player.gold >= 25) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 25,\n              maxHp: newState.player.maxHp + 20,\n              hp: newState.player.maxHp + 20\n            };\n          }\n          break;\n        case 'defense':\n          if (newState.player.gold >= 15) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 15,\n              defense: newState.player.defense + 3\n            };\n          }\n          break;\n        case 'critical':\n          if (newState.player.gold >= 30) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 30,\n              criticalRate: newState.player.criticalRate + 2\n            };\n          }\n          break;\n        case 'expBonus':\n          if (newState.player.gold >= 40) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 40,\n              expBonus: newState.player.expBonus + 10\n            };\n          }\n          break;\n        case 'goldBonus':\n          if (newState.player.gold >= 35) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 35,\n              goldBonus: newState.player.goldBonus + 15\n            };\n          }\n          break;\n        case 'autoSpeed':\n          if (newState.player.gold >= 60 && newState.player.autoAttackSpeed > 100) {\n            newState.player = {\n              ...newState.player,\n              gold: newState.player.gold - 60,\n              autoAttackSpeed: Math.max(100, newState.player.autoAttackSpeed - 50)\n            };\n          }\n          break;\n        default:\n          break;\n      }\n      \n      return newState;\n    });\n  }, []);\n\n  const nextFloor = useCallback(() => {\n    setGameState(prevState => {\n      const newFloor = prevState.currentFloor + 1;\n      \n      // Check for new title unlocks based on floor\n      const newTitleUnlocks = checkNewTitleUnlocks(prevState.player.level, newFloor, prevState.unlockedTitles);\n      \n      return {\n        ...prevState,\n        currentFloor: newFloor,\n        monsters: [],\n        unlockedTitles: newTitleUnlocks.length > 0 \n          ? [...prevState.unlockedTitles, ...newTitleUnlocks.map(t => t.id)]\n          : prevState.unlockedTitles,\n        titleNotifications: newTitleUnlocks.length > 0\n          ? [...prevState.titleNotifications, ...newTitleUnlocks.map(t => t.name)]\n          : prevState.titleNotifications\n      };\n    });\n    \n    setTimeout(() => {\n      spawnMonster();\n    }, 100);\n  }, [spawnMonster]);\n\n  const handleDismissNotification = useCallback((index: number) => {\n    setGameState(prevState => ({\n      ...prevState,\n      titleNotifications: prevState.titleNotifications.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  const handleSpellUpgrade = useCallback((spellId: string) => {\n    setGameState(prevState => {\n      const currentLevel = prevState.magicSpells[spellId] || 0;\n      const cost = currentLevel === 0 ? 0 : getSpellUpgradeCost(spellId, currentLevel);\n      \n      if (currentLevel === 0) {\n        // Unlock spell\n        const availableSpells = getAvailableSpells(prevState.player.level);\n        const spell = availableSpells.find(s => s.id === spellId);\n        if (!spell || prevState.player.level < spell.unlockLevel) return prevState;\n        \n        return {\n          ...prevState,\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: 1\n          }\n        };\n      } else {\n        // Upgrade spell\n        if (prevState.player.gold < cost) return prevState;\n        \n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: prevState.player.gold - cost\n          },\n          magicSpells: {\n            ...prevState.magicSpells,\n            [spellId]: currentLevel + 1\n          }\n        };\n      }\n    });\n  }, []);\n\n  const handleSpellSelect = useCallback((spellId: string) => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentSpell: spellId\n    }));\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game-container\">\n        <GameDisplay \n          gameState={gameState}\n          onAttackClick={handleCanvasClick}\n          attackPhrase={currentAttackPhrase}\n        />\n        \n        <div className=\"ui-panel\">\n          <StatsPanel player={gameState.player} floor={gameState.currentFloor} />\n          <UpgradePanel \n            player={gameState.player}\n            autoAttack={gameState.autoAttack}\n            onUpgrade={handleUpgrade}\n            onNextFloor={nextFloor}\n          />\n        </div>\n        \n        <div className=\"bottom-panel\">\n          <BattleLog logs={gameState.battleLog} />\n          <MagicPanel \n            playerLevel={gameState.player.level}\n            playerGold={gameState.player.gold}\n            magicSpells={gameState.magicSpells}\n            currentSpell={gameState.currentSpell}\n            onSpellUpgrade={handleSpellUpgrade}\n            onSpellSelect={handleSpellSelect}\n          />\n          <Collection collection={gameState.collection} />\n        </div>\n      </div>\n      \n      <TitleNotification \n        notifications={gameState.titleNotifications}\n        onDismiss={handleDismissNotification}\n      />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}